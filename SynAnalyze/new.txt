sstart:start
start:external_declaration start
start:$
external_declaration:declaration
external_declaration:function_definition
type_specifier:int
type_specifier:double
type_specifier:float
type_specifier:void
declaration:type_specifier declaration_parameter declaration_parameter_suffix ;
declaration_parameter:identifier = expression declaration_parameter_suffix
declaration_parameter:identifier declaration_parameter_suffix
declaration_parameter_suffix:, declaration_parameter declaration_parameter_suffix
declaration_parameter_suffix:$
primary_expression:identifier
primary_expression:number
primary_expression:( expression )
expression:constant_expression
assignment_operator:=
assignment_operator:+=
assignment_operator:-=
assignment_operator:*=
assignment_operator:/=
assignment_operator:%=
assignment_operator:^=
assignment_operator:&=
assignment_operator:|=
assignment_expression:identifier assignment_operator expression
assignment_expression_list_suffix:, assignment_expression assignment_expression_list_suffix
assignment_expression_list_suffix:$
assignment_expression_list:assignment_expression assignment_expression_list_suffix
assignment_expression_list:$
constant_expression:or_bool_expression
or_bool_expression:or_bool_expression or_operator M and_bool_expression
or_bool_expression:and_bool_expression
and_bool_expression:and_bool_expression and_operator M bitwise_or_expression
and_bool_expression:bitwise_or_expression
single_bool_expression:single_bool_expression bool_operator first_expression
single_bool_expression:first_expression
first_expression:first_expression first_operator second_expression
first_expression:second_expression
second_expression:second_expression second_operator primary_expression
second_expression:third_expression
third_expression:third_operator primary_expression
third_expression:primary_expression
or_operator:||
and_operator:&&
bool_operator:<
bool_operator:>
bool_operator:!=
bool_operator:==
bool_operator:<=
bool_operator:>=
first_operator:+
first_operator:-
second_operator:*
second_operator:/
function_definition:int main ( function_parameter_list ) compound_statement
function_parameter_list:$
function_parameter_list:void
compound_statement:{ statement_list }
statement_list:statement_list statement M
statement_list:$
statement:expression_statement
statement:jump_statement
statement:iteration_statement
statement:compound_statement
statement:declaration
statement:selection_statement
selection_statement:if ( constant_expression ) M statement N else M statement
selection_statement:if ( constant_expression ) M statement
iteration_statement:while ( M constant_expression ) M statement
expression_statement:assignment_expression_list ;
jump_statement:return expression ;
jump_statement:return ;
M:$
N:$
second_operator:%
third_operator:!
third_operator:~
bitwise_or_operator:|
bitwise_xor_operator:^
bitwise_and_operator:&
bitwise_or_expression:bitwise_or_expression bitwise_or_operator bitwise_xor_expression
bitwise_or_expression:bitwise_xor_expression
bitwise_xor_expression:bitwise_xor_expression bitwise_xor_operator bitwise_and_expression
bitwise_xor_expression:bitwise_and_expression
bitwise_and_expression:bitwise_and_expression bitwise_and_operator single_bool_expression
bitwise_and_expression:single_bool_expression