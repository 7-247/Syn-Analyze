
token:int
symbol stack:
[('#', -1, 1)]
status stack:
[0]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0)]
status stack:
[0, 5]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0)]
status stack:
[0, 4]
token:=
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1)]
status stack:
[0, 4, 12]
token:number
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2)]
status stack:
[0, 4, 12, 16]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), ('5', 'number', 0, 3)]
status stack:
[0, 4, 12, 16, 38]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'primary_expression', 1, 1)]
status stack:
[0, 4, 12, 16, 36]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'third_expression', 2, 0)]
status stack:
[0, 4, 12, 16, 32]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'second_expression', 3, 0)]
status stack:
[0, 4, 12, 16, 31]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'first_expression', 4, 0)]
status stack:
[0, 4, 12, 16, 30]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'single_bool_expression', 5, 0)]
status stack:
[0, 4, 12, 16, 29]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'bitwise_and_expression', 6, 0)]
status stack:
[0, 4, 12, 16, 28]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'bitwise_xor_expression', 7, 0)]
status stack:
[0, 4, 12, 16, 27]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'bitwise_or_expression', 8, 0)]
status stack:
[0, 4, 12, 16, 26]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'and_bool_expression', 9, 0)]
status stack:
[0, 4, 12, 16, 25]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'or_bool_expression', 10, 0)]
status stack:
[0, 4, 12, 16, 24]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'constant_expression', 11, 0)]
status stack:
[0, 4, 12, 16, 23]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'expression', 12, 0)]
status stack:
[0, 4, 12, 16, 22]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), ('a', 'identifier', 0, 1), ('operator', '=', 0, 2), (None, 'expression', 12, 0), (None, 'declaration_parameter_suffix', 1, 2)]
status stack:
[0, 4, 12, 16, 22, 44]
token:,
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0)]
status stack:
[0, 4, 11]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5)]
status stack:
[0, 4, 11, 15]
token:=
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6)]
status stack:
[0, 4, 11, 15, 12]
token:number
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7)]
status stack:
[0, 4, 11, 15, 12, 16]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), ('3', 'number', 0, 8)]
status stack:
[0, 4, 11, 15, 12, 16, 38]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'primary_expression', 1, 3)]
status stack:
[0, 4, 11, 15, 12, 16, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'third_expression', 2, 1)]
status stack:
[0, 4, 11, 15, 12, 16, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'second_expression', 3, 1)]
status stack:
[0, 4, 11, 15, 12, 16, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'first_expression', 4, 1)]
status stack:
[0, 4, 11, 15, 12, 16, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'single_bool_expression', 5, 1)]
status stack:
[0, 4, 11, 15, 12, 16, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'bitwise_and_expression', 6, 1)]
status stack:
[0, 4, 11, 15, 12, 16, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'bitwise_xor_expression', 7, 1)]
status stack:
[0, 4, 11, 15, 12, 16, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'bitwise_or_expression', 8, 1)]
status stack:
[0, 4, 11, 15, 12, 16, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'and_bool_expression', 9, 1)]
status stack:
[0, 4, 11, 15, 12, 16, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'or_bool_expression', 10, 1)]
status stack:
[0, 4, 11, 15, 12, 16, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'constant_expression', 11, 1)]
status stack:
[0, 4, 11, 15, 12, 16, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'expression', 12, 1)]
status stack:
[0, 4, 11, 15, 12, 16, 22]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), ('b', 'identifier', 0, 6), ('operator', '=', 0, 7), (None, 'expression', 12, 1), (None, 'declaration_parameter_suffix', 1, 4)]
status stack:
[0, 4, 11, 15, 12, 16, 22, 44]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), (None, 'declaration_parameter', 13, 1)]
status stack:
[0, 4, 11, 15, 21]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 5), (None, 'declaration_parameter', 13, 1), (None, 'declaration_parameter_suffix', 1, 5)]
status stack:
[0, 4, 11, 15, 21, 43]
token:;
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), (None, 'declaration_parameter_suffix', 14, 0)]
status stack:
[0, 4, 11, 14]
token:int
symbol stack:
[('#', -1, 1), (None, 'type_specifier', 1, 0), (None, 'declaration_parameter', 13, 0), (None, 'declaration_parameter_suffix', 14, 0), ('limiter', ';', 0, 11)]
status stack:
[0, 4, 11, 14, 20]
token:int
symbol stack:
[('#', -1, 1), (None, 'declaration', 15, 0)]
status stack:
[0, 3]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0)]
status stack:
[0, 2]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), ('keyword', 'int', 0, 12)]
status stack:
[0, 2, 5]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6)]
status stack:
[0, 2, 4]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13)]
status stack:
[0, 2, 4, 12]
token:number
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14)]
status stack:
[0, 2, 4, 12, 16]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), ('15', 'number', 0, 15)]
status stack:
[0, 2, 4, 12, 16, 38]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'primary_expression', 1, 7)]
status stack:
[0, 2, 4, 12, 16, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'third_expression', 2, 2)]
status stack:
[0, 2, 4, 12, 16, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'second_expression', 3, 2)]
status stack:
[0, 2, 4, 12, 16, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'first_expression', 4, 2)]
status stack:
[0, 2, 4, 12, 16, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'single_bool_expression', 5, 2)]
status stack:
[0, 2, 4, 12, 16, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'bitwise_and_expression', 6, 2)]
status stack:
[0, 2, 4, 12, 16, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'bitwise_xor_expression', 7, 2)]
status stack:
[0, 2, 4, 12, 16, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'bitwise_or_expression', 8, 2)]
status stack:
[0, 2, 4, 12, 16, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'and_bool_expression', 9, 2)]
status stack:
[0, 2, 4, 12, 16, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'or_bool_expression', 10, 2)]
status stack:
[0, 2, 4, 12, 16, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'constant_expression', 11, 2)]
status stack:
[0, 2, 4, 12, 16, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'expression', 12, 2)]
status stack:
[0, 2, 4, 12, 16, 22]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), ('c', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'expression', 12, 2), (None, 'declaration_parameter_suffix', 1, 8)]
status stack:
[0, 2, 4, 12, 16, 22, 44]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), (None, 'declaration_parameter', 13, 2)]
status stack:
[0, 2, 4, 11]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), (None, 'declaration_parameter', 13, 2), (None, 'declaration_parameter_suffix', 1, 9)]
status stack:
[0, 2, 4, 11, 14]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'type_specifier', 1, 6), (None, 'declaration_parameter', 13, 2), (None, 'declaration_parameter_suffix', 1, 9), ('limiter', ';', 0, 18)]
status stack:
[0, 2, 4, 11, 14, 20]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'declaration', 14, 1)]
status stack:
[0, 2, 3]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1)]
status stack:
[0, 2, 2]
token:main
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19)]
status stack:
[0, 2, 2, 5]
token:(
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20)]
status stack:
[0, 2, 2, 5, 13]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21)]
status stack:
[0, 2, 2, 5, 13, 19]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41]
token:{
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), ('keyword', 'int', 0, 26)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 444]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12]
token:number
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), ('8', 'number', 0, 29)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 38]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'primary_expression', 1, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 36]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'third_expression', 2, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 32]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'second_expression', 3, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 31]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'first_expression', 4, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 30]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'single_bool_expression', 5, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 29]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'bitwise_and_expression', 6, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 28]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'bitwise_xor_expression', 7, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 27]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'bitwise_or_expression', 8, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 26]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'and_bool_expression', 9, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 25]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'or_bool_expression', 10, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 24]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'constant_expression', 11, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 23]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'expression', 12, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 22]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), ('d', 'identifier', 0, 27), ('operator', '=', 0, 28), (None, 'expression', 12, 3), (None, 'declaration_parameter_suffix', 1, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 22, 44]
token:,
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12]
token:number
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), ('9', 'number', 0, 34)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 38]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'primary_expression', 1, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'third_expression', 2, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'second_expression', 3, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'first_expression', 4, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'single_bool_expression', 5, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'bitwise_and_expression', 6, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'bitwise_xor_expression', 7, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'bitwise_or_expression', 8, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'and_bool_expression', 9, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'or_bool_expression', 10, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'constant_expression', 11, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'expression', 12, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 22]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), ('e', 'identifier', 0, 32), ('operator', '=', 0, 33), (None, 'expression', 12, 4), (None, 'declaration_parameter_suffix', 1, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 22, 44]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), (None, 'declaration_parameter', 13, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), ('limiter', ',', 0, 31), (None, 'declaration_parameter', 13, 4), (None, 'declaration_parameter_suffix', 1, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 43]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), (None, 'declaration_parameter_suffix', 14, 2)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 1106]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'type_specifier', 1, 12), (None, 'declaration_parameter', 13, 3), (None, 'declaration_parameter_suffix', 14, 2), ('limiter', ';', 0, 37)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 1106, 1621]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'declaration', 15, 2)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 442]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'statement', 16, 1)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 431]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 1, 11), (None, 'statement', 16, 1), (None, 'M', 1, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 431, 716]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), ('keyword', 'int', 0, 39)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 444]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12]
token:number
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), ('4', 'number', 0, 42)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 38]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'primary_expression', 1, 20)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'third_expression', 2, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'second_expression', 3, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'first_expression', 4, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'single_bool_expression', 5, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'bitwise_and_expression', 6, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'bitwise_xor_expression', 7, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'bitwise_or_expression', 8, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'and_bool_expression', 9, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'or_bool_expression', 10, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'constant_expression', 11, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'expression', 12, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 22]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), ('cnt', 'identifier', 0, 40), ('operator', '=', 0, 41), (None, 'expression', 12, 5), (None, 'declaration_parameter_suffix', 1, 21)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 22, 44]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), (None, 'declaration_parameter', 13, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), (None, 'declaration_parameter', 13, 5), (None, 'declaration_parameter_suffix', 1, 22)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 1106]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'type_specifier', 1, 19), (None, 'declaration_parameter', 13, 5), (None, 'declaration_parameter_suffix', 1, 22), ('limiter', ';', 0, 45)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 1106, 1621]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'declaration', 14, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 442]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'statement', 15, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 431]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 17, 0), (None, 'statement', 15, 3), (None, 'M', 1, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 431, 716]
token:int
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 18, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 18, 0), ('keyword', 'int', 0, 47)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 444]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 18, 0), (None, 'type_specifier', 1, 24)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 18, 0), (None, 'type_specifier', 1, 24), ('tep', 'identifier', 0, 48)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 18, 0), (None, 'type_specifier', 1, 24), ('tep', 'identifier', 0, 48), (None, 'declaration_parameter_suffix', 1, 25)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 12, 17]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 18, 0), (None, 'type_specifier', 1, 24), (None, 'declaration_parameter', 2, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 18, 0), (None, 'type_specifier', 1, 24), (None, 'declaration_parameter', 2, 6), (None, 'declaration_parameter_suffix', 1, 26)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 1106]
token:while
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 18, 0), (None, 'type_specifier', 1, 24), (None, 'declaration_parameter', 2, 6), (None, 'declaration_parameter_suffix', 1, 26), ('limiter', ';', 0, 51)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 443, 749, 1106, 1621]
token:while
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 18, 0), (None, 'declaration', 3, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 442]
token:while
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 18, 0), (None, 'statement', 4, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 431]
token:while
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 18, 0), (None, 'statement', 4, 6), (None, 'M', 1, 27)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 431, 716]
token:while
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255]
token:(
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104]
token:!=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), ('cnt', 'identifier', 0, 56)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 83]
token:!=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'primary_expression', 1, 29)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 82]
token:!=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'third_expression', 2, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 80]
token:!=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'second_expression', 3, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 79]
token:!=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'first_expression', 4, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 78]
token:!=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'single_bool_expression', 5, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77]
token:number
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'single_bool_expression', 5, 6), ('operator', '!=', 0, 57)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 58]
token:number
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'single_bool_expression', 5, 6), (None, 'bool_operator', 1, 30)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'single_bool_expression', 5, 6), (None, 'bool_operator', 1, 30), ('0', 'number', 0, 58)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145, 241]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'single_bool_expression', 5, 6), (None, 'bool_operator', 1, 30), (None, 'primary_expression', 1, 31)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145, 239]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'single_bool_expression', 5, 6), (None, 'bool_operator', 1, 30), (None, 'third_expression', 2, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145, 237]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'single_bool_expression', 5, 6), (None, 'bool_operator', 1, 30), (None, 'second_expression', 3, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145, 236]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'single_bool_expression', 5, 6), (None, 'bool_operator', 1, 30), (None, 'first_expression', 4, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145, 235]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'single_bool_expression', 6, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'bitwise_and_expression', 7, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 76]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'bitwise_xor_expression', 8, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 75]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'bitwise_or_expression', 9, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 74]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'and_bool_expression', 10, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'or_bool_expression', 11, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620]
token:{
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175]
token:{
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748]
token:(
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), ('a', 'identifier', 0, 65)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 83]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'primary_expression', 1, 34)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 82]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'third_expression', 2, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 80]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'second_expression', 3, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 79]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'first_expression', 4, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 78]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'single_bool_expression', 5, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'single_bool_expression', 5, 7), ('operator', '>', 0, 66)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 57]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'single_bool_expression', 5, 7), (None, 'bool_operator', 1, 35)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'single_bool_expression', 5, 7), (None, 'bool_operator', 1, 35), ('b', 'identifier', 0, 67)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 240]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'single_bool_expression', 5, 7), (None, 'bool_operator', 1, 35), (None, 'primary_expression', 1, 36)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 239]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'single_bool_expression', 5, 7), (None, 'bool_operator', 1, 35), (None, 'third_expression', 2, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 237]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'single_bool_expression', 5, 7), (None, 'bool_operator', 1, 35), (None, 'second_expression', 3, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 236]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'single_bool_expression', 5, 7), (None, 'bool_operator', 1, 35), (None, 'first_expression', 4, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 235]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'single_bool_expression', 6, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'bitwise_and_expression', 7, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 76]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'bitwise_xor_expression', 8, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 75]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'bitwise_or_expression', 9, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 74]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'and_bool_expression', 10, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 73]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'or_bool_expression', 11, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 72]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107]
token:{
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622]
token:{
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), ('operator', '=', 0, 73)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 721]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), ('a', 'identifier', 0, 74)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), (None, 'primary_expression', 1, 40)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), (None, 'third_expression', 2, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), (None, 'second_expression', 3, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), (None, 'first_expression', 4, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), (None, 'single_bool_expression', 5, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), (None, 'bitwise_and_expression', 6, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), (None, 'bitwise_xor_expression', 7, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), (None, 'bitwise_or_expression', 8, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), (None, 'and_bool_expression', 9, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), (None, 'or_bool_expression', 10, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), (None, 'constant_expression', 11, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), ('tep', 'identifier', 0, 72), (None, 'assignment_operator', 1, 39), (None, 'expression', 12, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), (None, 'assignment_expression', 13, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), (None, 'assignment_expression', 13, 6), (None, 'assignment_expression_list_suffix', 1, 41)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), (None, 'assignment_expression_list', 14, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), (None, 'assignment_expression_list', 14, 4), ('limiter', ';', 0, 76)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433, 717]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), (None, 'expression_statement', 15, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 432]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), (None, 'statement', 16, 2)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 38), (None, 'statement', 16, 2), (None, 'M', 1, 42)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431, 716]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), ('operator', '=', 0, 79)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 721]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), ('b', 'identifier', 0, 80)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), (None, 'primary_expression', 1, 44)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), (None, 'third_expression', 2, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), (None, 'second_expression', 3, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), (None, 'first_expression', 4, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), (None, 'single_bool_expression', 5, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), (None, 'bitwise_and_expression', 6, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), (None, 'bitwise_xor_expression', 7, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), (None, 'bitwise_or_expression', 8, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), (None, 'and_bool_expression', 9, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), (None, 'or_bool_expression', 10, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), (None, 'constant_expression', 11, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), ('a', 'identifier', 0, 78), (None, 'assignment_operator', 1, 43), (None, 'expression', 12, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), (None, 'assignment_expression', 13, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), (None, 'assignment_expression', 13, 7), (None, 'assignment_expression_list_suffix', 1, 45)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), (None, 'assignment_expression_list', 14, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), (None, 'assignment_expression_list', 14, 5), ('limiter', ';', 0, 82)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433, 717]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), (None, 'expression_statement', 15, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 432]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), (None, 'statement', 16, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 17, 1), (None, 'statement', 16, 3), (None, 'M', 1, 46)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431, 716]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), ('operator', '=', 0, 85)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 721]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), ('tep', 'identifier', 0, 86)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), (None, 'primary_expression', 1, 48)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), (None, 'third_expression', 2, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), (None, 'second_expression', 3, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), (None, 'first_expression', 4, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), (None, 'single_bool_expression', 5, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), (None, 'bitwise_and_expression', 6, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), (None, 'bitwise_xor_expression', 7, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), (None, 'bitwise_or_expression', 8, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), (None, 'and_bool_expression', 9, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), (None, 'or_bool_expression', 10, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), (None, 'constant_expression', 11, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), ('b', 'identifier', 0, 84), (None, 'assignment_operator', 1, 47), (None, 'expression', 12, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), (None, 'assignment_expression', 13, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), (None, 'assignment_expression', 13, 8), (None, 'assignment_expression_list_suffix', 1, 49)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), (None, 'assignment_expression_list', 14, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), (None, 'assignment_expression_list', 14, 6), ('limiter', ';', 0, 88)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433, 717]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), (None, 'expression_statement', 15, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 432]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), (None, 'statement', 16, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 1), (None, 'statement', 16, 4), (None, 'M', 1, 50)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431, 716]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 1)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 1), ('limiter', '}', 0, 90)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 4247]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), (None, 'compound_statement', 20, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2856]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), ('keyword', 'if', 0, 63), ('limiter', '(', 0, 64), (None, 'constant_expression', 12, 7), ('limiter', ')', 0, 68), (None, 'M', 1, 37), (None, 'statement', 21, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), (None, 'selection_statement', 22, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 445]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), (None, 'statement', 23, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 1, 33), (None, 'statement', 23, 0), (None, 'M', 1, 51)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431, 716]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748]
token:(
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), ('b', 'identifier', 0, 94)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 83]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'primary_expression', 1, 52)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 82]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'third_expression', 2, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 80]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'second_expression', 3, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 79]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'first_expression', 4, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 78]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'single_bool_expression', 5, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'single_bool_expression', 5, 11), ('operator', '>', 0, 95)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 57]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'single_bool_expression', 5, 11), (None, 'bool_operator', 1, 53)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'single_bool_expression', 5, 11), (None, 'bool_operator', 1, 53), ('c', 'identifier', 0, 96)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 240]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'single_bool_expression', 5, 11), (None, 'bool_operator', 1, 53), (None, 'primary_expression', 1, 54)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 239]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'single_bool_expression', 5, 11), (None, 'bool_operator', 1, 53), (None, 'third_expression', 2, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 237]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'single_bool_expression', 5, 11), (None, 'bool_operator', 1, 53), (None, 'second_expression', 3, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 236]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'single_bool_expression', 5, 11), (None, 'bool_operator', 1, 53), (None, 'first_expression', 4, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 235]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'single_bool_expression', 6, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'bitwise_and_expression', 7, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 76]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'bitwise_xor_expression', 8, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 75]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'bitwise_or_expression', 9, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 74]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'and_bool_expression', 10, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 73]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'or_bool_expression', 11, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 72]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107]
token:{
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622]
token:{
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), ('operator', '=', 0, 102)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 721]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), ('b', 'identifier', 0, 103)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), (None, 'primary_expression', 1, 58)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), (None, 'third_expression', 2, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), (None, 'second_expression', 3, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), (None, 'first_expression', 4, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), (None, 'single_bool_expression', 5, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), (None, 'bitwise_and_expression', 6, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), (None, 'bitwise_xor_expression', 7, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), (None, 'bitwise_or_expression', 8, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), (None, 'and_bool_expression', 9, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), (None, 'or_bool_expression', 10, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), (None, 'constant_expression', 11, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), ('tep', 'identifier', 0, 101), (None, 'assignment_operator', 1, 57), (None, 'expression', 12, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), (None, 'assignment_expression', 13, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), (None, 'assignment_expression', 13, 9), (None, 'assignment_expression_list_suffix', 1, 59)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), (None, 'assignment_expression_list', 14, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), (None, 'assignment_expression_list', 14, 7), ('limiter', ';', 0, 105)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433, 717]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), (None, 'expression_statement', 15, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 432]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), (None, 'statement', 16, 5)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 1, 56), (None, 'statement', 16, 5), (None, 'M', 1, 60)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431, 716]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), ('operator', '=', 0, 108)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 721]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), ('c', 'identifier', 0, 109)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), (None, 'primary_expression', 1, 62)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), (None, 'third_expression', 2, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), (None, 'second_expression', 3, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), (None, 'first_expression', 4, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), (None, 'single_bool_expression', 5, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), (None, 'bitwise_and_expression', 6, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), (None, 'bitwise_xor_expression', 7, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), (None, 'bitwise_or_expression', 8, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), (None, 'and_bool_expression', 9, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), (None, 'or_bool_expression', 10, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), (None, 'constant_expression', 11, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), ('b', 'identifier', 0, 107), (None, 'assignment_operator', 1, 61), (None, 'expression', 12, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), (None, 'assignment_expression', 13, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), (None, 'assignment_expression', 13, 10), (None, 'assignment_expression_list_suffix', 1, 63)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), (None, 'assignment_expression_list', 14, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), (None, 'assignment_expression_list', 14, 8), ('limiter', ';', 0, 111)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433, 717]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), (None, 'expression_statement', 15, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 432]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), (None, 'statement', 16, 6)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 17, 2), (None, 'statement', 16, 6), (None, 'M', 1, 64)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431, 716]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), ('operator', '=', 0, 114)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 721]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), ('tep', 'identifier', 0, 115)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), (None, 'primary_expression', 1, 66)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), (None, 'third_expression', 2, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), (None, 'second_expression', 3, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), (None, 'first_expression', 4, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), (None, 'single_bool_expression', 5, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), (None, 'bitwise_and_expression', 6, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), (None, 'bitwise_xor_expression', 7, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), (None, 'bitwise_or_expression', 8, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), (None, 'and_bool_expression', 9, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), (None, 'or_bool_expression', 10, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), (None, 'constant_expression', 11, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), ('c', 'identifier', 0, 113), (None, 'assignment_operator', 1, 65), (None, 'expression', 12, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), (None, 'assignment_expression', 13, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), (None, 'assignment_expression', 13, 11), (None, 'assignment_expression_list_suffix', 1, 67)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), (None, 'assignment_expression_list', 14, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), (None, 'assignment_expression_list', 14, 9), ('limiter', ';', 0, 117)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433, 717]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), (None, 'expression_statement', 15, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 432]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), (None, 'statement', 16, 7)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 18, 2), (None, 'statement', 16, 7), (None, 'M', 1, 68)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431, 716]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 19, 2)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), ('limiter', '{', 0, 99), (None, 'statement_list', 19, 2), ('limiter', '}', 0, 119)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 4247]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), (None, 'compound_statement', 20, 1)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2856]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), ('keyword', 'if', 0, 92), ('limiter', '(', 0, 93), (None, 'constant_expression', 12, 11), ('limiter', ')', 0, 97), (None, 'M', 1, 55), (None, 'statement', 21, 1)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), (None, 'selection_statement', 22, 1)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 445]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), (None, 'statement', 23, 1)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 24, 0), (None, 'statement', 23, 1), (None, 'M', 1, 69)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431, 716]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748]
token:(
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), ('c', 'identifier', 0, 123)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 83]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'primary_expression', 1, 70)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 82]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'third_expression', 2, 19)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 80]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'second_expression', 3, 19)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 79]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'first_expression', 4, 19)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 78]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'single_bool_expression', 5, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'single_bool_expression', 5, 15), ('operator', '>', 0, 124)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 57]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'single_bool_expression', 5, 15), (None, 'bool_operator', 1, 71)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'single_bool_expression', 5, 15), (None, 'bool_operator', 1, 71), ('d', 'identifier', 0, 125)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 240]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'single_bool_expression', 5, 15), (None, 'bool_operator', 1, 71), (None, 'primary_expression', 1, 72)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 239]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'single_bool_expression', 5, 15), (None, 'bool_operator', 1, 71), (None, 'third_expression', 2, 20)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 237]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'single_bool_expression', 5, 15), (None, 'bool_operator', 1, 71), (None, 'second_expression', 3, 20)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 236]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'single_bool_expression', 5, 15), (None, 'bool_operator', 1, 71), (None, 'first_expression', 4, 20)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 235]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'single_bool_expression', 6, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'bitwise_and_expression', 7, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 76]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'bitwise_xor_expression', 8, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 75]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'bitwise_or_expression', 9, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 74]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'and_bool_expression', 10, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 73]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'or_bool_expression', 11, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 72]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107]
token:{
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622]
token:{
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), ('operator', '=', 0, 131)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 721]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), ('c', 'identifier', 0, 132)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), (None, 'primary_expression', 1, 76)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), (None, 'third_expression', 2, 21)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), (None, 'second_expression', 3, 21)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), (None, 'first_expression', 4, 21)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), (None, 'single_bool_expression', 5, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), (None, 'bitwise_and_expression', 6, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), (None, 'bitwise_xor_expression', 7, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), (None, 'bitwise_or_expression', 8, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), (None, 'and_bool_expression', 9, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), (None, 'or_bool_expression', 10, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), (None, 'constant_expression', 11, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), ('tep', 'identifier', 0, 130), (None, 'assignment_operator', 1, 75), (None, 'expression', 12, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), (None, 'assignment_expression', 13, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), (None, 'assignment_expression', 13, 12), (None, 'assignment_expression_list_suffix', 1, 77)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), (None, 'assignment_expression_list', 14, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), (None, 'assignment_expression_list', 14, 10), ('limiter', ';', 0, 134)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433, 717]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), (None, 'expression_statement', 15, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 432]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), (None, 'statement', 16, 8)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 1, 74), (None, 'statement', 16, 8), (None, 'M', 1, 78)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431, 716]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), ('operator', '=', 0, 137)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 721]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), ('d', 'identifier', 0, 138)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), (None, 'primary_expression', 1, 80)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), (None, 'third_expression', 2, 22)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), (None, 'second_expression', 3, 22)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), (None, 'first_expression', 4, 22)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), (None, 'single_bool_expression', 5, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), (None, 'bitwise_and_expression', 6, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), (None, 'bitwise_xor_expression', 7, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), (None, 'bitwise_or_expression', 8, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), (None, 'and_bool_expression', 9, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), (None, 'or_bool_expression', 10, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), (None, 'constant_expression', 11, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), ('c', 'identifier', 0, 136), (None, 'assignment_operator', 1, 79), (None, 'expression', 12, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), (None, 'assignment_expression', 13, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), (None, 'assignment_expression', 13, 13), (None, 'assignment_expression_list_suffix', 1, 81)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), (None, 'assignment_expression_list', 14, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), (None, 'assignment_expression_list', 14, 11), ('limiter', ';', 0, 140)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433, 717]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), (None, 'expression_statement', 15, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 432]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), (None, 'statement', 16, 9)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 17, 3), (None, 'statement', 16, 9), (None, 'M', 1, 82)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431, 716]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), ('operator', '=', 0, 143)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 721]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), ('tep', 'identifier', 0, 144)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), (None, 'primary_expression', 1, 84)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), (None, 'third_expression', 2, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), (None, 'second_expression', 3, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), (None, 'first_expression', 4, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), (None, 'single_bool_expression', 5, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), (None, 'bitwise_and_expression', 6, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), (None, 'bitwise_xor_expression', 7, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), (None, 'bitwise_or_expression', 8, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), (None, 'and_bool_expression', 9, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), (None, 'or_bool_expression', 10, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), (None, 'constant_expression', 11, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), ('d', 'identifier', 0, 142), (None, 'assignment_operator', 1, 83), (None, 'expression', 12, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), (None, 'assignment_expression', 13, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), (None, 'assignment_expression', 13, 14), (None, 'assignment_expression_list_suffix', 1, 85)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), (None, 'assignment_expression_list', 14, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), (None, 'assignment_expression_list', 14, 12), ('limiter', ';', 0, 146)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433, 717]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), (None, 'expression_statement', 15, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 432]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), (None, 'statement', 16, 10)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 18, 3), (None, 'statement', 16, 10), (None, 'M', 1, 86)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431, 716]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 19, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), ('limiter', '{', 0, 128), (None, 'statement_list', 19, 3), ('limiter', '}', 0, 148)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 4247]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), (None, 'compound_statement', 20, 2)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2856]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), ('keyword', 'if', 0, 121), ('limiter', '(', 0, 122), (None, 'constant_expression', 12, 15), ('limiter', ')', 0, 126), (None, 'M', 1, 73), (None, 'statement', 21, 2)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), (None, 'selection_statement', 22, 2)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 445]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), (None, 'statement', 23, 2)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 25, 0), (None, 'statement', 23, 2), (None, 'M', 1, 87)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431, 716]
token:if
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748]
token:(
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), ('d', 'identifier', 0, 152)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 83]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'primary_expression', 1, 88)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 82]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'third_expression', 2, 24)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 80]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'second_expression', 3, 24)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 79]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'first_expression', 4, 24)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 78]
token:>
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'single_bool_expression', 5, 19)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'single_bool_expression', 5, 19), ('operator', '>', 0, 153)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 57]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'single_bool_expression', 5, 19), (None, 'bool_operator', 1, 89)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'single_bool_expression', 5, 19), (None, 'bool_operator', 1, 89), ('e', 'identifier', 0, 154)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 240]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'single_bool_expression', 5, 19), (None, 'bool_operator', 1, 89), (None, 'primary_expression', 1, 90)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 239]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'single_bool_expression', 5, 19), (None, 'bool_operator', 1, 89), (None, 'third_expression', 2, 25)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 237]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'single_bool_expression', 5, 19), (None, 'bool_operator', 1, 89), (None, 'second_expression', 3, 25)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 236]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'single_bool_expression', 5, 19), (None, 'bool_operator', 1, 89), (None, 'first_expression', 4, 25)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 235]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'single_bool_expression', 6, 19)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'bitwise_and_expression', 7, 19)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 76]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'bitwise_xor_expression', 8, 19)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 75]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'bitwise_or_expression', 9, 19)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 74]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'and_bool_expression', 10, 19)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 73]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'or_bool_expression', 11, 19)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 72]
token:)
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107]
token:{
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622]
token:{
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), ('operator', '=', 0, 160)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 721]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), ('d', 'identifier', 0, 161)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), (None, 'primary_expression', 1, 94)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), (None, 'third_expression', 2, 26)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), (None, 'second_expression', 3, 26)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), (None, 'first_expression', 4, 26)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), (None, 'single_bool_expression', 5, 20)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), (None, 'bitwise_and_expression', 6, 20)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), (None, 'bitwise_xor_expression', 7, 20)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), (None, 'bitwise_or_expression', 8, 20)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), (None, 'and_bool_expression', 9, 20)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), (None, 'or_bool_expression', 10, 20)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), (None, 'constant_expression', 11, 20)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), ('tep', 'identifier', 0, 159), (None, 'assignment_operator', 1, 93), (None, 'expression', 12, 20)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), (None, 'assignment_expression', 13, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), (None, 'assignment_expression', 13, 15), (None, 'assignment_expression_list_suffix', 1, 95)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), (None, 'assignment_expression_list', 14, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), (None, 'assignment_expression_list', 14, 13), ('limiter', ';', 0, 163)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433, 717]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), (None, 'expression_statement', 15, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 432]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), (None, 'statement', 16, 11)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 1, 92), (None, 'statement', 16, 11), (None, 'M', 1, 96)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431, 716]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), ('operator', '=', 0, 166)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 721]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), ('e', 'identifier', 0, 167)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), (None, 'primary_expression', 1, 98)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), (None, 'third_expression', 2, 27)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), (None, 'second_expression', 3, 27)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), (None, 'first_expression', 4, 27)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), (None, 'single_bool_expression', 5, 21)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), (None, 'bitwise_and_expression', 6, 21)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), (None, 'bitwise_xor_expression', 7, 21)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), (None, 'bitwise_or_expression', 8, 21)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), (None, 'and_bool_expression', 9, 21)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), (None, 'or_bool_expression', 10, 21)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), (None, 'constant_expression', 11, 21)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), ('d', 'identifier', 0, 165), (None, 'assignment_operator', 1, 97), (None, 'expression', 12, 21)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), (None, 'assignment_expression', 13, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), (None, 'assignment_expression', 13, 16), (None, 'assignment_expression_list_suffix', 1, 99)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), (None, 'assignment_expression_list', 14, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), (None, 'assignment_expression_list', 14, 14), ('limiter', ';', 0, 169)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433, 717]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), (None, 'expression_statement', 15, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 432]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), (None, 'statement', 16, 12)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 17, 4), (None, 'statement', 16, 12), (None, 'M', 1, 100)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431, 716]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), ('operator', '=', 0, 172)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 721]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), ('tep', 'identifier', 0, 173)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), (None, 'primary_expression', 1, 102)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), (None, 'third_expression', 2, 28)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), (None, 'second_expression', 3, 28)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), (None, 'first_expression', 4, 28)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), (None, 'single_bool_expression', 5, 22)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), (None, 'bitwise_and_expression', 6, 22)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), (None, 'bitwise_xor_expression', 7, 22)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), (None, 'bitwise_or_expression', 8, 22)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), (None, 'and_bool_expression', 9, 22)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), (None, 'or_bool_expression', 10, 22)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), (None, 'constant_expression', 11, 22)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), ('e', 'identifier', 0, 171), (None, 'assignment_operator', 1, 101), (None, 'expression', 12, 22)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), (None, 'assignment_expression', 13, 17)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), (None, 'assignment_expression', 13, 17), (None, 'assignment_expression_list_suffix', 1, 103)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), (None, 'assignment_expression_list', 14, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), (None, 'assignment_expression_list', 14, 15), ('limiter', ';', 0, 175)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 433, 717]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), (None, 'expression_statement', 15, 15)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 432]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), (None, 'statement', 16, 13)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 18, 4), (None, 'statement', 16, 13), (None, 'M', 1, 104)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 431, 716]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 19, 4)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), ('limiter', '{', 0, 157), (None, 'statement_list', 19, 4), ('limiter', '}', 0, 177)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2857, 3564, 4247]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), (None, 'compound_statement', 20, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2856]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), ('keyword', 'if', 0, 150), ('limiter', '(', 0, 151), (None, 'constant_expression', 12, 19), ('limiter', ')', 0, 155), (None, 'M', 1, 91), (None, 'statement', 21, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), (None, 'selection_statement', 22, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 445]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), (None, 'statement', 23, 3)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 26, 0), (None, 'statement', 23, 3), (None, 'M', 1, 105)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431, 716]
token:identifier
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748]
token:-=
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435]
token:number
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), ('operator', '-=', 0, 180)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 723]
token:number
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), ('1', 'number', 0, 181)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 38]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), (None, 'primary_expression', 1, 107)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), (None, 'third_expression', 2, 29)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), (None, 'second_expression', 3, 29)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), (None, 'first_expression', 4, 29)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), (None, 'single_bool_expression', 5, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), (None, 'bitwise_and_expression', 6, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), (None, 'bitwise_xor_expression', 7, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), (None, 'bitwise_or_expression', 8, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), (None, 'and_bool_expression', 9, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), (None, 'or_bool_expression', 10, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), (None, 'constant_expression', 11, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), ('cnt', 'identifier', 0, 179), (None, 'assignment_operator', 1, 106), (None, 'expression', 12, 23)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), (None, 'assignment_expression', 13, 18)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 434]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), (None, 'assignment_expression', 13, 18), (None, 'assignment_expression_list_suffix', 1, 108)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 434, 718]
token:;
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), (None, 'assignment_expression_list', 14, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 433]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), (None, 'assignment_expression_list', 14, 16), ('limiter', ';', 0, 183)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 433, 717]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), (None, 'expression_statement', 15, 16)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 432]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), (None, 'statement', 16, 14)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 27, 0), (None, 'statement', 16, 14), (None, 'M', 1, 109)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431, 716]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 28, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), ('limiter', '{', 0, 61), (None, 'statement_list', 28, 0), ('limiter', '}', 0, 185)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 1105]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), (None, 'compound_statement', 29, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 440]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), ('keyword', 'while', 0, 53), ('limiter', '(', 0, 54), (None, 'M', 1, 28), (None, 'constant_expression', 12, 6), ('limiter', ')', 0, 59), (None, 'M', 1, 32), (None, 'statement', 30, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 3558]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), (None, 'iteration_statement', 31, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 438]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), (None, 'statement', 32, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 431]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 19, 0), (None, 'statement', 32, 0), (None, 'M', 1, 110)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 431, 716]
token:}
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 33, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255]
token:#
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), ('limiter', '{', 0, 24), (None, 'statement_list', 33, 0), ('limiter', '}', 0, 187)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 151, 255, 430]
token:#
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), ('keyword', 'int', 0, 19), ('keyword', 'main', 0, 20), ('limiter', '(', 0, 21), (None, 'function_parameter_list', 1, 10), ('limiter', ')', 0, 23), (None, 'compound_statement', 34, 0)]
status stack:
[0, 2, 2, 5, 13, 19, 41, 87, 150]
token:#
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), (None, 'function_definition', 35, 0)]
status stack:
[0, 2, 2, 9]
token:#
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), (None, 'external_declaration', 36, 0)]
status stack:
[0, 2, 2, 2]
token:#
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), (None, 'external_declaration', 36, 0), (None, 'start', 1, 111)]
status stack:
[0, 2, 2, 2, 10]
token:#
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'external_declaration', 15, 1), (None, 'start', 37, 0)]
status stack:
[0, 2, 2, 10]
token:#
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 16, 0), (None, 'start', 38, 0)]
status stack:
[0, 2, 10]
token:#
symbol stack:
[('#', -1, 1), (None, 'start', 39, 0)]
status stack:
[0, 1]
Syntax Analyze Successfully!
