
token:int
symbol stack:
[('#', -1, 1)]
status stack:
[0]
token:main
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0)]
status stack:
[0, 5]
token:(
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1)]
status stack:
[0, 5, 13]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2)]
status stack:
[0, 5, 13, 19]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0)]
status stack:
[0, 5, 13, 19, 41]
token:{
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4)]
status stack:
[0, 5, 13, 19, 41, 87]
token:int
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151]
token:int
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), ('keyword', 'int', 0, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 444]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443]
token:=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), ('3', 'number', 0, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 38]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'primary_expression', 1, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 36]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'third_expression', 2, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 32]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'second_expression', 3, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 31]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'first_expression', 4, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 30]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'single_bool_expression', 5, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 29]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'bitwise_and_expression', 6, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 28]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'bitwise_xor_expression', 7, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 27]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'bitwise_or_expression', 8, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 26]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'and_bool_expression', 9, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 25]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'or_bool_expression', 10, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 24]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'constant_expression', 11, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 23]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'expression', 12, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 22]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), ('a', 'identifier', 0, 8), ('operator', '=', 0, 9), (None, 'expression', 12, 0), (None, 'declaration_parameter_suffix', 1, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 12, 16, 22, 44]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15]
token:=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), ('1', 'number', 0, 15)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 38]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'primary_expression', 1, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 36]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'third_expression', 2, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 32]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'second_expression', 3, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 31]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'first_expression', 4, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 30]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'single_bool_expression', 5, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 29]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'bitwise_and_expression', 6, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 28]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'bitwise_xor_expression', 7, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 27]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'bitwise_or_expression', 8, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 26]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'and_bool_expression', 9, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 25]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'or_bool_expression', 10, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 24]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'constant_expression', 11, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 23]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'expression', 12, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 22]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), ('b', 'identifier', 0, 13), ('operator', '=', 0, 14), (None, 'expression', 12, 1), (None, 'declaration_parameter_suffix', 1, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 12, 16, 22, 44]
token:,
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15]
token:=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), ('1', 'number', 0, 20)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 38]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'primary_expression', 1, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 36]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'third_expression', 2, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 32]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'second_expression', 3, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 31]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), ('operator', '+', 0, 21)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 63]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62]
token:*
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), ('2', 'number', 0, 22)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 133]
token:*
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'primary_expression', 1, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 131]
token:*
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'third_expression', 2, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 129]
token:*
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128]
token:(
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), ('operator', '*', 0, 23)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 66]
token:(
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), ('3', 'number', 0, 25)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 84]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'primary_expression', 1, 11)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 82]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'third_expression', 2, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 80]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'second_expression', 3, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 79]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'first_expression', 4, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 78]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'first_expression', 4, 3), ('operator', '+', 0, 26)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 78, 63]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'first_expression', 4, 3), (None, 'first_operator', 1, 12)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 78, 146]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'first_expression', 4, 3), (None, 'first_operator', 1, 12), ('4', 'number', 0, 27)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 78, 146, 248]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'first_expression', 4, 3), (None, 'first_operator', 1, 12), (None, 'primary_expression', 1, 13)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 78, 146, 246]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'first_expression', 4, 3), (None, 'first_operator', 1, 12), (None, 'third_expression', 2, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 78, 146, 244]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'first_expression', 4, 3), (None, 'first_operator', 1, 12), (None, 'second_expression', 3, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 78, 146, 243]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'first_expression', 5, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 78]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'single_bool_expression', 6, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 77]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'bitwise_and_expression', 7, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 76]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'bitwise_xor_expression', 8, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 75]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'bitwise_or_expression', 9, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 74]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'and_bool_expression', 10, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 73]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'or_bool_expression', 11, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 72]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'constant_expression', 12, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 71]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'expression', 13, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 592]
token:-
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), ('limiter', '(', 0, 24), (None, 'expression', 13, 2), ('limiter', ')', 0, 28)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 376, 592, 944]
token:-
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 3, 3), (None, 'second_operator', 1, 10), (None, 'primary_expression', 14, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 373]
token:-
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 4, 2), (None, 'first_operator', 1, 8), (None, 'second_expression', 15, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128]
token:-
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 16, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 16, 0), ('operator', '-', 0, 29)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 64]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 16, 0), (None, 'first_operator', 1, 14)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62]
token:/
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 16, 0), (None, 'first_operator', 1, 14), ('6', 'number', 0, 30)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 133]
token:/
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 16, 0), (None, 'first_operator', 1, 14), (None, 'primary_expression', 1, 15)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 131]
token:/
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 16, 0), (None, 'first_operator', 1, 14), (None, 'third_expression', 2, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 129]
token:/
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 16, 0), (None, 'first_operator', 1, 14), (None, 'second_expression', 3, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 16, 0), (None, 'first_operator', 1, 14), (None, 'second_expression', 3, 6), ('operator', '/', 0, 31)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 67]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 16, 0), (None, 'first_operator', 1, 14), (None, 'second_expression', 3, 6), (None, 'second_operator', 1, 16)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 16, 0), (None, 'first_operator', 1, 14), (None, 'second_expression', 3, 6), (None, 'second_operator', 1, 16), ('3', 'number', 0, 32)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 375]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 16, 0), (None, 'first_operator', 1, 14), (None, 'second_expression', 3, 6), (None, 'second_operator', 1, 16), (None, 'primary_expression', 1, 17)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128, 199, 373]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 16, 0), (None, 'first_operator', 1, 14), (None, 'second_expression', 4, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30, 62, 128]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'first_expression', 17, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 30]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'single_bool_expression', 18, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 29]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'bitwise_and_expression', 19, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 28]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'bitwise_xor_expression', 20, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 27]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'bitwise_or_expression', 21, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 26]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'and_bool_expression', 22, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 25]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'or_bool_expression', 23, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 24]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'constant_expression', 24, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 23]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'expression', 25, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 22]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), ('c', 'identifier', 0, 18), ('operator', '=', 0, 19), (None, 'expression', 25, 0), (None, 'declaration_parameter_suffix', 1, 18)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 12, 16, 22, 44]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), (None, 'declaration_parameter', 26, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 21]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), ('limiter', ',', 0, 17), (None, 'declaration_parameter', 26, 0), (None, 'declaration_parameter_suffix', 1, 19)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 15, 21, 43]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), ('limiter', ',', 0, 12), (None, 'declaration_parameter', 13, 1), (None, 'declaration_parameter_suffix', 27, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 15, 21, 43]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), (None, 'declaration_parameter_suffix', 28, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 1106]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'type_specifier', 1, 2), (None, 'declaration_parameter', 13, 0), (None, 'declaration_parameter_suffix', 28, 0), ('limiter', ';', 0, 35)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 443, 749, 1106, 1621]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'declaration', 29, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 442]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'statement', 30, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 431]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 1, 1), (None, 'statement', 30, 0), (None, 'M', 1, 20)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 431, 716]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255]
token:%=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), ('operator', '%=', 0, 38)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 726]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), ('b', 'identifier', 0, 39)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 37]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), (None, 'primary_expression', 1, 22)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), (None, 'third_expression', 2, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), (None, 'second_expression', 3, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), (None, 'first_expression', 4, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), (None, 'single_bool_expression', 5, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), (None, 'bitwise_and_expression', 6, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), (None, 'bitwise_xor_expression', 7, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), (None, 'bitwise_or_expression', 8, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), (None, 'and_bool_expression', 9, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), (None, 'or_bool_expression', 10, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), (None, 'constant_expression', 11, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), ('a', 'identifier', 0, 37), (None, 'assignment_operator', 1, 21), (None, 'expression', 12, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), (None, 'assignment_expression', 13, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 434]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), (None, 'assignment_expression', 13, 3), (None, 'assignment_expression_list_suffix', 1, 23)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 434, 718]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), (None, 'assignment_expression_list', 14, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 433]
token:while
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), (None, 'assignment_expression_list', 14, 1), ('limiter', ';', 0, 41)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 433, 717]
token:while
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), (None, 'expression_statement', 15, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 432]
token:while
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), (None, 'statement', 16, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 431]
token:while
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 31, 0), (None, 'statement', 16, 1), (None, 'M', 1, 24)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 431, 716]
token:while
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255]
token:(
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104]
token:<=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), ('a', 'identifier', 0, 46)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 83]
token:<=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'primary_expression', 1, 26)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 82]
token:<=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'third_expression', 2, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 80]
token:<=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'second_expression', 3, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 79]
token:<=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'first_expression', 4, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 78]
token:<=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'single_bool_expression', 5, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77]
token:!
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'single_bool_expression', 5, 4), ('operator', '<=', 0, 47)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 60]
token:!
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'single_bool_expression', 5, 4), (None, 'bool_operator', 1, 27)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'single_bool_expression', 5, 4), (None, 'bool_operator', 1, 27), ('operator', '!', 0, 48)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145, 34]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'single_bool_expression', 5, 4), (None, 'bool_operator', 1, 27), (None, 'third_operator', 1, 28)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145, 238]
token:&&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'single_bool_expression', 5, 4), (None, 'bool_operator', 1, 27), (None, 'third_operator', 1, 28), ('c', 'identifier', 0, 49)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145, 238, 240]
token:&&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'single_bool_expression', 5, 4), (None, 'bool_operator', 1, 27), (None, 'third_operator', 1, 28), (None, 'primary_expression', 1, 29)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145, 238, 424]
token:&&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'single_bool_expression', 5, 4), (None, 'bool_operator', 1, 27), (None, 'third_expression', 2, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145, 237]
token:&&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'single_bool_expression', 5, 4), (None, 'bool_operator', 1, 27), (None, 'second_expression', 3, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145, 236]
token:&&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'single_bool_expression', 5, 4), (None, 'bool_operator', 1, 27), (None, 'first_expression', 4, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77, 145, 235]
token:&&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'single_bool_expression', 6, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 77]
token:&&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'bitwise_and_expression', 7, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 76]
token:&&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'bitwise_xor_expression', 8, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 75]
token:&&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'bitwise_or_expression', 9, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 74]
token:&&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), ('operator', '&&', 0, 50)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 48]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204]
token:<
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), ('b', 'identifier', 0, 52)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 401]
token:<
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'primary_expression', 1, 32)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 400]
token:<
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'third_expression', 2, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 398]
token:<
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'second_expression', 3, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 397]
token:<
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'first_expression', 4, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 396]
token:<
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395]
token:(
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), ('operator', '<', 0, 53)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 56]
token:(
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033]
token:^
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), ('a', 'identifier', 0, 55)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 83]
token:^
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'primary_expression', 1, 34)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 82]
token:^
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'third_expression', 2, 11)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 80]
token:^
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'second_expression', 3, 11)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 79]
token:^
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'first_expression', 4, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 78]
token:^
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'single_bool_expression', 5, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 77]
token:^
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_and_expression', 6, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 76]
token:^
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_xor_expression', 7, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 75]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_xor_expression', 7, 5), ('operator', '^', 0, 56)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 75, 52]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_xor_expression', 7, 5), (None, 'bitwise_xor_operator', 1, 35)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 75, 143]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_xor_expression', 7, 5), (None, 'bitwise_xor_operator', 1, 35), ('a', 'identifier', 0, 57)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 75, 143, 223]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_xor_expression', 7, 5), (None, 'bitwise_xor_operator', 1, 35), (None, 'primary_expression', 1, 36)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 75, 143, 222]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_xor_expression', 7, 5), (None, 'bitwise_xor_operator', 1, 35), (None, 'third_expression', 2, 12)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 75, 143, 220]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_xor_expression', 7, 5), (None, 'bitwise_xor_operator', 1, 35), (None, 'second_expression', 3, 12)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 75, 143, 219]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_xor_expression', 7, 5), (None, 'bitwise_xor_operator', 1, 35), (None, 'first_expression', 4, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 75, 143, 218]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_xor_expression', 7, 5), (None, 'bitwise_xor_operator', 1, 35), (None, 'single_bool_expression', 5, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 75, 143, 217]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_xor_expression', 7, 5), (None, 'bitwise_xor_operator', 1, 35), (None, 'bitwise_and_expression', 6, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 75, 143, 216]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_xor_expression', 8, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 75]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'bitwise_or_expression', 9, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 74]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'and_bool_expression', 10, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 73]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'or_bool_expression', 11, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 72]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'constant_expression', 12, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 71]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'expression', 13, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 1432]
token:||
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), ('limiter', '(', 0, 54), (None, 'expression', 13, 4), ('limiter', ')', 0, 58)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1033, 1432, 2072]
token:||
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), (None, 'primary_expression', 14, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1030]
token:||
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), (None, 'third_expression', 15, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1028]
token:||
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), (None, 'second_expression', 16, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1027]
token:||
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 5, 5), (None, 'bool_operator', 1, 33), (None, 'first_expression', 17, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395, 605, 1026]
token:||
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'single_bool_expression', 18, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 395]
token:||
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'bitwise_and_expression', 19, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 394]
token:||
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'bitwise_xor_expression', 20, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 393]
token:||
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 10, 4), (None, 'and_operator', 1, 30), (None, 'M', 1, 31), (None, 'bitwise_or_expression', 21, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73, 141, 204, 392]
token:||
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'and_bool_expression', 22, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 73]
token:||
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), ('operator', '||', 0, 59)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 46]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), ('a', 'identifier', 0, 61)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 389]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'primary_expression', 1, 39)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 388]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'third_expression', 2, 13)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 386]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'second_expression', 3, 13)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 385]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'first_expression', 4, 11)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 384]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383]
token:(
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), ('operator', '>', 0, 62)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 57]
token:(
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983]
token:&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), ('b', 'identifier', 0, 64)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 83]
token:&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'primary_expression', 1, 41)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 82]
token:&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'third_expression', 2, 14)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 80]
token:&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'second_expression', 3, 14)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 79]
token:&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'first_expression', 4, 12)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 78]
token:&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'single_bool_expression', 5, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 77]
token:&
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'bitwise_and_expression', 6, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 76]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'bitwise_and_expression', 6, 7), ('operator', '&', 0, 65)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 76, 54]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'bitwise_and_expression', 6, 7), (None, 'bitwise_and_operator', 1, 42)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 76, 144]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'bitwise_and_expression', 6, 7), (None, 'bitwise_and_operator', 1, 42), ('c', 'identifier', 0, 66)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 76, 144, 232]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'bitwise_and_expression', 6, 7), (None, 'bitwise_and_operator', 1, 42), (None, 'primary_expression', 1, 43)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 76, 144, 231]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'bitwise_and_expression', 6, 7), (None, 'bitwise_and_operator', 1, 42), (None, 'third_expression', 2, 15)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 76, 144, 229]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'bitwise_and_expression', 6, 7), (None, 'bitwise_and_operator', 1, 42), (None, 'second_expression', 3, 15)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 76, 144, 228]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'bitwise_and_expression', 6, 7), (None, 'bitwise_and_operator', 1, 42), (None, 'first_expression', 4, 13)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 76, 144, 227]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'bitwise_and_expression', 6, 7), (None, 'bitwise_and_operator', 1, 42), (None, 'single_bool_expression', 5, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 76, 144, 226]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'bitwise_and_expression', 7, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 76]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'bitwise_xor_expression', 8, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 75]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'bitwise_or_expression', 9, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 74]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'and_bool_expression', 10, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 73]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'or_bool_expression', 11, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 72]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'constant_expression', 12, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 71]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'expression', 13, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 1406]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), ('limiter', '(', 0, 63), (None, 'expression', 13, 5), ('limiter', ')', 0, 67)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 983, 1406, 1966]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), (None, 'primary_expression', 14, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 980]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), (None, 'third_expression', 15, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 978]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), (None, 'second_expression', 16, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 977]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 5, 8), (None, 'bool_operator', 1, 40), (None, 'first_expression', 17, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383, 597, 976]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'single_bool_expression', 18, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 383]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'bitwise_and_expression', 19, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 382]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'bitwise_xor_expression', 20, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 381]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'bitwise_or_expression', 21, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 380]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 23, 1), (None, 'or_operator', 1, 37), (None, 'M', 1, 38), (None, 'and_bool_expression', 22, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72, 140, 203, 379]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'or_bool_expression', 24, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 72]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620]
token:{
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175]
token:{
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748]
token:-=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), ('operator', '-=', 0, 73)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 723]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), ('a', 'identifier', 0, 74)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 37]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'primary_expression', 1, 47)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 36]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'third_expression', 2, 16)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 32]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'second_expression', 3, 16)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 31]
token:+
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 4, 14)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 4, 14), ('operator', '+', 0, 75)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30, 63]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 4, 14), (None, 'first_operator', 1, 48)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30, 62]
token:*
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 4, 14), (None, 'first_operator', 1, 48), ('b', 'identifier', 0, 76)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30, 62, 132]
token:*
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 4, 14), (None, 'first_operator', 1, 48), (None, 'primary_expression', 1, 49)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30, 62, 131]
token:*
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 4, 14), (None, 'first_operator', 1, 48), (None, 'third_expression', 2, 17)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30, 62, 129]
token:*
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 4, 14), (None, 'first_operator', 1, 48), (None, 'second_expression', 3, 17)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30, 62, 128]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 4, 14), (None, 'first_operator', 1, 48), (None, 'second_expression', 3, 17), ('operator', '*', 0, 77)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30, 62, 128, 66]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 4, 14), (None, 'first_operator', 1, 48), (None, 'second_expression', 3, 17), (None, 'second_operator', 1, 50)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30, 62, 128, 199]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 4, 14), (None, 'first_operator', 1, 48), (None, 'second_expression', 3, 17), (None, 'second_operator', 1, 50), ('c', 'identifier', 0, 78)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30, 62, 128, 199, 374]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 4, 14), (None, 'first_operator', 1, 48), (None, 'second_expression', 3, 17), (None, 'second_operator', 1, 50), (None, 'primary_expression', 1, 51)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30, 62, 128, 199, 373]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 4, 14), (None, 'first_operator', 1, 48), (None, 'second_expression', 4, 15)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30, 62, 128]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'first_expression', 5, 11)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'single_bool_expression', 6, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'bitwise_and_expression', 7, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'bitwise_xor_expression', 8, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'bitwise_or_expression', 9, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'and_bool_expression', 10, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'or_bool_expression', 11, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'constant_expression', 12, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), ('c', 'identifier', 0, 72), (None, 'assignment_operator', 1, 46), (None, 'expression', 13, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), (None, 'assignment_expression', 14, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 434]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), (None, 'assignment_expression', 14, 4), (None, 'assignment_expression_list_suffix', 1, 52)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 434, 718]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), (None, 'assignment_expression_list', 15, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 433]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), (None, 'assignment_expression_list', 15, 4), ('limiter', ';', 0, 80)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 433, 717]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), (None, 'expression_statement', 16, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 432]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), (None, 'statement', 17, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 1, 45), (None, 'statement', 17, 3), (None, 'M', 1, 53)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431, 716]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748]
token:=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), ('operator', '=', 0, 83)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 721]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), ('1', 'number', 0, 84)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 38]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), (None, 'primary_expression', 1, 55)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), (None, 'third_expression', 2, 18)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), (None, 'second_expression', 3, 18)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), (None, 'first_expression', 4, 16)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), (None, 'single_bool_expression', 5, 12)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), (None, 'bitwise_and_expression', 6, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), (None, 'bitwise_xor_expression', 7, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), (None, 'bitwise_or_expression', 8, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), (None, 'and_bool_expression', 9, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), (None, 'or_bool_expression', 10, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), (None, 'constant_expression', 11, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), ('a', 'identifier', 0, 82), (None, 'assignment_operator', 1, 54), (None, 'expression', 12, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), (None, 'assignment_expression', 13, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 434]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), (None, 'assignment_expression', 13, 7), (None, 'assignment_expression_list_suffix', 1, 56)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 434, 718]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), (None, 'assignment_expression_list', 14, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 433]
token:if
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), (None, 'assignment_expression_list', 14, 5), ('limiter', ';', 0, 86)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 433, 717]
token:if
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), (None, 'expression_statement', 15, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 432]
token:if
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), (None, 'statement', 16, 5)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431]
token:if
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 18, 3), (None, 'statement', 16, 5), (None, 'M', 1, 57)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431, 716]
token:if
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748]
token:(
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), ('a', 'identifier', 0, 90)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 83]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'primary_expression', 1, 58)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 82]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'third_expression', 2, 19)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 80]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'second_expression', 3, 19)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 79]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'first_expression', 4, 17)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 78]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'single_bool_expression', 5, 13)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77]
token:~
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'single_bool_expression', 5, 13), ('operator', '>', 0, 91)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 57]
token:~
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'single_bool_expression', 5, 13), (None, 'bool_operator', 1, 59)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'single_bool_expression', 5, 13), (None, 'bool_operator', 1, 59), ('operator', '~', 0, 92)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 35]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'single_bool_expression', 5, 13), (None, 'bool_operator', 1, 59), (None, 'third_operator', 1, 60)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 238]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'single_bool_expression', 5, 13), (None, 'bool_operator', 1, 59), (None, 'third_operator', 1, 60), ('c', 'identifier', 0, 93)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 238, 240]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'single_bool_expression', 5, 13), (None, 'bool_operator', 1, 59), (None, 'third_operator', 1, 60), (None, 'primary_expression', 1, 61)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 238, 424]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'single_bool_expression', 5, 13), (None, 'bool_operator', 1, 59), (None, 'third_expression', 2, 20)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 237]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'single_bool_expression', 5, 13), (None, 'bool_operator', 1, 59), (None, 'second_expression', 3, 20)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 236]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'single_bool_expression', 5, 13), (None, 'bool_operator', 1, 59), (None, 'first_expression', 4, 18)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77, 145, 235]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'single_bool_expression', 6, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 77]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'bitwise_and_expression', 7, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 76]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'bitwise_xor_expression', 8, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 75]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'bitwise_or_expression', 9, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 74]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'and_bool_expression', 10, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 73]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'or_bool_expression', 11, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 72]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107]
token:if
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622]
token:if
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176]
token:(
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), ('a', 'identifier', 0, 98)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 83]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'primary_expression', 1, 63)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 82]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'third_expression', 2, 21)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 80]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'second_expression', 3, 21)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 79]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'first_expression', 4, 19)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 78]
token:>
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'single_bool_expression', 5, 14)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 77]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'single_bool_expression', 5, 14), ('operator', '>', 0, 99)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 77, 57]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'single_bool_expression', 5, 14), (None, 'bool_operator', 1, 64)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 77, 145]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'single_bool_expression', 5, 14), (None, 'bool_operator', 1, 64), ('c', 'identifier', 0, 100)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 77, 145, 240]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'single_bool_expression', 5, 14), (None, 'bool_operator', 1, 64), (None, 'primary_expression', 1, 65)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 77, 145, 239]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'single_bool_expression', 5, 14), (None, 'bool_operator', 1, 64), (None, 'third_expression', 2, 22)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 77, 145, 237]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'single_bool_expression', 5, 14), (None, 'bool_operator', 1, 64), (None, 'second_expression', 3, 22)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 77, 145, 236]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'single_bool_expression', 5, 14), (None, 'bool_operator', 1, 64), (None, 'first_expression', 4, 20)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 77, 145, 235]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'single_bool_expression', 6, 11)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 77]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'bitwise_and_expression', 7, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 76]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'bitwise_xor_expression', 8, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 75]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'bitwise_or_expression', 9, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 74]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'and_bool_expression', 10, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 73]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'or_bool_expression', 11, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 72]
token:)
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516]
token:=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), ('operator', '=', 0, 104)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 721]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), ('1', 'number', 0, 105)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 38]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), (None, 'primary_expression', 1, 68)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), (None, 'third_expression', 2, 23)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), (None, 'second_expression', 3, 23)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), (None, 'first_expression', 4, 21)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), (None, 'single_bool_expression', 5, 15)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), (None, 'bitwise_and_expression', 6, 12)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), (None, 'bitwise_xor_expression', 7, 11)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), (None, 'bitwise_or_expression', 8, 11)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), (None, 'and_bool_expression', 9, 11)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), (None, 'or_bool_expression', 10, 11)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), (None, 'constant_expression', 11, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), ('b', 'identifier', 0, 103), (None, 'assignment_operator', 1, 67), (None, 'expression', 12, 10)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), (None, 'assignment_expression', 13, 8)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 434]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), (None, 'assignment_expression', 13, 8), (None, 'assignment_expression_list_suffix', 1, 69)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 434, 718]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), (None, 'assignment_expression_list', 14, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 2851]
token:else
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), (None, 'assignment_expression_list', 14, 6), ('limiter', ';', 0, 107)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 2851, 3560]
token:else
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), (None, 'expression_statement', 15, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 2850]
token:else
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), ('keyword', 'if', 0, 96), ('limiter', '(', 0, 97), (None, 'constant_expression', 12, 9), ('limiter', ')', 0, 101), (None, 'M', 1, 66), (None, 'statement', 16, 6)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2861, 3566, 4249, 4955, 5516, 6073]
token:else
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'selection_statement', 17, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2860]
token:else
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849]
token:else
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244]
token:identifier
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952]
token:=
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), ('operator', '=', 0, 112)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 721]
token:number
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), ('1', 'number', 0, 113)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 38]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), (None, 'primary_expression', 1, 73)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 36]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), (None, 'third_expression', 2, 24)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 32]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), (None, 'second_expression', 3, 24)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 31]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), (None, 'first_expression', 4, 22)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 30]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), (None, 'single_bool_expression', 5, 16)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 29]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), (None, 'bitwise_and_expression', 6, 13)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 28]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), (None, 'bitwise_xor_expression', 7, 12)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 27]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), (None, 'bitwise_or_expression', 8, 12)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 26]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), (None, 'and_bool_expression', 9, 12)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 25]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), (None, 'or_bool_expression', 10, 12)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 24]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), (None, 'constant_expression', 11, 11)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 23]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), ('c', 'identifier', 0, 111), (None, 'assignment_operator', 1, 72), (None, 'expression', 12, 11)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 435, 720, 1092]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), (None, 'assignment_expression', 13, 9)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 434]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), (None, 'assignment_expression', 13, 9), (None, 'assignment_expression_list_suffix', 1, 74)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 434, 718]
token:;
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), (None, 'assignment_expression_list', 14, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 433]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), (None, 'assignment_expression_list', 14, 7), ('limiter', ';', 0, 115)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 433, 717]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), (None, 'expression_statement', 15, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 432]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), ('keyword', 'if', 0, 88), ('limiter', '(', 0, 89), (None, 'constant_expression', 12, 8), ('limiter', ')', 0, 94), (None, 'M', 1, 62), (None, 'statement', 18, 4), (None, 'N', 1, 70), ('keyword', 'else', 0, 109), (None, 'M', 1, 71), (None, 'statement', 16, 7)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 446, 750, 1107, 1622, 2176, 2849, 3559, 4244, 4952, 5514]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), (None, 'selection_statement', 19, 4)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 445]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), (None, 'statement', 20, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 19, 3), (None, 'statement', 20, 3), (None, 'M', 1, 75)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 431, 716]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 21, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), ('limiter', '{', 0, 70), (None, 'statement_list', 21, 3), ('limiter', '}', 0, 117)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 441, 748, 1105]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), (None, 'compound_statement', 22, 3)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 440]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), ('keyword', 'while', 0, 43), ('limiter', '(', 0, 44), (None, 'M', 1, 25), (None, 'constant_expression', 25, 1), ('limiter', ')', 0, 68), (None, 'M', 1, 44), (None, 'statement', 23, 2)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 439, 747, 1104, 1620, 2175, 2848, 3558]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), (None, 'iteration_statement', 26, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 438]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), (None, 'statement', 27, 1)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 431]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 32, 0), (None, 'statement', 27, 1), (None, 'M', 1, 76)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 431, 716]
token:}
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 33, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255]
token:#
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), ('limiter', '{', 0, 5), (None, 'statement_list', 33, 0), ('limiter', '}', 0, 119)]
status stack:
[0, 5, 13, 19, 41, 87, 151, 255, 430]
token:#
symbol stack:
[('#', -1, 1), ('keyword', 'int', 0, 0), ('keyword', 'main', 0, 1), ('limiter', '(', 0, 2), (None, 'function_parameter_list', 1, 0), ('limiter', ')', 0, 4), (None, 'compound_statement', 34, 0)]
status stack:
[0, 5, 13, 19, 41, 87, 150]
token:#
symbol stack:
[('#', -1, 1), (None, 'function_definition', 35, 0)]
status stack:
[0, 9]
token:#
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 36, 0)]
status stack:
[0, 2]
token:#
symbol stack:
[('#', -1, 1), (None, 'external_declaration', 36, 0), (None, 'start', 1, 77)]
status stack:
[0, 2, 10]
token:#
symbol stack:
[('#', -1, 1), (None, 'start', 37, 0)]
status stack:
[0, 1]
Syntax Analyze Successfully!
