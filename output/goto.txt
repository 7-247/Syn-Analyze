Gotoï¼š
Goto(I0,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I0,type_specifier) = Closure( [4288, 4289, 4298, 4317, 4316, 4318, 760, 761, 770, 788, 789, 790] ) = {4288, 4289, 770, 903, 4298, 788, 789, 790, 919, 760, 761, 4316, 4317, 4318} ={ function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierdeclaration_parameter_assign,, function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char } = I2
Goto(I0,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I0,function_definition) = Closure( [328, 329, 338, 356, 357, 358] ) = {338, 356, 357, 358, 328, 329} ={ external_declaration->function_definition,void external_declaration->function_definition,float external_declaration->function_definition,double external_declaration->function_definition,char external_declaration->function_definition,# external_declaration->function_definition,int } = I4
Goto(I0,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I0,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I0,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I0,declaration) = Closure( [256, 257, 266, 284, 285, 286] ) = {256, 257, 266, 284, 285, 286} ={ external_declaration->declaration,# external_declaration->declaration,int external_declaration->declaration,void external_declaration->declaration,float external_declaration->declaration,double external_declaration->declaration,char } = I8
Goto(I0,external_declaration) = Closure( [112] ) = {515, 659, 4252, 4253, 292, 293, 4262, 302, 184, 4281, 4280, 443, 4282, 320, 321, 322, 587, 76, 724, 725, 220, 221, 734, 230, 112, 752, 753, 371, 754, 248, 249, 250} ={ type_specifier->double,identifier type_specifier->void,identifier function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int external_declaration->function_definition,# external_declaration->function_definition,int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void external_declaration->function_definition,void start->,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float type_specifier->int,identifier function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char external_declaration->function_definition,float external_declaration->function_definition,double external_declaration->function_definition,char type_specifier->float,identifier start->external_declarationstart,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int external_declaration->declaration,# external_declaration->declaration,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void external_declaration->declaration,void start->external_declarationstart,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double type_specifier->char,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char external_declaration->declaration,float external_declaration->declaration,double external_declaration->declaration,char } = I9
Goto(I0,start) = Closure( [40] ) = {40} ={ sstart->start,# } = I10


Goto(I2,identifier) = Closure( [4324, 4325, 939, 4334, 955, 4352, 4353, 4354] ) = {4352, 4353, 4354, 1027, 4324, 4325, 939, 4334, 1135, 1011, 955, 1119} ={ function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char declaration_parameter_assign->=expression,; function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int declaration_parameter->identifierdeclaration_parameter_assign,, function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void declaration_parameter_assign->,; declaration_parameter_assign->=expression,, declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter_assign->,, } = I11
Goto(I2,declaration_parameter) = Closure( [806, 824, 825, 826, 796, 797] ) = {1315, 806, 1171, 824, 825, 826, 796, 797} ={ declaration_parameter_suffix->,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int } = I12







Goto(I9,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I9,type_specifier) = Closure( [4288, 4289, 4298, 4317, 4316, 4318, 760, 761, 770, 788, 789, 790] ) = {4288, 4289, 770, 903, 4298, 788, 789, 790, 919, 760, 761, 4316, 4317, 4318} ={ function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration_parameter->identifierdeclaration_parameter_assign,, function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char } = I2
Goto(I9,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I9,function_definition) = Closure( [328, 329, 338, 356, 357, 358] ) = {338, 356, 357, 358, 328, 329} ={ external_declaration->function_definition,void external_declaration->function_definition,float external_declaration->function_definition,double external_declaration->function_definition,char external_declaration->function_definition,# external_declaration->function_definition,int } = I4
Goto(I9,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I9,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I9,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I9,declaration) = Closure( [256, 257, 266, 284, 285, 286] ) = {256, 257, 266, 284, 285, 286} ={ external_declaration->declaration,# external_declaration->declaration,int external_declaration->declaration,void external_declaration->declaration,float external_declaration->declaration,double external_declaration->declaration,char } = I8
Goto(I9,external_declaration) = Closure( [112] ) = {515, 659, 4252, 4253, 292, 293, 4262, 302, 184, 4281, 4280, 443, 4282, 320, 321, 322, 587, 76, 724, 725, 220, 221, 734, 230, 112, 752, 753, 371, 754, 248, 249, 250} ={ type_specifier->double,identifier type_specifier->void,identifier function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int external_declaration->function_definition,# external_declaration->function_definition,int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void external_declaration->function_definition,void start->,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float type_specifier->int,identifier function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char external_declaration->function_definition,float external_declaration->function_definition,double external_declaration->function_definition,char type_specifier->float,identifier start->external_declarationstart,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int external_declaration->declaration,# external_declaration->declaration,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void external_declaration->declaration,void start->external_declarationstart,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double type_specifier->char,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char external_declaration->declaration,float external_declaration->declaration,double external_declaration->declaration,char } = I9
Goto(I9,start) = Closure( [148] ) = {148} ={ start->external_declarationstart,# } = I13


Goto(I11,declaration_parameter_assign) = Closure( [975, 991] ) = {991, 975} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, } = I14
Goto(I11,() = Closure( [4388, 4389, 4390, 4360, 4361, 4370] ) = {4675, 515, 4999, 4360, 4361, 587, 4370, 659, 4639, 4388, 4389, 4390, 4971, 4531, 371, 4982, 443} ={ function_parameter_list->void,) type_specifier->double,identifier function_parameter->type_specifieridentifier,) function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int type_specifier->float,identifier function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void type_specifier->void,identifier function_parameter_list->,) function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char function_parameter->type_specifieridentifier,, function_parameter_list->function_parameterfunction_parameter_list_suffix,) type_specifier->char,identifier function_parameter->type_specifieridentifier,void type_specifier->int,identifier } = I15
Goto(I11,=) = Closure( [1063, 1047] ) = {3331, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1047, 1434, 3747, 1063, 3243, 3763, 1334, 1335, 3259, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1479, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 3171, 3187, 3315, 1406, 1407} ={ constant_expression->primary_expressionarithmetic_expression,; primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ declaration_parameter_assign->=expression,, primary_expression->number,>= function_expression->identifier(expression_list),, declaration_parameter_assign->=expression,; expression->function_expression,, function_expression->identifier(expression_list),; primary_expression->identifier,!= primary_expression->identifier,, expression->function_expression,; primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= expression->constant_expression,, expression->constant_expression,; constant_expression->primary_expressionarithmetic_expression,, primary_expression->number,!= primary_expression->number,, } = I16

Goto(I12,,) = Closure( [1207] ) = {903, 919, 1207} ={ declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; } = I17
Goto(I12,declaration_parameter_suffix) = Closure( [842, 860, 861, 862, 832, 833] ) = {832, 833, 842, 860, 861, 862} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char } = I18



Goto(I15,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I15,function_parameter) = Closure( [4567] ) = {4891, 4747, 4927, 4567} ={ function_parameter_list_suffix->,) function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) function_parameter_list_suffix->void,) function_parameter_list->function_parameterfunction_parameter_list_suffix,) } = I19
Goto(I15,type_specifier) = Closure( [5035, 5007, 5018] ) = {5018, 5035, 5007} ={ function_parameter->type_specifieridentifier,void function_parameter->type_specifieridentifier,) function_parameter->type_specifieridentifier,, } = I20
Goto(I15,void) = Closure( [4711, 695] ) = {695, 4711} ={ type_specifier->void,identifier function_parameter_list->void,) } = I21
Goto(I15,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I15,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I15,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I15,function_parameter_list) = Closure( [4396, 4397, 4406, 4424, 4425, 4426] ) = {4406, 4424, 4425, 4426, 4396, 4397} ={ function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int } = I22

Goto(I16,function_expression) = Closure( [3279, 3295] ) = {3295, 3279} ={ expression->function_expression,; expression->function_expression,, } = I23
Goto(I16,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470, 1442, 1443] ) = {1442, 1443, 1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470} ={ primary_expression->number,!= primary_expression->number,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= } = I24
Goto(I16,() = Closure( [1514, 1515, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533, 1538, 1542] ) = {1538, 1542, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1515, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< } = I25
Goto(I16,identifier) = Closure( [3783, 3799, 1370, 1371, 1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398] ) = {1377, 1380, 1381, 3783, 1384, 1386, 1387, 1388, 1389, 1394, 1398, 3799, 1370, 1371} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> function_expression->identifier(expression_list),, primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= function_expression->identifier(expression_list),; primary_expression->identifier,!= primary_expression->identifier,, } = I26
Goto(I16,expression) = Closure( [1083, 1099] ) = {1099, 1083} ={ declaration_parameter_assign->=expression,; declaration_parameter_assign->=expression,, } = I27
Goto(I16,constant_expression) = Closure( [3207, 3223] ) = {3223, 3207} ={ expression->constant_expression,; expression->constant_expression,, } = I28
Goto(I16,primary_expression) = Closure( [3367, 3351] ) = {1799, 2059, 3727, 2063, 1943, 3351, 2203, 2207, 1699, 3367, 1703, 2087, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 2135, 1627, 1631, 2015, 3423, 2275, 2279, 1771, 3583, 3439, 1775, 2159, 3567, 3711, 1655, 1915, 2303} ={ operator->*,number relop->!=,( arithmetic_expression->,; relop->!=,identifier relop-><,number constant_expression->primary_expressionarithmetic_expression,, relop-><=,( relop-><=,identifier operator->-,( constant_expression->primary_expressionarithmetic_expression,; operator->-,identifier relop->!=,number operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( relop->==,identifier operator->+,( operator->+,identifier relop->>,number arithmetic_expression->operatorprimary_expressionarithmetic_expression,, relop->>=,( relop->>=,identifier operator->*,( arithmetic_expression->relopprimary_expressionarithmetic_expression,; arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->*,identifier relop->==,number arithmetic_expression->relopprimary_expressionarithmetic_expression,, arithmetic_expression->,, operator->+,number relop-><,( relop->>=,number } = I29

Goto(I17,identifier) = Closure( [939, 955] ) = {1011, 1027, 955, 939, 1135, 1119} ={ declaration_parameter_assign->=expression,, declaration_parameter_assign->=expression,; declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter_assign->,; declaration_parameter_assign->,, } = I30
Goto(I17,declaration_parameter) = Closure( [1243] ) = {1315, 1243, 1171} ={ declaration_parameter_suffix->,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; } = I31

Goto(I18,;) = Closure( [868, 869, 878, 896, 897, 898] ) = {896, 897, 898, 868, 869, 878} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,# declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void } = I32

Goto(I19,void) = Closure( [4963] ) = {4963} ={ function_parameter_list_suffix->void,) } = I33
Goto(I19,function_parameter_list_suffix) = Closure( [4603] ) = {4603} ={ function_parameter_list->function_parameterfunction_parameter_list_suffix,) } = I34
Goto(I19,,) = Closure( [4783] ) = {515, 4999, 587, 4971, 4783, 659, 371, 4982, 443} ={ type_specifier->double,identifier function_parameter->type_specifieridentifier,) type_specifier->float,identifier function_parameter->type_specifieridentifier,, function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) type_specifier->void,identifier type_specifier->char,identifier function_parameter->type_specifieridentifier,void type_specifier->int,identifier } = I35

Goto(I20,identifier) = Closure( [5054, 5071, 5043] ) = {5043, 5054, 5071} ={ function_parameter->type_specifieridentifier,, function_parameter->type_specifieridentifier,void function_parameter->type_specifieridentifier,) } = I36


Goto(I22,)) = Closure( [4442, 4460, 4461, 4462, 4432, 4433] ) = {5090, 4460, 4461, 4462, 4432, 4433, 5108, 5109, 5110, 5080, 5081, 4442} ={ compound_statement->{statement_list},void function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char compound_statement->{statement_list},# compound_statement->{statement_list},int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void } = I37



Goto(I25,function_expression) = Closure( [3307] ) = {3307} ={ expression->function_expression,) } = I38
Goto(I25,number) = Closure( [1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I39
Goto(I25,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I40
Goto(I25,identifier) = Closure( [1370, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 3811] ) = {1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= } = I41
Goto(I25,expression) = Closure( [1574, 1578, 1550, 1551, 1557, 1560, 1561, 1564, 1566, 1567, 1568, 1569] ) = {1568, 1569, 1574, 1578, 1550, 1551, 1557, 1560, 1561, 1564, 1566, 1567} ={ primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; } = I42
Goto(I25,constant_expression) = Closure( [3235] ) = {3235} ={ expression->constant_expression,) } = I43
Goto(I25,primary_expression) = Closure( [3379] ) = {1799, 3595, 2059, 2063, 1943, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 2275, 2279, 1771, 2159, 1775, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier operator->+,number relop-><,( relop->>=,number } = I44

Goto(I26,() = Closure( [3819, 3835] ) = {3343, 4135, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 3171, 1406, 1407, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 4243, 1430, 1434, 1435, 3747, 3243, 3775, 1478, 3271, 1479, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 3819, 3315, 3835} ={ constant_expression->primary_expressionarithmetic_expression,) expression_list->expressionexpression_list_suffix,) primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) expression->constant_expression,, primary_expression->number,!= primary_expression->number,, expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< expression_list->,) primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),, expression->function_expression,, function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) function_expression->identifier(expression_list),, constant_expression->primary_expressionarithmetic_expression,, function_expression->identifier(expression_list),; } = I45



Goto(I29,>) = Closure( [2023, 2027, 2051] ) = {2051, 2027, 2023} ={ relop->>,number relop->>,identifier relop->>,( } = I46
Goto(I29,/) = Closure( [1879, 1883, 1907] ) = {1907, 1883, 1879} ={ operator->/,number operator->/,identifier operator->/,( } = I47
Goto(I29,-) = Closure( [1735, 1739, 1763] ) = {1739, 1763, 1735} ={ operator->-,identifier operator->-,number operator->-,( } = I48
Goto(I29,<) = Closure( [1979, 1955, 1951] ) = {1979, 1955, 1951} ={ relop-><,number relop-><,identifier relop-><,( } = I49
Goto(I29,+) = Closure( [1663, 1667, 1691] ) = {1667, 1691, 1663} ={ operator->+,identifier operator->+,number operator->+,( } = I50
Goto(I29,>=) = Closure( [2311, 2315, 2339] ) = {2339, 2315, 2311} ={ relop->>=,number relop->>=,identifier relop->>=,( } = I51
Goto(I29,!=) = Closure( [2095, 2099, 2123] ) = {2123, 2099, 2095} ={ relop->!=,number relop->!=,identifier relop->!=,( } = I52
Goto(I29,*) = Closure( [1835, 1807, 1811] ) = {1811, 1835, 1807} ={ operator->*,identifier operator->*,number operator->*,( } = I53
Goto(I29,<=) = Closure( [2239, 2243, 2267] ) = {2243, 2267, 2239} ={ relop-><=,identifier relop-><=,number relop-><=,( } = I54
Goto(I29,==) = Closure( [2167, 2171, 2195] ) = {2171, 2195, 2167} ={ relop->==,identifier relop->==,number relop->==,( } = I55
Goto(I29,arithmetic_expression) = Closure( [3387, 3403] ) = {3403, 3387} ={ constant_expression->primary_expressionarithmetic_expression,; constant_expression->primary_expressionarithmetic_expression,, } = I56
Goto(I29,relop) = Closure( [3619, 3603] ) = {1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 3603, 1430, 1434, 3619, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1479, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 1406, 1407} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< arithmetic_expression->relopprimary_expressionarithmetic_expression,, primary_expression->number,+ primary_expression->number,>= arithmetic_expression->relopprimary_expressionarithmetic_expression,; primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->number,!= primary_expression->number,, } = I57
Goto(I29,operator) = Closure( [3459, 3475] ) = {3459, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 3475, 1430, 1434, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1479, 1351, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 1406, 1407} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< arithmetic_expression->operatorprimary_expressionarithmetic_expression,; primary_expression->number,+ primary_expression->number,>= primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),, primary_expression->identifier,; primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->number,!= primary_expression->number,, } = I58

Goto(I30,declaration_parameter_assign) = Closure( [991, 975] ) = {975, 991} ={ declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; } = I14
Goto(I30,=) = Closure( [1047, 1063] ) = {3331, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1047, 1434, 3747, 1063, 3243, 3763, 1334, 1335, 3259, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1479, 1351, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 3171, 3315, 3187, 1406, 1407} ={ constant_expression->primary_expressionarithmetic_expression,; primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ declaration_parameter_assign->=expression,, primary_expression->number,>= function_expression->identifier(expression_list),, declaration_parameter_assign->=expression,; expression->function_expression,, function_expression->identifier(expression_list),; primary_expression->identifier,!= primary_expression->identifier,, expression->function_expression,; primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),, primary_expression->identifier,; primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= expression->constant_expression,, constant_expression->primary_expressionarithmetic_expression,, expression->constant_expression,; primary_expression->number,!= primary_expression->number,, } = I16

Goto(I31,,) = Closure( [1207] ) = {903, 919, 1207} ={ declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; } = I17
Goto(I31,declaration_parameter_suffix) = Closure( [1279] ) = {1279} ={ declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; } = I59




Goto(I35,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I35,function_parameter) = Closure( [4819] ) = {4891, 4819, 4747, 4927} ={ function_parameter_list_suffix->,) function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) function_parameter_list_suffix->void,) } = I60
Goto(I35,type_specifier) = Closure( [5035, 5007, 5018] ) = {5018, 5035, 5007} ={ function_parameter->type_specifieridentifier,void function_parameter->type_specifieridentifier,) function_parameter->type_specifieridentifier,, } = I20
Goto(I35,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I35,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I35,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I35,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7


Goto(I37,{) = Closure( [5126, 5144, 5145, 5146, 5116, 5117] ) = {6144, 6148, 6149, 5126, 6152, 6153, 6154, 5144, 5145, 5146, 3151, 6264, 6265, 5244, 6269, 6270, 6275, 6278, 6281, 6283, 6286, 6288, 6292, 6293, 6296, 6297, 6298, 6372, 6373, 5352, 6377, 6378, 6383, 6386, 5364, 5365, 6389, 6391, 5369, 5370, 6394, 6396, 5375, 6400, 6401, 5378, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5396, 5397, 5398, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 5508, 5509, 5513, 5514, 5519, 5522, 5525, 5527, 5530, 5532, 5536, 5537, 5540, 5541, 5542, 443, 5580, 5581, 5585, 5586, 5591, 5594, 5597, 5599, 5602, 5604, 5608, 5609, 5612, 5613, 5614, 515, 6660, 6661, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 5752, 5753, 5756, 5757, 5758, 2703, 659, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 720, 721, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6882, 742, 6887, 744, 6890, 748, 749, 6893, 6895, 752, 753, 754, 6898, 6900, 6904, 6905, 6908, 6909, 6910, 5904, 5905, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 6012, 6013, 6017, 6018, 6023, 6026, 6029, 6031, 6034, 6036, 6040, 6041, 6044, 6045, 6046, 5076, 5077, 5081, 5082, 5087, 5090, 3043, 5093, 5095, 6120, 6121, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 6137, 6139, 5116, 5117, 6142} ={ jump_statement->returnexpression;,} jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue compound_statement->{statement_list},void jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char assignment_expression_list->,; jump_statement->return;,return jump_statement->return;,for statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char type_specifier->int,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char type_specifier->double,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue statement->declaration,float statement->declaration,double statement->declaration,char assignment_expression->identifierassignment_operatorexpression,, type_specifier->void,identifier assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char compound_statement->{statement_list},return compound_statement->{statement_list},for compound_statement->{statement_list},int compound_statement->{statement_list},if compound_statement->{statement_list},identifier compound_statement->{statement_list},void assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; jump_statement->returnexpression;,return jump_statement->returnexpression;,for compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void jump_statement->returnexpression;,while jump_statement->returnexpression;,; compound_statement->{statement_list},# compound_statement->{statement_list},int jump_statement->returnexpression;,break } = I61
Goto(I37,compound_statement) = Closure( [4496, 4497, 4498, 4468, 4469, 4478] ) = {4496, 4497, 4498, 4468, 4469, 4478} ={ function_definition->type_specifieridentifier(function_parameter_list)compound_statement,float function_definition->type_specifieridentifier(function_parameter_list)compound_statement,double function_definition->type_specifieridentifier(function_parameter_list)compound_statement,char function_definition->type_specifieridentifier(function_parameter_list)compound_statement,# function_definition->type_specifieridentifier(function_parameter_list)compound_statement,int function_definition->type_specifieridentifier(function_parameter_list)compound_statement,void } = I62



Goto(I40,function_expression) = Closure( [3307] ) = {3307} ={ expression->function_expression,) } = I38
Goto(I40,number) = Closure( [1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I39
Goto(I40,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I40
Goto(I40,identifier) = Closure( [1370, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 3811] ) = {1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= } = I41
Goto(I40,expression) = Closure( [1574, 1578, 1579, 1550, 1557, 1560, 1561, 1564, 1566, 1568, 1569] ) = {1568, 1569, 1574, 1578, 1579, 1550, 1557, 1560, 1561, 1564, 1566} ={ primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- } = I63
Goto(I40,constant_expression) = Closure( [3235] ) = {3235} ={ expression->constant_expression,) } = I43
Goto(I40,primary_expression) = Closure( [3379] ) = {1799, 3595, 2059, 2063, 1943, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 2275, 2279, 1771, 2159, 1775, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier operator->+,number relop-><,( relop->>=,number } = I44

Goto(I41,() = Closure( [3847] ) = {1413, 3847, 1416, 1417, 1420, 1422, 3343, 1424, 1425, 4243, 1430, 1434, 1435, 3747, 4135, 1407, 3243, 1334, 1335, 1341, 3775, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 3271, 1479, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 3171, 1507, 3315, 1406, 3199} ={ primary_expression->number,* function_expression->identifier(expression_list),) primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- constant_expression->primary_expressionarithmetic_expression,) primary_expression->number,== primary_expression->number,< expression_list->,) primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),, expression_list->expressionexpression_list_suffix,) primary_expression->number,, expression->function_expression,, primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< expression->function_expression,) primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= expression->constant_expression,, primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,, primary_expression->number,!= expression->constant_expression,) } = I64

Goto(I42,)) = Closure( [1604, 1605, 1610, 1614, 1586, 1587, 1593, 1596, 1597, 1600, 1602, 1603] ) = {1600, 1602, 1603, 1604, 1605, 1610, 1614, 1586, 1587, 1593, 1596, 1597} ={ primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> } = I65


Goto(I44,>) = Closure( [2023, 2027, 2051] ) = {2051, 2027, 2023} ={ relop->>,number relop->>,identifier relop->>,( } = I46
Goto(I44,/) = Closure( [1879, 1883, 1907] ) = {1907, 1883, 1879} ={ operator->/,number operator->/,identifier operator->/,( } = I47
Goto(I44,-) = Closure( [1735, 1739, 1763] ) = {1739, 1763, 1735} ={ operator->-,identifier operator->-,number operator->-,( } = I48
Goto(I44,<) = Closure( [1979, 1955, 1951] ) = {1979, 1955, 1951} ={ relop-><,number relop-><,identifier relop-><,( } = I49
Goto(I44,+) = Closure( [1663, 1667, 1691] ) = {1667, 1691, 1663} ={ operator->+,identifier operator->+,number operator->+,( } = I50
Goto(I44,>=) = Closure( [2311, 2315, 2339] ) = {2339, 2315, 2311} ={ relop->>=,number relop->>=,identifier relop->>=,( } = I51
Goto(I44,!=) = Closure( [2095, 2099, 2123] ) = {2123, 2099, 2095} ={ relop->!=,number relop->!=,identifier relop->!=,( } = I52
Goto(I44,*) = Closure( [1835, 1807, 1811] ) = {1811, 1835, 1807} ={ operator->*,identifier operator->*,number operator->*,( } = I53
Goto(I44,<=) = Closure( [2239, 2243, 2267] ) = {2243, 2267, 2239} ={ relop-><=,identifier relop-><=,number relop-><=,( } = I54
Goto(I44,==) = Closure( [2167, 2171, 2195] ) = {2171, 2195, 2167} ={ relop->==,identifier relop->==,number relop->==,( } = I55
Goto(I44,arithmetic_expression) = Closure( [3415] ) = {3415} ={ constant_expression->primary_expressionarithmetic_expression,) } = I66
Goto(I44,relop) = Closure( [3631] ) = {1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3631, 1334, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) arithmetic_expression->relopprimary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= } = I67
Goto(I44,operator) = Closure( [3487] ) = {1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3487, 1334, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) arithmetic_expression->operatorprimary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= } = I68

Goto(I45,function_expression) = Closure( [3279, 3307] ) = {3307, 3279} ={ expression->function_expression,) expression->function_expression,, } = I69
Goto(I45,number) = Closure( [1442, 1443, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471] ) = {1442, 1443, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I70
Goto(I45,() = Closure( [1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I71
Goto(I45,expression_list) = Closure( [3855, 3871] ) = {3871, 3855} ={ function_expression->identifier(expression_list),; function_expression->identifier(expression_list),, } = I72
Goto(I45,identifier) = Closure( [1370, 1371, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 3783, 3811] ) = {1377, 3811, 1380, 1381, 3783, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370, 1371} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> function_expression->identifier(expression_list),, primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= primary_expression->identifier,, } = I73
Goto(I45,expression) = Closure( [4171] ) = {4099, 3955, 4171} ={ expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) expression_list->expressionexpression_list_suffix,) } = I74
Goto(I45,constant_expression) = Closure( [3207, 3235] ) = {3235, 3207} ={ expression->constant_expression,) expression->constant_expression,, } = I75
Goto(I45,primary_expression) = Closure( [3379, 3351] ) = {1799, 3595, 2059, 2063, 1943, 3351, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 3423, 2275, 2279, 1771, 2159, 1775, 3567, 3711, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number constant_expression->primary_expressionarithmetic_expression,, relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier arithmetic_expression->relopprimary_expressionarithmetic_expression,, arithmetic_expression->,, operator->+,number relop-><,( relop->>=,number } = I76












Goto(I57,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470, 1442, 1443] ) = {1442, 1443, 1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470} ={ primary_expression->number,!= primary_expression->number,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= } = I24
Goto(I57,() = Closure( [1514, 1515, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533, 1538, 1542] ) = {1538, 1542, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1515, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< } = I25
Goto(I57,identifier) = Closure( [1370, 1371, 1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398] ) = {1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398, 1370, 1371} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,, } = I77
Goto(I57,primary_expression) = Closure( [3639, 3655] ) = {1799, 2059, 2063, 3727, 1943, 2203, 2207, 1699, 1703, 2087, 1843, 3639, 1847, 1919, 2231, 1727, 1987, 1991, 3655, 1871, 2131, 2135, 1627, 3423, 1631, 2015, 2275, 2279, 1771, 3583, 1775, 3567, 2159, 3711, 3439, 1655, 1915, 2303} ={ operator->*,number relop->!=,( relop->!=,identifier arithmetic_expression->,; relop-><,number relop-><=,( relop-><=,identifier operator->-,( operator->-,identifier relop->!=,number operator->/,( arithmetic_expression->relopprimary_expressionarithmetic_expression,, operator->/,identifier relop-><,identifier relop-><=,number operator->-,number relop->>,( relop->>,identifier arithmetic_expression->relopprimary_expressionarithmetic_expression,; operator->/,number relop->==,( relop->==,identifier operator->+,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,, operator->+,identifier relop->>,number relop->>=,( relop->>=,identifier operator->*,( arithmetic_expression->relopprimary_expressionarithmetic_expression,; operator->*,identifier arithmetic_expression->relopprimary_expressionarithmetic_expression,, relop->==,number arithmetic_expression->,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->+,number relop-><,( relop->>=,number } = I78

Goto(I58,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470, 1442, 1443] ) = {1442, 1443, 1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470} ={ primary_expression->number,!= primary_expression->number,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= } = I24
Goto(I58,() = Closure( [1514, 1515, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533, 1538, 1542] ) = {1538, 1542, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1515, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< } = I25
Goto(I58,identifier) = Closure( [1370, 1371, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1387, 1394, 1398] ) = {1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398, 1370, 1371} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,!= primary_expression->identifier,, } = I77
Goto(I58,primary_expression) = Closure( [3495, 3511] ) = {1799, 2059, 2063, 3727, 1943, 2203, 2207, 1699, 3495, 1703, 2087, 1843, 1919, 2231, 1847, 3511, 1727, 1987, 1991, 1871, 2131, 2135, 1627, 3423, 1631, 2015, 2275, 2279, 1771, 3583, 1775, 3567, 2159, 3711, 3439, 1655, 1915, 2303} ={ operator->*,number relop->!=,( relop->!=,identifier arithmetic_expression->,; relop-><,number relop-><=,( relop-><=,identifier operator->-,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,, operator->-,identifier relop->!=,number operator->/,( relop-><,identifier relop-><=,number operator->/,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( relop->==,identifier operator->+,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,, operator->+,identifier relop->>,number relop->>=,( relop->>=,identifier operator->*,( arithmetic_expression->relopprimary_expressionarithmetic_expression,; operator->*,identifier arithmetic_expression->relopprimary_expressionarithmetic_expression,, relop->==,number arithmetic_expression->,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->+,number relop-><,( relop->>=,number } = I79


Goto(I60,void) = Closure( [4963] ) = {4963} ={ function_parameter_list_suffix->void,) } = I33
Goto(I60,function_parameter_list_suffix) = Closure( [4855] ) = {4855} ={ function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) } = I80
Goto(I60,,) = Closure( [4783] ) = {515, 4999, 587, 4971, 4783, 659, 371, 4982, 443} ={ type_specifier->double,identifier function_parameter->type_specifieridentifier,) type_specifier->float,identifier function_parameter->type_specifieridentifier,, function_parameter_list_suffix->,function_parameterfunction_parameter_list_suffix,) type_specifier->void,identifier type_specifier->char,identifier function_parameter->type_specifieridentifier,void type_specifier->int,identifier } = I35

Goto(I61,selection_statement) = Closure( [5544, 5545, 5549, 5550, 5555, 5558, 5561, 5563, 5566, 5568, 5572, 5573, 5576, 5577, 5578] ) = {5568, 5572, 5573, 5544, 5545, 5576, 5577, 5578, 5549, 5550, 5555, 5558, 5561, 5563, 5566} ={ statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,return statement->selection_statement,for statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break } = I81
Goto(I61,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I61,type_specifier) = Closure( [756, 757, 761, 762, 767, 770, 773, 775, 778, 780, 784, 785, 788, 789, 790] ) = {770, 773, 903, 775, 778, 780, 784, 785, 788, 789, 790, 919, 756, 757, 761, 762, 767} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I82
Goto(I61,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I61,expression_statement) = Closure( [5400, 5401, 5405, 5406, 5411, 5414, 5417, 5419, 5422, 5424, 5428, 5429, 5432, 5433, 5434] ) = {5432, 5411, 5414, 5433, 5417, 5419, 5422, 5424, 5428, 5429, 5400, 5401, 5434, 5405, 5406} ={ statement->expression_statement,float statement->expression_statement,identifier statement->expression_statement,void statement->expression_statement,double statement->expression_statement,while statement->expression_statement,; statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,return statement->expression_statement,for statement->expression_statement,char statement->expression_statement,int statement->expression_statement,if } = I83
Goto(I61,while) = Closure( [6696, 6697, 6701, 6702, 6707, 6710, 6713, 6715, 6718, 6720, 6724, 6725, 6728, 6729, 6730] ) = {6720, 6724, 6725, 6696, 6697, 6728, 6729, 6730, 6701, 6702, 6707, 6710, 6713, 6715, 6718} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,break } = I84
Goto(I61,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I61,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I61,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I61,{) = Closure( [5112, 5113, 5117, 5118, 5123, 5126, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146] ) = {6144, 5123, 6148, 6149, 5126, 6152, 6153, 6154, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146, 3151, 6264, 6265, 5244, 6269, 6270, 5113, 6275, 6278, 6281, 6283, 6286, 6288, 6292, 6293, 5118, 6296, 6297, 6298, 6372, 6373, 5352, 6377, 6378, 6383, 6386, 5364, 5365, 6389, 6391, 5369, 5370, 6394, 6396, 5375, 6400, 6401, 5378, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5396, 5397, 5398, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 5508, 5509, 5513, 5514, 5519, 5522, 5525, 5527, 5530, 5532, 5536, 5537, 5540, 5541, 5542, 443, 5580, 5581, 5585, 5586, 5591, 5594, 5597, 5599, 5602, 5604, 5608, 5609, 5612, 5613, 5614, 515, 6660, 6661, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 5752, 5753, 5756, 5757, 5758, 2703, 659, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 720, 721, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6882, 742, 6887, 744, 6890, 748, 749, 6893, 6895, 752, 753, 754, 6898, 6900, 6904, 6905, 6908, 6909, 6910, 5904, 5905, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 6012, 6013, 6017, 6018, 6023, 6026, 6029, 6031, 6034, 6036, 6040, 6041, 6044, 6045, 6046, 5076, 5077, 5081, 5082, 5087, 5090, 3043, 5093, 5095, 6120, 6121, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 5112, 6137, 6139, 5117, 6142} ={ jump_statement->returnexpression;,} compound_statement->{statement_list},identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue compound_statement->{statement_list},void jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char compound_statement->{statement_list},while compound_statement->{statement_list},; compound_statement->{statement_list},break compound_statement->{statement_list},} compound_statement->{statement_list},{ compound_statement->{statement_list},continue compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char assignment_expression_list->,; jump_statement->return;,return jump_statement->return;,for statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if compound_statement->{statement_list},for jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue compound_statement->{statement_list},if jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char type_specifier->int,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char type_specifier->double,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue statement->declaration,float statement->declaration,double statement->declaration,char assignment_expression->identifierassignment_operatorexpression,, type_specifier->void,identifier assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char compound_statement->{statement_list},return compound_statement->{statement_list},for compound_statement->{statement_list},int compound_statement->{statement_list},if compound_statement->{statement_list},identifier compound_statement->{statement_list},void assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; jump_statement->returnexpression;,return jump_statement->returnexpression;,for compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void compound_statement->{statement_list},return jump_statement->returnexpression;,while jump_statement->returnexpression;,; compound_statement->{statement_list},int jump_statement->returnexpression;,break } = I85
Goto(I61,return) = Closure( [6180, 6184, 6185, 6188, 6189, 6190, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 6324, 6328, 6329, 6332, 6333, 6334, 6156, 6157, 6161, 6162, 6167, 6170, 6173, 6175, 6178] ) = {3331, 6156, 6157, 6161, 6162, 6167, 6170, 6173, 6175, 6178, 6180, 6184, 6185, 6188, 6189, 6190, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1358, 1362, 3187, 1406, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 3763, 6324, 6328, 6329, 3259, 6332, 6333, 6334, 1478, 1485, 1488, 1489, 1492, 1494, 1495, 1496, 1497, 1502, 1506} ={ constant_expression->primary_expressionarithmetic_expression,; jump_statement->returnexpression;,return jump_statement->returnexpression;,for jump_statement->returnexpression;,int jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,void jump_statement->returnexpression;,while jump_statement->returnexpression;,; jump_statement->returnexpression;,break jump_statement->returnexpression;,} jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= expression->constant_expression,; primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= jump_statement->return;,return jump_statement->return;,for jump_statement->return;,int jump_statement->return;,if jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break function_expression->identifier(expression_list),; jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue expression->function_expression,; jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= } = I86
Goto(I61,jump_statement) = Closure( [5472, 5473, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501, 5504, 5505, 5506] ) = {5472, 5473, 5504, 5505, 5506, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501} ={ statement->jump_statement,return statement->jump_statement,for statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue } = I87
Goto(I61,for) = Closure( [6912, 6913, 6917, 6918, 6923, 6926, 6929, 6931, 6934, 6936, 6940, 6941, 6944, 6945, 6946] ) = {6912, 6913, 6944, 6945, 6946, 6917, 6918, 6923, 6926, 6929, 6931, 6934, 6936, 6940, 6941} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue } = I88
Goto(I61,declaration) = Closure( [5760, 5761, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789, 5792, 5793, 5794] ) = {5760, 5761, 5792, 5793, 5794, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789} ={ statement->declaration,return statement->declaration,for statement->declaration,float statement->declaration,double statement->declaration,char statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue } = I89
Goto(I61,statement) = Closure( [5280] ) = {6144, 515, 6148, 6149, 6660, 6661, 6152, 6153, 6154, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 3151, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 6264, 6265, 5752, 5753, 5244, 6269, 6270, 5756, 5757, 5758, 6275, 6278, 6281, 6283, 6286, 2703, 6288, 659, 6292, 6293, 6296, 6297, 6298, 6137, 2719, 5280, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 753, 720, 721, 754, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6372, 6373, 6882, 742, 5352, 6377, 6378, 6887, 744, 6890, 748, 6383, 749, 6893, 6386, 6895, 5364, 5365, 6389, 6391, 752, 5369, 5370, 6394, 6396, 6900, 6904, 5375, 6400, 6401, 5378, 6908, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5904, 5905, 5396, 5397, 5398, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 6012, 6013, 6017, 6018, 5508, 5509, 6023, 5513, 5514, 6026, 6029, 5519, 6031, 5522, 6898, 6034, 5525, 6036, 5527, 6040, 6041, 5530, 5532, 6044, 6045, 6046, 5536, 5537, 5540, 5541, 5542, 6905, 443, 6909, 5580, 5581, 6910, 5585, 5586, 5076, 5077, 5591, 5081, 5594, 5082, 5597, 5599, 5087, 5602, 5090, 5604, 3043, 5093, 5095, 5608, 5609, 6120, 6121, 5612, 5613, 5614, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 6139, 6142} ={ jump_statement->returnexpression;,} type_specifier->double,identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier assignment_expression_list->,; statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} jump_statement->return;,return jump_statement->return;,for statement->declaration,{ statement->declaration,continue statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if statement->declaration,float statement->declaration,double statement->declaration,char jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} type_specifier->void,identifier jump_statement->return;,{ jump_statement->return;,continue jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char jump_statement->returnexpression;,while assignment_expression->identifierassignment_operatorexpression,; statement_list->statementstatement_list,} expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ selection_statement->if(expression)statementelsestatement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while selection_statement->if(expression)statementelsestatement,void iteration_statement->for(declarationexpression;assignment_expression)statement,; statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,float selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue jump_statement->continue;,return jump_statement->continue;,for statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if statement->selection_statement,return statement->selection_statement,for jump_statement->break;,identifier statement->selection_statement,int statement->selection_statement,if jump_statement->break;,void jump_statement->break;,while statement->selection_statement,identifier jump_statement->break;,; statement->selection_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,break statement->selection_statement,while jump_statement->break;,} statement->selection_statement,; jump_statement->break;,{ jump_statement->break;,continue statement->selection_statement,break statement->selection_statement,} jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,continue type_specifier->int,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,double statement->iteration_statement,return statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->iteration_statement,int statement->iteration_statement,if compound_statement->{statement_list},return compound_statement->{statement_list},for statement->iteration_statement,identifier compound_statement->{statement_list},int statement->iteration_statement,void compound_statement->{statement_list},if statement->iteration_statement,while statement->iteration_statement,; compound_statement->{statement_list},identifier statement->iteration_statement,break compound_statement->{statement_list},void statement->iteration_statement,} assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; statement->iteration_statement,{ statement->iteration_statement,continue jump_statement->returnexpression;,return jump_statement->returnexpression;,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void jump_statement->returnexpression;,; jump_statement->returnexpression;,break } = I90
Goto(I61,if) = Closure( [6408, 6409, 6413, 6414, 6419, 6422, 6425, 6427, 6430, 6432, 6436, 6437, 6440, 6441, 6442] ) = {6432, 6436, 6437, 6408, 6409, 6440, 6441, 6442, 6413, 6414, 6419, 6422, 6425, 6427, 6430} ={ selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,break } = I91
Goto(I61,identifier) = Closure( [2739, 2755] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2739, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I61,assignment_expression_list) = Closure( [5832, 5833, 5837, 5838, 5843, 5846, 5849, 5851, 5854, 5856, 5860, 5861, 5864, 5865, 5866] ) = {5856, 5860, 5861, 5832, 5833, 5864, 5865, 5866, 5837, 5838, 5843, 5846, 5849, 5851, 5854} ={ expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break } = I93
Goto(I61,iteration_statement) = Closure( [5616, 5617, 5621, 5622, 5627, 5630, 5633, 5635, 5638, 5640, 5644, 5645, 5648, 5649, 5650] ) = {5633, 5635, 5638, 5640, 5644, 5645, 5616, 5617, 5648, 5649, 5650, 5621, 5622, 5627, 5630} ={ statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void } = I94
Goto(I61,compound_statement) = Closure( [5688, 5689, 5693, 5694, 5699, 5702, 5705, 5707, 5710, 5712, 5716, 5717, 5720, 5721, 5722] ) = {5699, 5702, 5705, 5707, 5720, 5710, 5712, 5721, 5716, 5717, 5688, 5689, 5722, 5693, 5694} ={ statement->compound_statement,identifier statement->compound_statement,void statement->compound_statement,while statement->compound_statement,; statement->compound_statement,float statement->compound_statement,break statement->compound_statement,} statement->compound_statement,double statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,return statement->compound_statement,for statement->compound_statement,char statement->compound_statement,int statement->compound_statement,if } = I95
Goto(I61,break) = Closure( [6048, 6049, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077, 6080, 6081, 6082] ) = {6048, 6049, 6080, 6081, 6082, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077} ={ jump_statement->break;,return jump_statement->break;,for jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue } = I96
Goto(I61,assignment_expression) = Closure( [3079] ) = {3007, 2863, 3079} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I97
Goto(I61,continue) = Closure( [5940, 5941, 5945, 5946, 5951, 5954, 5957, 5959, 5962, 5964, 5968, 5969, 5972, 5973, 5974] ) = {5954, 5957, 5959, 5962, 5964, 5968, 5969, 5940, 5941, 5972, 5973, 5974, 5945, 5946, 5951} ={ jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier } = I98
Goto(I61,statement_list) = Closure( [5162, 5180, 5181, 5182, 5152, 5153] ) = {5152, 5153, 5162, 5180, 5181, 5182} ={ compound_statement->{statement_list},# compound_statement->{statement_list},int compound_statement->{statement_list},void compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char } = I99


Goto(I63,)) = Closure( [1604, 1605, 1610, 1614, 1615, 1586, 1593, 1596, 1597, 1600, 1602] ) = {1600, 1602, 1604, 1605, 1610, 1614, 1615, 1586, 1593, 1596, 1597} ={ primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> } = I100

Goto(I64,function_expression) = Closure( [3279, 3307] ) = {3307, 3279} ={ expression->function_expression,) expression->function_expression,, } = I69
Goto(I64,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471, 1443, 1442] ) = {1442, 1443, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I70
Goto(I64,() = Closure( [1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I71
Goto(I64,expression_list) = Closure( [3883] ) = {3883} ={ function_expression->identifier(expression_list),) } = I101
Goto(I64,identifier) = Closure( [3783, 1370, 1371, 1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399] ) = {1377, 3811, 1380, 1381, 3783, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370, 1371} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> function_expression->identifier(expression_list),, primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= primary_expression->identifier,, } = I73
Goto(I64,expression) = Closure( [4171] ) = {4099, 3955, 4171} ={ expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) expression_list->expressionexpression_list_suffix,) } = I74
Goto(I64,constant_expression) = Closure( [3207, 3235] ) = {3235, 3207} ={ expression->constant_expression,) expression->constant_expression,, } = I75
Goto(I64,primary_expression) = Closure( [3379, 3351] ) = {1799, 3595, 2059, 2063, 1943, 3351, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 3423, 2275, 2279, 1771, 2159, 1775, 3567, 3711, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number constant_expression->primary_expressionarithmetic_expression,, relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier arithmetic_expression->relopprimary_expressionarithmetic_expression,, arithmetic_expression->,, operator->+,number relop-><,( relop->>=,number } = I76



Goto(I67,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471, 1442] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I39
Goto(I67,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I40
Goto(I67,identifier) = Closure( [1370, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399] ) = {1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= } = I102
Goto(I67,primary_expression) = Closure( [3667] ) = {1799, 3595, 2059, 2063, 1943, 2203, 3739, 2207, 1699, 2087, 1703, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 3667, 2131, 3451, 2135, 1627, 2015, 1631, 2275, 2279, 1771, 2159, 1775, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier operator->+,number relop-><,( relop->>=,number } = I103

Goto(I68,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471, 1442] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I39
Goto(I68,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I40
Goto(I68,identifier) = Closure( [1370, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399] ) = {1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= } = I102
Goto(I68,primary_expression) = Closure( [3523] ) = {1799, 3595, 2059, 2063, 1943, 2203, 3739, 2207, 1699, 2087, 1703, 1843, 1919, 2231, 1847, 1727, 3523, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 2275, 2279, 1771, 2159, 1775, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier operator->+,number relop-><,( relop->>=,number } = I104



Goto(I71,function_expression) = Closure( [3307] ) = {3307} ={ expression->function_expression,) } = I38
Goto(I71,number) = Closure( [1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I39
Goto(I71,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I40
Goto(I71,identifier) = Closure( [1370, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 3811] ) = {1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= } = I41
Goto(I71,expression) = Closure( [1574, 1578, 1579, 1550, 1551, 1557, 1560, 1561, 1564, 1566, 1568, 1569] ) = {1568, 1569, 1574, 1578, 1579, 1550, 1551, 1557, 1560, 1561, 1564, 1566} ={ primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- } = I105
Goto(I71,constant_expression) = Closure( [3235] ) = {3235} ={ expression->constant_expression,) } = I43
Goto(I71,primary_expression) = Closure( [3379] ) = {1799, 3595, 2059, 2063, 1943, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 2275, 2279, 1771, 2159, 1775, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier operator->+,number relop-><,( relop->>=,number } = I44

Goto(I72,)) = Closure( [3907, 3891] ) = {3891, 3907} ={ function_expression->identifier(expression_list),, function_expression->identifier(expression_list),; } = I106

Goto(I73,() = Closure( [3847, 3819] ) = {3847, 3343, 4135, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 3171, 1406, 1407, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 4243, 1430, 1434, 1435, 3747, 3243, 3775, 1478, 3271, 1479, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 3819, 3315} ={ function_expression->identifier(expression_list),) constant_expression->primary_expressionarithmetic_expression,) expression_list->expressionexpression_list_suffix,) primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) expression->constant_expression,, primary_expression->number,!= primary_expression->number,, expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< expression_list->,) primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),, expression->function_expression,, function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) function_expression->identifier(expression_list),, constant_expression->primary_expressionarithmetic_expression,, } = I107

Goto(I74,expression_list_suffix) = Closure( [4207] ) = {4207} ={ expression_list->expressionexpression_list_suffix,) } = I108
Goto(I74,,) = Closure( [3991] ) = {1413, 1416, 1417, 1420, 1422, 3343, 1424, 1425, 1430, 3991, 1434, 1435, 3747, 3243, 1334, 1335, 1341, 3775, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 3271, 1479, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 3199, 1506, 3171, 1507, 3315, 1406, 1407} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- constant_expression->primary_expressionarithmetic_expression,) primary_expression->number,== primary_expression->number,< primary_expression->number,+ expression_list_suffix->,expressionexpression_list_suffix,) primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),, expression->function_expression,, primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< expression->function_expression,) primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ expression->constant_expression,) primary_expression->(expression),>= expression->constant_expression,, primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,, primary_expression->number,!= primary_expression->number,, } = I109


Goto(I76,>) = Closure( [2023, 2027, 2051] ) = {2051, 2027, 2023} ={ relop->>,number relop->>,identifier relop->>,( } = I46
Goto(I76,/) = Closure( [1879, 1883, 1907] ) = {1907, 1883, 1879} ={ operator->/,number operator->/,identifier operator->/,( } = I47
Goto(I76,-) = Closure( [1735, 1739, 1763] ) = {1739, 1763, 1735} ={ operator->-,identifier operator->-,number operator->-,( } = I48
Goto(I76,<) = Closure( [1979, 1955, 1951] ) = {1979, 1955, 1951} ={ relop-><,number relop-><,identifier relop-><,( } = I49
Goto(I76,+) = Closure( [1663, 1667, 1691] ) = {1667, 1691, 1663} ={ operator->+,identifier operator->+,number operator->+,( } = I50
Goto(I76,>=) = Closure( [2311, 2315, 2339] ) = {2339, 2315, 2311} ={ relop->>=,number relop->>=,identifier relop->>=,( } = I51
Goto(I76,!=) = Closure( [2095, 2099, 2123] ) = {2123, 2099, 2095} ={ relop->!=,number relop->!=,identifier relop->!=,( } = I52
Goto(I76,*) = Closure( [1835, 1807, 1811] ) = {1811, 1835, 1807} ={ operator->*,identifier operator->*,number operator->*,( } = I53
Goto(I76,<=) = Closure( [2239, 2243, 2267] ) = {2243, 2267, 2239} ={ relop-><=,identifier relop-><=,number relop-><=,( } = I54
Goto(I76,==) = Closure( [2167, 2171, 2195] ) = {2171, 2195, 2167} ={ relop->==,identifier relop->==,number relop->==,( } = I55
Goto(I76,arithmetic_expression) = Closure( [3387, 3415] ) = {3387, 3415} ={ constant_expression->primary_expressionarithmetic_expression,, constant_expression->primary_expressionarithmetic_expression,) } = I110
Goto(I76,relop) = Closure( [3631, 3603] ) = {1413, 1416, 1417, 1420, 1422, 1424, 1425, 3603, 1430, 1434, 1435, 3631, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1479, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406, 1407} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< arithmetic_expression->relopprimary_expressionarithmetic_expression,, primary_expression->number,+ primary_expression->number,>= primary_expression->number,) arithmetic_expression->relopprimary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= primary_expression->number,, } = I111
Goto(I76,operator) = Closure( [3487, 3459] ) = {3459, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3487, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1479, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406, 1407} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) arithmetic_expression->operatorprimary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= primary_expression->number,, } = I112


Goto(I78,>) = Closure( [2023, 2027, 2051] ) = {2051, 2027, 2023} ={ relop->>,number relop->>,identifier relop->>,( } = I46
Goto(I78,/) = Closure( [1879, 1883, 1907] ) = {1907, 1883, 1879} ={ operator->/,number operator->/,identifier operator->/,( } = I47
Goto(I78,-) = Closure( [1735, 1739, 1763] ) = {1739, 1763, 1735} ={ operator->-,identifier operator->-,number operator->-,( } = I48
Goto(I78,<) = Closure( [1979, 1955, 1951] ) = {1979, 1955, 1951} ={ relop-><,number relop-><,identifier relop-><,( } = I49
Goto(I78,+) = Closure( [1663, 1667, 1691] ) = {1667, 1691, 1663} ={ operator->+,identifier operator->+,number operator->+,( } = I50
Goto(I78,>=) = Closure( [2311, 2315, 2339] ) = {2339, 2315, 2311} ={ relop->>=,number relop->>=,identifier relop->>=,( } = I51
Goto(I78,!=) = Closure( [2095, 2099, 2123] ) = {2123, 2099, 2095} ={ relop->!=,number relop->!=,identifier relop->!=,( } = I52
Goto(I78,*) = Closure( [1835, 1807, 1811] ) = {1811, 1835, 1807} ={ operator->*,identifier operator->*,number operator->*,( } = I53
Goto(I78,<=) = Closure( [2239, 2243, 2267] ) = {2243, 2267, 2239} ={ relop-><=,identifier relop-><=,number relop-><=,( } = I54
Goto(I78,==) = Closure( [2167, 2171, 2195] ) = {2171, 2195, 2167} ={ relop->==,identifier relop->==,number relop->==,( } = I55
Goto(I78,arithmetic_expression) = Closure( [3675, 3691] ) = {3691, 3675} ={ arithmetic_expression->relopprimary_expressionarithmetic_expression,; arithmetic_expression->relopprimary_expressionarithmetic_expression,, } = I113
Goto(I78,relop) = Closure( [3619, 3603] ) = {1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 3603, 1430, 1434, 3619, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1479, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 1406, 1407} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< arithmetic_expression->relopprimary_expressionarithmetic_expression,, primary_expression->number,+ primary_expression->number,>= arithmetic_expression->relopprimary_expressionarithmetic_expression,; primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->number,!= primary_expression->number,, } = I57
Goto(I78,operator) = Closure( [3459, 3475] ) = {3459, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 3475, 1430, 1434, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1479, 1351, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 1406, 1407} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< arithmetic_expression->operatorprimary_expressionarithmetic_expression,; primary_expression->number,+ primary_expression->number,>= primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),, primary_expression->identifier,; primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->number,!= primary_expression->number,, } = I58

Goto(I79,>) = Closure( [2023, 2027, 2051] ) = {2051, 2027, 2023} ={ relop->>,number relop->>,identifier relop->>,( } = I46
Goto(I79,/) = Closure( [1879, 1883, 1907] ) = {1907, 1883, 1879} ={ operator->/,number operator->/,identifier operator->/,( } = I47
Goto(I79,-) = Closure( [1735, 1739, 1763] ) = {1739, 1763, 1735} ={ operator->-,identifier operator->-,number operator->-,( } = I48
Goto(I79,<) = Closure( [1979, 1955, 1951] ) = {1979, 1955, 1951} ={ relop-><,number relop-><,identifier relop-><,( } = I49
Goto(I79,+) = Closure( [1663, 1667, 1691] ) = {1667, 1691, 1663} ={ operator->+,identifier operator->+,number operator->+,( } = I50
Goto(I79,>=) = Closure( [2311, 2315, 2339] ) = {2339, 2315, 2311} ={ relop->>=,number relop->>=,identifier relop->>=,( } = I51
Goto(I79,!=) = Closure( [2095, 2099, 2123] ) = {2123, 2099, 2095} ={ relop->!=,number relop->!=,identifier relop->!=,( } = I52
Goto(I79,*) = Closure( [1835, 1807, 1811] ) = {1811, 1835, 1807} ={ operator->*,identifier operator->*,number operator->*,( } = I53
Goto(I79,<=) = Closure( [2239, 2243, 2267] ) = {2243, 2267, 2239} ={ relop-><=,identifier relop-><=,number relop-><=,( } = I54
Goto(I79,==) = Closure( [2167, 2171, 2195] ) = {2171, 2195, 2167} ={ relop->==,identifier relop->==,number relop->==,( } = I55
Goto(I79,arithmetic_expression) = Closure( [3531, 3547] ) = {3531, 3547} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,; } = I114
Goto(I79,relop) = Closure( [3619, 3603] ) = {1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 3603, 1430, 1434, 3619, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1479, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 1406, 1407} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< arithmetic_expression->relopprimary_expressionarithmetic_expression,, primary_expression->number,+ primary_expression->number,>= arithmetic_expression->relopprimary_expressionarithmetic_expression,; primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->number,!= primary_expression->number,, } = I57
Goto(I79,operator) = Closure( [3459, 3475] ) = {3459, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 3475, 1430, 1434, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1479, 1351, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 1406, 1407} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< arithmetic_expression->operatorprimary_expressionarithmetic_expression,; primary_expression->number,+ primary_expression->number,>= primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),, primary_expression->identifier,; primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->number,!= primary_expression->number,, } = I58



Goto(I82,identifier) = Closure( [939, 955] ) = {1011, 1027, 955, 939, 1135, 1119} ={ declaration_parameter_assign->=expression,, declaration_parameter_assign->=expression,; declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter_assign->,; declaration_parameter_assign->,, } = I30
Goto(I82,declaration_parameter) = Closure( [806, 809, 811, 814, 816, 820, 821, 824, 825, 826, 792, 793, 797, 798, 803] ) = {1171, 792, 793, 797, 798, 1315, 803, 806, 809, 811, 814, 816, 820, 821, 824, 825, 826} ={ declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration_parameter_suffix->,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char } = I115


Goto(I84,() = Closure( [6756, 6760, 6761, 6732, 6733, 6764, 6765, 6766, 6737, 6738, 6743, 6746, 6749, 6751, 6754] ) = {3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 6732, 6733, 1358, 6737, 1362, 1363, 6738, 6743, 6746, 6749, 6751, 6754, 6756, 6760, 6761, 6764, 6765, 6766, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507} ={ constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for primary_expression->identifier,+ iteration_statement->while(expression)statement,int primary_expression->identifier,>= primary_expression->identifier,) iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,char primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) } = I116

Goto(I85,selection_statement) = Closure( [5544, 5545, 5549, 5550, 5555, 5558, 5561, 5563, 5566, 5568, 5572, 5573, 5576, 5577, 5578] ) = {5568, 5572, 5573, 5544, 5545, 5576, 5577, 5578, 5549, 5550, 5555, 5558, 5561, 5563, 5566} ={ statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,return statement->selection_statement,for statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break } = I81
Goto(I85,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I85,type_specifier) = Closure( [756, 757, 761, 762, 767, 770, 773, 775, 778, 780, 784, 785, 788, 789, 790] ) = {770, 773, 903, 775, 778, 780, 784, 785, 788, 789, 790, 919, 756, 757, 761, 762, 767} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I82
Goto(I85,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I85,expression_statement) = Closure( [5400, 5401, 5405, 5406, 5411, 5414, 5417, 5419, 5422, 5424, 5428, 5429, 5432, 5433, 5434] ) = {5432, 5411, 5414, 5433, 5417, 5419, 5422, 5424, 5428, 5429, 5400, 5401, 5434, 5405, 5406} ={ statement->expression_statement,float statement->expression_statement,identifier statement->expression_statement,void statement->expression_statement,double statement->expression_statement,while statement->expression_statement,; statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,return statement->expression_statement,for statement->expression_statement,char statement->expression_statement,int statement->expression_statement,if } = I83
Goto(I85,while) = Closure( [6696, 6697, 6701, 6702, 6707, 6710, 6713, 6715, 6718, 6720, 6724, 6725, 6728, 6729, 6730] ) = {6720, 6724, 6725, 6696, 6697, 6728, 6729, 6730, 6701, 6702, 6707, 6710, 6713, 6715, 6718} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,break } = I84
Goto(I85,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I85,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I85,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I85,{) = Closure( [5112, 5113, 5117, 5118, 5123, 5126, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146] ) = {6144, 5123, 6148, 6149, 5126, 6152, 6153, 6154, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146, 3151, 6264, 6265, 5244, 6269, 6270, 5113, 6275, 6278, 6281, 6283, 6286, 6288, 6292, 6293, 5118, 6296, 6297, 6298, 6372, 6373, 5352, 6377, 6378, 6383, 6386, 5364, 5365, 6389, 6391, 5369, 5370, 6394, 6396, 5375, 6400, 6401, 5378, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5396, 5397, 5398, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 5508, 5509, 5513, 5514, 5519, 5522, 5525, 5527, 5530, 5532, 5536, 5537, 5540, 5541, 5542, 443, 5580, 5581, 5585, 5586, 5591, 5594, 5597, 5599, 5602, 5604, 5608, 5609, 5612, 5613, 5614, 515, 6660, 6661, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 5752, 5753, 5756, 5757, 5758, 2703, 659, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 720, 721, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6882, 742, 6887, 744, 6890, 748, 749, 6893, 6895, 752, 753, 754, 6898, 6900, 6904, 6905, 6908, 6909, 6910, 5904, 5905, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 6012, 6013, 6017, 6018, 6023, 6026, 6029, 6031, 6034, 6036, 6040, 6041, 6044, 6045, 6046, 5076, 5077, 5081, 5082, 5087, 5090, 3043, 5093, 5095, 6120, 6121, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 5112, 6137, 6139, 5117, 6142} ={ jump_statement->returnexpression;,} compound_statement->{statement_list},identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue compound_statement->{statement_list},void jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char compound_statement->{statement_list},while compound_statement->{statement_list},; compound_statement->{statement_list},break compound_statement->{statement_list},} compound_statement->{statement_list},{ compound_statement->{statement_list},continue compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char assignment_expression_list->,; jump_statement->return;,return jump_statement->return;,for statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if compound_statement->{statement_list},for jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue compound_statement->{statement_list},if jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char type_specifier->int,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char type_specifier->double,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue statement->declaration,float statement->declaration,double statement->declaration,char assignment_expression->identifierassignment_operatorexpression,, type_specifier->void,identifier assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char compound_statement->{statement_list},return compound_statement->{statement_list},for compound_statement->{statement_list},int compound_statement->{statement_list},if compound_statement->{statement_list},identifier compound_statement->{statement_list},void assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; jump_statement->returnexpression;,return jump_statement->returnexpression;,for compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void compound_statement->{statement_list},return jump_statement->returnexpression;,while jump_statement->returnexpression;,; compound_statement->{statement_list},int jump_statement->returnexpression;,break } = I85
Goto(I85,return) = Closure( [6180, 6184, 6185, 6188, 6189, 6190, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 6324, 6328, 6329, 6332, 6333, 6334, 6156, 6157, 6161, 6162, 6167, 6170, 6173, 6175, 6178] ) = {3331, 6156, 6157, 6161, 6162, 6167, 6170, 6173, 6175, 6178, 6180, 6184, 6185, 6188, 6189, 6190, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1358, 1362, 3187, 1406, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 3763, 6324, 6328, 6329, 3259, 6332, 6333, 6334, 1478, 1485, 1488, 1489, 1492, 1494, 1495, 1496, 1497, 1502, 1506} ={ constant_expression->primary_expressionarithmetic_expression,; jump_statement->returnexpression;,return jump_statement->returnexpression;,for jump_statement->returnexpression;,int jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,void jump_statement->returnexpression;,while jump_statement->returnexpression;,; jump_statement->returnexpression;,break jump_statement->returnexpression;,} jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= expression->constant_expression,; primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= jump_statement->return;,return jump_statement->return;,for jump_statement->return;,int jump_statement->return;,if jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break function_expression->identifier(expression_list),; jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue expression->function_expression,; jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= } = I86
Goto(I85,jump_statement) = Closure( [5472, 5473, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501, 5504, 5505, 5506] ) = {5472, 5473, 5504, 5505, 5506, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501} ={ statement->jump_statement,return statement->jump_statement,for statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue } = I87
Goto(I85,for) = Closure( [6912, 6913, 6917, 6918, 6923, 6926, 6929, 6931, 6934, 6936, 6940, 6941, 6944, 6945, 6946] ) = {6912, 6913, 6944, 6945, 6946, 6917, 6918, 6923, 6926, 6929, 6931, 6934, 6936, 6940, 6941} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue } = I88
Goto(I85,declaration) = Closure( [5760, 5761, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789, 5792, 5793, 5794] ) = {5760, 5761, 5792, 5793, 5794, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789} ={ statement->declaration,return statement->declaration,for statement->declaration,float statement->declaration,double statement->declaration,char statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue } = I89
Goto(I85,statement) = Closure( [5280] ) = {6144, 515, 6148, 6149, 6660, 6661, 6152, 6153, 6154, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 3151, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 6264, 6265, 5752, 5753, 5244, 6269, 6270, 5756, 5757, 5758, 6275, 6278, 6281, 6283, 6286, 2703, 6288, 659, 6292, 6293, 6296, 6297, 6298, 6137, 2719, 5280, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 753, 720, 721, 754, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6372, 6373, 6882, 742, 5352, 6377, 6378, 6887, 744, 6890, 748, 6383, 749, 6893, 6386, 6895, 5364, 5365, 6389, 6391, 752, 5369, 5370, 6394, 6396, 6900, 6904, 5375, 6400, 6401, 5378, 6908, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5904, 5905, 5396, 5397, 5398, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 6012, 6013, 6017, 6018, 5508, 5509, 6023, 5513, 5514, 6026, 6029, 5519, 6031, 5522, 6898, 6034, 5525, 6036, 5527, 6040, 6041, 5530, 5532, 6044, 6045, 6046, 5536, 5537, 5540, 5541, 5542, 6905, 443, 6909, 5580, 5581, 6910, 5585, 5586, 5076, 5077, 5591, 5081, 5594, 5082, 5597, 5599, 5087, 5602, 5090, 5604, 3043, 5093, 5095, 5608, 5609, 6120, 6121, 5612, 5613, 5614, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 6139, 6142} ={ jump_statement->returnexpression;,} type_specifier->double,identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier assignment_expression_list->,; statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} jump_statement->return;,return jump_statement->return;,for statement->declaration,{ statement->declaration,continue statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if statement->declaration,float statement->declaration,double statement->declaration,char jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} type_specifier->void,identifier jump_statement->return;,{ jump_statement->return;,continue jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char jump_statement->returnexpression;,while assignment_expression->identifierassignment_operatorexpression,; statement_list->statementstatement_list,} expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ selection_statement->if(expression)statementelsestatement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while selection_statement->if(expression)statementelsestatement,void iteration_statement->for(declarationexpression;assignment_expression)statement,; statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,float selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue jump_statement->continue;,return jump_statement->continue;,for statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if statement->selection_statement,return statement->selection_statement,for jump_statement->break;,identifier statement->selection_statement,int statement->selection_statement,if jump_statement->break;,void jump_statement->break;,while statement->selection_statement,identifier jump_statement->break;,; statement->selection_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,break statement->selection_statement,while jump_statement->break;,} statement->selection_statement,; jump_statement->break;,{ jump_statement->break;,continue statement->selection_statement,break statement->selection_statement,} jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,continue type_specifier->int,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,double statement->iteration_statement,return statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->iteration_statement,int statement->iteration_statement,if compound_statement->{statement_list},return compound_statement->{statement_list},for statement->iteration_statement,identifier compound_statement->{statement_list},int statement->iteration_statement,void compound_statement->{statement_list},if statement->iteration_statement,while statement->iteration_statement,; compound_statement->{statement_list},identifier statement->iteration_statement,break compound_statement->{statement_list},void statement->iteration_statement,} assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; statement->iteration_statement,{ statement->iteration_statement,continue jump_statement->returnexpression;,return jump_statement->returnexpression;,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void jump_statement->returnexpression;,; jump_statement->returnexpression;,break } = I90
Goto(I85,if) = Closure( [6408, 6409, 6413, 6414, 6419, 6422, 6425, 6427, 6430, 6432, 6436, 6437, 6440, 6441, 6442] ) = {6432, 6436, 6437, 6408, 6409, 6440, 6441, 6442, 6413, 6414, 6419, 6422, 6425, 6427, 6430} ={ selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,break } = I91
Goto(I85,identifier) = Closure( [2739, 2755] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2739, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I85,assignment_expression_list) = Closure( [5832, 5833, 5837, 5838, 5843, 5846, 5849, 5851, 5854, 5856, 5860, 5861, 5864, 5865, 5866] ) = {5856, 5860, 5861, 5832, 5833, 5864, 5865, 5866, 5837, 5838, 5843, 5846, 5849, 5851, 5854} ={ expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break } = I93
Goto(I85,iteration_statement) = Closure( [5616, 5617, 5621, 5622, 5627, 5630, 5633, 5635, 5638, 5640, 5644, 5645, 5648, 5649, 5650] ) = {5633, 5635, 5638, 5640, 5644, 5645, 5616, 5617, 5648, 5649, 5650, 5621, 5622, 5627, 5630} ={ statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void } = I94
Goto(I85,compound_statement) = Closure( [5688, 5689, 5693, 5694, 5699, 5702, 5705, 5707, 5710, 5712, 5716, 5717, 5720, 5721, 5722] ) = {5699, 5702, 5705, 5707, 5720, 5710, 5712, 5721, 5716, 5717, 5688, 5689, 5722, 5693, 5694} ={ statement->compound_statement,identifier statement->compound_statement,void statement->compound_statement,while statement->compound_statement,; statement->compound_statement,float statement->compound_statement,break statement->compound_statement,} statement->compound_statement,double statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,return statement->compound_statement,for statement->compound_statement,char statement->compound_statement,int statement->compound_statement,if } = I95
Goto(I85,break) = Closure( [6048, 6049, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077, 6080, 6081, 6082] ) = {6048, 6049, 6080, 6081, 6082, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077} ={ jump_statement->break;,return jump_statement->break;,for jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue } = I96
Goto(I85,assignment_expression) = Closure( [3079] ) = {3007, 2863, 3079} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I97
Goto(I85,continue) = Closure( [5940, 5941, 5945, 5946, 5951, 5954, 5957, 5959, 5962, 5964, 5968, 5969, 5972, 5973, 5974] ) = {5954, 5957, 5959, 5962, 5964, 5968, 5969, 5940, 5941, 5972, 5973, 5974, 5945, 5946, 5951} ={ jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier } = I98
Goto(I85,statement_list) = Closure( [5159, 5162, 5165, 5167, 5170, 5172, 5176, 5177, 5180, 5181, 5182, 5149, 5154, 5148, 5153] ) = {5153, 5154, 5159, 5162, 5165, 5148, 5167, 5170, 5149, 5172, 5176, 5177, 5180, 5181, 5182} ={ compound_statement->{statement_list},int compound_statement->{statement_list},if compound_statement->{statement_list},identifier compound_statement->{statement_list},void compound_statement->{statement_list},while compound_statement->{statement_list},return compound_statement->{statement_list},; compound_statement->{statement_list},break compound_statement->{statement_list},for compound_statement->{statement_list},} compound_statement->{statement_list},{ compound_statement->{statement_list},continue compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char } = I117

Goto(I86,function_expression) = Closure( [3295] ) = {3295} ={ expression->function_expression,; } = I118
Goto(I86,number) = Closure( [1442, 1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= } = I119
Goto(I86,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533, 1538, 1542] ) = {1538, 1542, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< } = I120
Goto(I86,identifier) = Closure( [1370, 1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398, 3799] ) = {1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398, 3799, 1370} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= function_expression->identifier(expression_list),; primary_expression->identifier,!= } = I121
Goto(I86,expression) = Closure( [6192, 6193, 6197, 6198, 6203, 6206, 6209, 6211, 6214, 6216, 6220, 6221, 6224, 6225, 6226] ) = {6209, 6211, 6214, 6216, 6220, 6221, 6192, 6193, 6224, 6225, 6226, 6197, 6198, 6203, 6206} ={ jump_statement->returnexpression;,while jump_statement->returnexpression;,; jump_statement->returnexpression;,break jump_statement->returnexpression;,} jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue jump_statement->returnexpression;,return jump_statement->returnexpression;,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char jump_statement->returnexpression;,int jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,void } = I122
Goto(I86,;) = Closure( [6336, 6337, 6341, 6342, 6347, 6350, 6353, 6355, 6358, 6360, 6364, 6365, 6368, 6369, 6370] ) = {6336, 6337, 6368, 6369, 6370, 6341, 6342, 6347, 6350, 6353, 6355, 6358, 6360, 6364, 6365} ={ jump_statement->return;,return jump_statement->return;,for jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char jump_statement->return;,int jump_statement->return;,if jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue } = I123
Goto(I86,constant_expression) = Closure( [3223] ) = {3223} ={ expression->constant_expression,; } = I124
Goto(I86,primary_expression) = Closure( [3367] ) = {1799, 2059, 3727, 2063, 1943, 2203, 2207, 1699, 3367, 1703, 2087, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 2135, 1627, 1631, 2015, 2275, 2279, 1771, 3583, 3439, 1775, 2159, 1655, 1915, 2303} ={ operator->*,number relop->!=,( arithmetic_expression->,; relop->!=,identifier relop-><,number relop-><=,( relop-><=,identifier operator->-,( constant_expression->primary_expressionarithmetic_expression,; operator->-,identifier relop->!=,number operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( relop->==,identifier operator->+,( operator->+,identifier relop->>,number relop->>=,( relop->>=,identifier operator->*,( arithmetic_expression->relopprimary_expressionarithmetic_expression,; arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->*,identifier relop->==,number operator->+,number relop-><,( relop->>=,number } = I125


Goto(I88,() = Closure( [6948, 6949, 6980, 6981, 6982, 6953, 6954, 6959, 6962, 6965, 6967, 6970, 6972, 6976, 6977] ) = {6976, 6977, 515, 6980, 6981, 6982, 587, 659, 727, 731, 6948, 6949, 6953, 6954, 6959, 6962, 371, 755, 6965, 6967, 6970, 443, 6972} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue type_specifier->double,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char type_specifier->float,identifier type_specifier->void,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,void type_specifier->char,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,break type_specifier->int,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,} } = I126


Goto(I90,selection_statement) = Closure( [5544, 5545, 5549, 5550, 5555, 5558, 5561, 5563, 5566, 5568, 5572, 5573, 5576, 5577, 5578] ) = {5568, 5572, 5573, 5544, 5545, 5576, 5577, 5578, 5549, 5550, 5555, 5558, 5561, 5563, 5566} ={ statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,return statement->selection_statement,for statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break } = I81
Goto(I90,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I90,type_specifier) = Closure( [789, 756, 757, 790, 761, 762, 767, 770, 773, 775, 778, 780, 784, 785, 788] ) = {770, 773, 903, 775, 778, 780, 784, 785, 788, 789, 790, 919, 756, 757, 761, 762, 767} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I82
Goto(I90,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I90,expression_statement) = Closure( [5400, 5401, 5405, 5406, 5411, 5414, 5417, 5419, 5422, 5424, 5428, 5429, 5432, 5433, 5434] ) = {5432, 5411, 5414, 5433, 5417, 5419, 5422, 5424, 5428, 5429, 5400, 5401, 5434, 5405, 5406} ={ statement->expression_statement,float statement->expression_statement,identifier statement->expression_statement,void statement->expression_statement,double statement->expression_statement,while statement->expression_statement,; statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,return statement->expression_statement,for statement->expression_statement,char statement->expression_statement,int statement->expression_statement,if } = I83
Goto(I90,while) = Closure( [6696, 6697, 6701, 6702, 6707, 6710, 6713, 6715, 6718, 6720, 6724, 6725, 6728, 6729, 6730] ) = {6720, 6724, 6725, 6696, 6697, 6728, 6729, 6730, 6701, 6702, 6707, 6710, 6713, 6715, 6718} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,break } = I84
Goto(I90,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I90,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I90,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I90,{) = Closure( [5112, 5113, 5117, 5118, 5123, 5126, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146] ) = {6144, 5123, 6148, 6149, 5126, 6152, 6153, 6154, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146, 3151, 6264, 6265, 5244, 6269, 6270, 5113, 6275, 6278, 6281, 6283, 6286, 6288, 6292, 6293, 5118, 6296, 6297, 6298, 6372, 6373, 5352, 6377, 6378, 6383, 6386, 5364, 5365, 6389, 6391, 5369, 5370, 6394, 6396, 5375, 6400, 6401, 5378, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5396, 5397, 5398, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 5508, 5509, 5513, 5514, 5519, 5522, 5525, 5527, 5530, 5532, 5536, 5537, 5540, 5541, 5542, 443, 5580, 5581, 5585, 5586, 5591, 5594, 5597, 5599, 5602, 5604, 5608, 5609, 5612, 5613, 5614, 515, 6660, 6661, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 5752, 5753, 5756, 5757, 5758, 2703, 659, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 720, 721, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6882, 742, 6887, 744, 6890, 748, 749, 6893, 6895, 752, 753, 754, 6898, 6900, 6904, 6905, 6908, 6909, 6910, 5904, 5905, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 6012, 6013, 6017, 6018, 6023, 6026, 6029, 6031, 6034, 6036, 6040, 6041, 6044, 6045, 6046, 5076, 5077, 5081, 5082, 5087, 5090, 3043, 5093, 5095, 6120, 6121, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 5112, 6137, 6139, 5117, 6142} ={ jump_statement->returnexpression;,} compound_statement->{statement_list},identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue compound_statement->{statement_list},void jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char compound_statement->{statement_list},while compound_statement->{statement_list},; compound_statement->{statement_list},break compound_statement->{statement_list},} compound_statement->{statement_list},{ compound_statement->{statement_list},continue compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char assignment_expression_list->,; jump_statement->return;,return jump_statement->return;,for statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if compound_statement->{statement_list},for jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue compound_statement->{statement_list},if jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char type_specifier->int,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char type_specifier->double,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue statement->declaration,float statement->declaration,double statement->declaration,char assignment_expression->identifierassignment_operatorexpression,, type_specifier->void,identifier assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char compound_statement->{statement_list},return compound_statement->{statement_list},for compound_statement->{statement_list},int compound_statement->{statement_list},if compound_statement->{statement_list},identifier compound_statement->{statement_list},void assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; jump_statement->returnexpression;,return jump_statement->returnexpression;,for compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void compound_statement->{statement_list},return jump_statement->returnexpression;,while jump_statement->returnexpression;,; compound_statement->{statement_list},int jump_statement->returnexpression;,break } = I85
Goto(I90,return) = Closure( [6180, 6184, 6185, 6188, 6189, 6190, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 6324, 6328, 6329, 6332, 6333, 6334, 6173, 6156, 6157, 6161, 6162, 6167, 6170, 6175, 6178] ) = {3331, 6156, 6157, 6161, 6162, 6167, 6170, 6173, 6175, 6178, 6180, 6184, 6185, 6188, 6189, 6190, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1358, 1362, 3187, 1406, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 3763, 6324, 6328, 6329, 3259, 6332, 6333, 6334, 1478, 1485, 1488, 1489, 1492, 1494, 1495, 1496, 1497, 1502, 1506} ={ constant_expression->primary_expressionarithmetic_expression,; jump_statement->returnexpression;,return jump_statement->returnexpression;,for jump_statement->returnexpression;,int jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,void jump_statement->returnexpression;,while jump_statement->returnexpression;,; jump_statement->returnexpression;,break jump_statement->returnexpression;,} jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= expression->constant_expression,; primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= jump_statement->return;,return jump_statement->return;,for jump_statement->return;,int jump_statement->return;,if jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break function_expression->identifier(expression_list),; jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue expression->function_expression,; jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= } = I86
Goto(I90,jump_statement) = Closure( [5472, 5473, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501, 5504, 5505, 5506] ) = {5472, 5473, 5504, 5505, 5506, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501} ={ statement->jump_statement,return statement->jump_statement,for statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue } = I87
Goto(I90,for) = Closure( [6912, 6913, 6917, 6918, 6923, 6926, 6929, 6931, 6936, 6940, 6944, 6934, 6941, 6945, 6946] ) = {6912, 6913, 6944, 6945, 6946, 6917, 6918, 6923, 6926, 6929, 6931, 6934, 6936, 6940, 6941} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue } = I88
Goto(I90,declaration) = Closure( [5760, 5761, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789, 5792, 5793, 5794] ) = {5760, 5761, 5792, 5793, 5794, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789} ={ statement->declaration,return statement->declaration,for statement->declaration,float statement->declaration,double statement->declaration,char statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue } = I89
Goto(I90,statement) = Closure( [5280] ) = {6144, 515, 6148, 6149, 6660, 6661, 6152, 6153, 6154, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 3151, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 6264, 6265, 5752, 5753, 5244, 6269, 6270, 5756, 5757, 5758, 6275, 6278, 6281, 6283, 6286, 2703, 6288, 659, 6292, 6293, 6296, 6297, 6298, 6137, 2719, 5280, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 753, 720, 721, 754, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6372, 6373, 6882, 742, 5352, 6377, 6378, 6887, 744, 6890, 748, 6383, 749, 6893, 6386, 6895, 5364, 5365, 6389, 6391, 752, 5369, 5370, 6394, 6396, 6900, 6904, 5375, 6400, 6401, 5378, 6908, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5904, 5905, 5396, 5397, 5398, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 6012, 6013, 6017, 6018, 5508, 5509, 6023, 5513, 5514, 6026, 6029, 5519, 6031, 5522, 6898, 6034, 5525, 6036, 5527, 6040, 6041, 5530, 5532, 6044, 6045, 6046, 5536, 5537, 5540, 5541, 5542, 6905, 443, 6909, 5580, 5581, 6910, 5585, 5586, 5076, 5077, 5591, 5081, 5594, 5082, 5597, 5599, 5087, 5602, 5090, 5604, 3043, 5093, 5095, 5608, 5609, 6120, 6121, 5612, 5613, 5614, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 6139, 6142} ={ jump_statement->returnexpression;,} type_specifier->double,identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier assignment_expression_list->,; statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} jump_statement->return;,return jump_statement->return;,for statement->declaration,{ statement->declaration,continue statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if statement->declaration,float statement->declaration,double statement->declaration,char jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} type_specifier->void,identifier jump_statement->return;,{ jump_statement->return;,continue jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char jump_statement->returnexpression;,while assignment_expression->identifierassignment_operatorexpression,; statement_list->statementstatement_list,} expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ selection_statement->if(expression)statementelsestatement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while selection_statement->if(expression)statementelsestatement,void iteration_statement->for(declarationexpression;assignment_expression)statement,; statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,float selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue jump_statement->continue;,return jump_statement->continue;,for statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if statement->selection_statement,return statement->selection_statement,for jump_statement->break;,identifier statement->selection_statement,int statement->selection_statement,if jump_statement->break;,void jump_statement->break;,while statement->selection_statement,identifier jump_statement->break;,; statement->selection_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,break statement->selection_statement,while jump_statement->break;,} statement->selection_statement,; jump_statement->break;,{ jump_statement->break;,continue statement->selection_statement,break statement->selection_statement,} jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,continue type_specifier->int,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,double statement->iteration_statement,return statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->iteration_statement,int statement->iteration_statement,if compound_statement->{statement_list},return compound_statement->{statement_list},for statement->iteration_statement,identifier compound_statement->{statement_list},int statement->iteration_statement,void compound_statement->{statement_list},if statement->iteration_statement,while statement->iteration_statement,; compound_statement->{statement_list},identifier statement->iteration_statement,break compound_statement->{statement_list},void statement->iteration_statement,} assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; statement->iteration_statement,{ statement->iteration_statement,continue jump_statement->returnexpression;,return jump_statement->returnexpression;,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void jump_statement->returnexpression;,; jump_statement->returnexpression;,break } = I90
Goto(I90,if) = Closure( [6408, 6409, 6413, 6414, 6419, 6422, 6425, 6427, 6430, 6432, 6436, 6437, 6440, 6441, 6442] ) = {6432, 6436, 6437, 6408, 6409, 6440, 6441, 6442, 6413, 6414, 6419, 6422, 6425, 6427, 6430} ={ selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,break } = I91
Goto(I90,identifier) = Closure( [2739, 2755] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2739, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I90,assignment_expression_list) = Closure( [5832, 5833, 5837, 5838, 5843, 5846, 5849, 5851, 5854, 5856, 5860, 5861, 5864, 5865, 5866] ) = {5856, 5860, 5861, 5832, 5833, 5864, 5865, 5866, 5837, 5838, 5843, 5846, 5849, 5851, 5854} ={ expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break } = I93
Goto(I90,iteration_statement) = Closure( [5616, 5617, 5621, 5622, 5627, 5630, 5633, 5635, 5638, 5640, 5644, 5645, 5648, 5649, 5650] ) = {5633, 5635, 5638, 5640, 5644, 5645, 5616, 5617, 5648, 5649, 5650, 5621, 5622, 5627, 5630} ={ statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void } = I94
Goto(I90,compound_statement) = Closure( [5688, 5689, 5693, 5694, 5699, 5702, 5705, 5707, 5710, 5712, 5716, 5717, 5720, 5721, 5722] ) = {5699, 5702, 5705, 5707, 5720, 5710, 5712, 5721, 5716, 5717, 5688, 5689, 5722, 5693, 5694} ={ statement->compound_statement,identifier statement->compound_statement,void statement->compound_statement,while statement->compound_statement,; statement->compound_statement,float statement->compound_statement,break statement->compound_statement,} statement->compound_statement,double statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,return statement->compound_statement,for statement->compound_statement,char statement->compound_statement,int statement->compound_statement,if } = I95
Goto(I90,break) = Closure( [6048, 6049, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077, 6080, 6081, 6082] ) = {6048, 6049, 6080, 6081, 6082, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077} ={ jump_statement->break;,return jump_statement->break;,for jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue } = I96
Goto(I90,assignment_expression) = Closure( [3079] ) = {3007, 2863, 3079} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I97
Goto(I90,continue) = Closure( [5940, 5941, 5945, 5946, 5951, 5954, 5957, 5959, 5962, 5964, 5968, 5969, 5972, 5973, 5974] ) = {5954, 5957, 5959, 5962, 5964, 5968, 5969, 5940, 5941, 5972, 5973, 5974, 5945, 5946, 5951} ={ jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier } = I98
Goto(I90,statement_list) = Closure( [5316] ) = {5316} ={ statement_list->statementstatement_list,} } = I127

Goto(I91,() = Closure( [6468, 6472, 6473, 6444, 6445, 6476, 6477, 6478, 6449, 6450, 6455, 6458, 6461, 6463, 6466] ) = {3343, 6444, 6445, 6449, 6450, 1334, 6455, 6458, 1341, 6461, 6463, 1344, 1345, 6466, 6468, 1348, 1350, 1352, 1353, 6472, 6473, 6476, 6477, 1358, 6478, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507} ={ constant_expression->primary_expressionarithmetic_expression,) selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if primary_expression->identifier,!= selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void primary_expression->identifier,* selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; primary_expression->identifier,<= primary_expression->identifier,> selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,double primary_expression->identifier,+ selection_statement->if(expression)statementelsestatement,char primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) } = I128

Goto(I92,*=) = Closure( [2599, 2603, 2627] ) = {2627, 2603, 2599} ={ assignment_operator->*=,number assignment_operator->*=,identifier assignment_operator->*=,( } = I129
Goto(I92,assignment_operator) = Closure( [2791, 2775] ) = {3331, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 3747, 3243, 3763, 1334, 1335, 3259, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1479, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 2775, 1502, 1506, 3171, 2791, 3187, 3315, 1406, 1407} ={ constant_expression->primary_expressionarithmetic_expression,; primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= function_expression->identifier(expression_list),, expression->function_expression,, function_expression->identifier(expression_list),; primary_expression->identifier,!= primary_expression->identifier,, expression->function_expression,; primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< assignment_expression->identifierassignment_operatorexpression,, primary_expression->(expression),+ primary_expression->(expression),>= expression->constant_expression,, assignment_expression->identifierassignment_operatorexpression,; expression->constant_expression,; constant_expression->primary_expressionarithmetic_expression,, primary_expression->number,!= primary_expression->number,, } = I130
Goto(I92,-=) = Closure( [2555, 2527, 2531] ) = {2555, 2531, 2527} ={ assignment_operator->-=,number assignment_operator->-=,identifier assignment_operator->-=,( } = I131
Goto(I92,/=) = Closure( [2671, 2675, 2699] ) = {2675, 2699, 2671} ={ assignment_operator->/=,identifier assignment_operator->/=,number assignment_operator->/=,( } = I132
Goto(I92,=) = Closure( [2411, 2383, 2387] ) = {2387, 2411, 2383} ={ assignment_operator->=,identifier assignment_operator->=,number assignment_operator->=,( } = I133
Goto(I92,+=) = Closure( [2483, 2455, 2459] ) = {2483, 2459, 2455} ={ assignment_operator->+=,number assignment_operator->+=,identifier assignment_operator->+=,( } = I134

Goto(I93,;) = Closure( [5892, 5896, 5897, 5868, 5869, 5900, 5901, 5902, 5873, 5874, 5879, 5882, 5885, 5887, 5890] ) = {5890, 5892, 5896, 5897, 5900, 5901, 5868, 5869, 5902, 5873, 5874, 5879, 5882, 5885, 5887} ={ expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; } = I135



Goto(I96,;) = Closure( [6084, 6085, 6116, 6117, 6118, 6089, 6090, 6095, 6098, 6101, 6103, 6106, 6108, 6112, 6113] ) = {6112, 6113, 6116, 6117, 6084, 6085, 6118, 6089, 6090, 6095, 6098, 6101, 6103, 6106, 6108} ={ jump_statement->break;,{ jump_statement->break;,continue jump_statement->break;,float jump_statement->break;,double jump_statement->break;,return jump_statement->break;,for jump_statement->break;,char jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} } = I136

Goto(I97,assignment_expression_list_suffix) = Closure( [3115] ) = {3115} ={ assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I137
Goto(I97,,) = Closure( [2899] ) = {2719, 2899, 2703} ={ assignment_expression->identifierassignment_operatorexpression,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression->identifierassignment_operatorexpression,, } = I138

Goto(I98,;) = Closure( [5990, 5993, 5995, 5998, 6000, 6004, 6005, 5976, 5977, 6008, 6009, 6010, 5981, 5982, 5987] ) = {6009, 5987, 5990, 5993, 5995, 5998, 6000, 6004, 6005, 6008, 5976, 5977, 6010, 5981, 5982} ={ jump_statement->continue;,double jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,char jump_statement->continue;,int jump_statement->continue;,if } = I139

Goto(I99,}) = Closure( [5188, 5189, 5198, 5216, 5217, 5218] ) = {5216, 5217, 5218, 5188, 5189, 5198} ={ compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char compound_statement->{statement_list},# compound_statement->{statement_list},int compound_statement->{statement_list},void } = I140


Goto(I101,)) = Closure( [3919] ) = {3919} ={ function_expression->identifier(expression_list),) } = I141


Goto(I103,>) = Closure( [2023, 2027, 2051] ) = {2051, 2027, 2023} ={ relop->>,number relop->>,identifier relop->>,( } = I46
Goto(I103,/) = Closure( [1879, 1883, 1907] ) = {1907, 1883, 1879} ={ operator->/,number operator->/,identifier operator->/,( } = I47
Goto(I103,-) = Closure( [1735, 1739, 1763] ) = {1739, 1763, 1735} ={ operator->-,identifier operator->-,number operator->-,( } = I48
Goto(I103,<) = Closure( [1979, 1955, 1951] ) = {1979, 1955, 1951} ={ relop-><,number relop-><,identifier relop-><,( } = I49
Goto(I103,+) = Closure( [1663, 1667, 1691] ) = {1667, 1691, 1663} ={ operator->+,identifier operator->+,number operator->+,( } = I50
Goto(I103,>=) = Closure( [2311, 2315, 2339] ) = {2339, 2315, 2311} ={ relop->>=,number relop->>=,identifier relop->>=,( } = I51
Goto(I103,!=) = Closure( [2095, 2099, 2123] ) = {2123, 2099, 2095} ={ relop->!=,number relop->!=,identifier relop->!=,( } = I52
Goto(I103,*) = Closure( [1835, 1807, 1811] ) = {1811, 1835, 1807} ={ operator->*,identifier operator->*,number operator->*,( } = I53
Goto(I103,<=) = Closure( [2239, 2243, 2267] ) = {2243, 2267, 2239} ={ relop-><=,identifier relop-><=,number relop-><=,( } = I54
Goto(I103,==) = Closure( [2167, 2171, 2195] ) = {2171, 2195, 2167} ={ relop->==,identifier relop->==,number relop->==,( } = I55
Goto(I103,arithmetic_expression) = Closure( [3703] ) = {3703} ={ arithmetic_expression->relopprimary_expressionarithmetic_expression,) } = I142
Goto(I103,relop) = Closure( [3631] ) = {1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3631, 1334, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) arithmetic_expression->relopprimary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= } = I67
Goto(I103,operator) = Closure( [3487] ) = {1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3487, 1334, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) arithmetic_expression->operatorprimary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= } = I68

Goto(I104,>) = Closure( [2023, 2027, 2051] ) = {2051, 2027, 2023} ={ relop->>,number relop->>,identifier relop->>,( } = I46
Goto(I104,/) = Closure( [1879, 1883, 1907] ) = {1907, 1883, 1879} ={ operator->/,number operator->/,identifier operator->/,( } = I47
Goto(I104,-) = Closure( [1735, 1739, 1763] ) = {1739, 1763, 1735} ={ operator->-,identifier operator->-,number operator->-,( } = I48
Goto(I104,<) = Closure( [1979, 1955, 1951] ) = {1979, 1955, 1951} ={ relop-><,number relop-><,identifier relop-><,( } = I49
Goto(I104,+) = Closure( [1663, 1667, 1691] ) = {1667, 1691, 1663} ={ operator->+,identifier operator->+,number operator->+,( } = I50
Goto(I104,>=) = Closure( [2311, 2315, 2339] ) = {2339, 2315, 2311} ={ relop->>=,number relop->>=,identifier relop->>=,( } = I51
Goto(I104,!=) = Closure( [2095, 2099, 2123] ) = {2123, 2099, 2095} ={ relop->!=,number relop->!=,identifier relop->!=,( } = I52
Goto(I104,*) = Closure( [1835, 1807, 1811] ) = {1811, 1835, 1807} ={ operator->*,identifier operator->*,number operator->*,( } = I53
Goto(I104,<=) = Closure( [2239, 2243, 2267] ) = {2243, 2267, 2239} ={ relop-><=,identifier relop-><=,number relop-><=,( } = I54
Goto(I104,==) = Closure( [2167, 2171, 2195] ) = {2171, 2195, 2167} ={ relop->==,identifier relop->==,number relop->==,( } = I55
Goto(I104,arithmetic_expression) = Closure( [3559] ) = {3559} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,) } = I143
Goto(I104,relop) = Closure( [3631] ) = {1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3631, 1334, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) arithmetic_expression->relopprimary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= } = I67
Goto(I104,operator) = Closure( [3487] ) = {1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3487, 1334, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) arithmetic_expression->operatorprimary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= } = I68

Goto(I105,)) = Closure( [1604, 1605, 1610, 1614, 1615, 1586, 1587, 1593, 1596, 1597, 1600, 1602] ) = {1600, 1602, 1604, 1605, 1610, 1614, 1615, 1586, 1587, 1593, 1596, 1597} ={ primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> } = I144


Goto(I107,function_expression) = Closure( [3279, 3307] ) = {3307, 3279} ={ expression->function_expression,) expression->function_expression,, } = I69
Goto(I107,number) = Closure( [1442, 1443, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471] ) = {1442, 1443, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I70
Goto(I107,() = Closure( [1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I71
Goto(I107,expression_list) = Closure( [3883, 3855] ) = {3883, 3855} ={ function_expression->identifier(expression_list),) function_expression->identifier(expression_list),, } = I145
Goto(I107,identifier) = Closure( [1370, 1371, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 3783, 3811] ) = {1377, 3811, 1380, 1381, 3783, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370, 1371} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> function_expression->identifier(expression_list),, primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= primary_expression->identifier,, } = I73
Goto(I107,expression) = Closure( [4171] ) = {4099, 3955, 4171} ={ expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) expression_list->expressionexpression_list_suffix,) } = I74
Goto(I107,constant_expression) = Closure( [3207, 3235] ) = {3235, 3207} ={ expression->constant_expression,) expression->constant_expression,, } = I75
Goto(I107,primary_expression) = Closure( [3379, 3351] ) = {1799, 3595, 2059, 2063, 1943, 3351, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 3423, 2275, 2279, 1771, 2159, 1775, 3567, 3711, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number constant_expression->primary_expressionarithmetic_expression,, relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier arithmetic_expression->relopprimary_expressionarithmetic_expression,, arithmetic_expression->,, operator->+,number relop-><,( relop->>=,number } = I76


Goto(I109,function_expression) = Closure( [3279, 3307] ) = {3307, 3279} ={ expression->function_expression,) expression->function_expression,, } = I69
Goto(I109,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471, 1442, 1443] ) = {1442, 1443, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I70
Goto(I109,() = Closure( [1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I71
Goto(I109,identifier) = Closure( [3783, 1370, 1371, 1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399] ) = {1377, 3811, 1380, 1381, 3783, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370, 1371} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> function_expression->identifier(expression_list),, primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= primary_expression->identifier,, } = I73
Goto(I109,expression) = Closure( [4027] ) = {4099, 3955, 4027} ={ expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) expression_list_suffix->,expressionexpression_list_suffix,) } = I146
Goto(I109,constant_expression) = Closure( [3235, 3207] ) = {3235, 3207} ={ expression->constant_expression,) expression->constant_expression,, } = I75
Goto(I109,primary_expression) = Closure( [3379, 3351] ) = {1799, 3595, 2059, 2063, 1943, 3351, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 3423, 2275, 2279, 1771, 2159, 1775, 3567, 3711, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number constant_expression->primary_expressionarithmetic_expression,, relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier arithmetic_expression->relopprimary_expressionarithmetic_expression,, arithmetic_expression->,, operator->+,number relop-><,( relop->>=,number } = I76


Goto(I111,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471, 1442, 1443] ) = {1442, 1443, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I70
Goto(I111,() = Closure( [1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I71
Goto(I111,identifier) = Closure( [1370, 1371, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399] ) = {1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370, 1371} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= primary_expression->identifier,, } = I147
Goto(I111,primary_expression) = Closure( [3639, 3667] ) = {1799, 2059, 3595, 2063, 1943, 2203, 3739, 2207, 1699, 1703, 2087, 1843, 3639, 1847, 1919, 2231, 1727, 1987, 1991, 1871, 2131, 3667, 3451, 2135, 1627, 3423, 1631, 2015, 2275, 2279, 1771, 1775, 3567, 2159, 3711, 1655, 1915, 2303} ={ operator->*,number relop->!=,( arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( operator->-,identifier relop->!=,number operator->/,( arithmetic_expression->relopprimary_expressionarithmetic_expression,, operator->/,identifier relop-><,identifier relop-><=,number operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->relopprimary_expressionarithmetic_expression,) arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,, operator->+,identifier relop->>,number relop->>=,( relop->>=,identifier operator->*,( operator->*,identifier arithmetic_expression->relopprimary_expressionarithmetic_expression,, relop->==,number arithmetic_expression->,, operator->+,number relop-><,( relop->>=,number } = I148

Goto(I112,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471, 1442, 1443] ) = {1442, 1443, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I70
Goto(I112,() = Closure( [1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I71
Goto(I112,identifier) = Closure( [1370, 1371, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399] ) = {1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370, 1371} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= primary_expression->identifier,, } = I147
Goto(I112,primary_expression) = Closure( [3495, 3523] ) = {1799, 2059, 3595, 2063, 1943, 2203, 3739, 2207, 1699, 3495, 1703, 2087, 1843, 1919, 2231, 1847, 1727, 1987, 3523, 1991, 1871, 2131, 3451, 2135, 1627, 3423, 1631, 2015, 2275, 2279, 1771, 1775, 3567, 2159, 3711, 1655, 1915, 2303} ={ operator->*,number relop->!=,( arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,, operator->-,identifier relop->!=,number operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,, operator->+,identifier relop->>,number relop->>=,( relop->>=,identifier operator->*,( operator->*,identifier arithmetic_expression->relopprimary_expressionarithmetic_expression,, relop->==,number arithmetic_expression->,, operator->+,number relop-><,( relop->>=,number } = I149



Goto(I115,,) = Closure( [1207] ) = {903, 919, 1207} ={ declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; } = I17
Goto(I115,declaration_parameter_suffix) = Closure( [828, 829, 833, 834, 839, 842, 845, 847, 850, 852, 856, 857, 860, 861, 862] ) = {833, 834, 839, 860, 842, 861, 845, 847, 850, 852, 856, 857, 828, 829, 862} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char } = I150

Goto(I116,function_expression) = Closure( [3307] ) = {3307} ={ expression->function_expression,) } = I38
Goto(I116,number) = Closure( [1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I39
Goto(I116,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I40
Goto(I116,identifier) = Closure( [1370, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 3811] ) = {1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= } = I41
Goto(I116,expression) = Closure( [6768, 6769, 6773, 6774, 6779, 6782, 6785, 6787, 6790, 6792, 6796, 6797, 6800, 6801, 6802] ) = {6785, 6787, 6790, 6792, 6796, 6797, 6768, 6769, 6800, 6801, 6802, 6773, 6774, 6779, 6782} ={ iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void } = I151
Goto(I116,constant_expression) = Closure( [3235] ) = {3235} ={ expression->constant_expression,) } = I43
Goto(I116,primary_expression) = Closure( [3379] ) = {1799, 3595, 2059, 2063, 1943, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 2275, 2279, 1771, 2159, 1775, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier operator->+,number relop-><,( relop->>=,number } = I44

Goto(I117,}) = Closure( [5189, 5190, 5195, 5198, 5201, 5184, 5203, 5206, 5185, 5208, 5212, 5213, 5216, 5217, 5218] ) = {5184, 5185, 5216, 5217, 5218, 5189, 5190, 5195, 5198, 5201, 5203, 5206, 5208, 5212, 5213} ={ compound_statement->{statement_list},return compound_statement->{statement_list},for compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char compound_statement->{statement_list},int compound_statement->{statement_list},if compound_statement->{statement_list},identifier compound_statement->{statement_list},void compound_statement->{statement_list},while compound_statement->{statement_list},; compound_statement->{statement_list},break compound_statement->{statement_list},} compound_statement->{statement_list},{ compound_statement->{statement_list},continue } = I152



Goto(I120,function_expression) = Closure( [3307] ) = {3307} ={ expression->function_expression,) } = I38
Goto(I120,number) = Closure( [1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I39
Goto(I120,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I40
Goto(I120,identifier) = Closure( [1370, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 3811] ) = {1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= } = I41
Goto(I120,expression) = Closure( [1574, 1578, 1550, 1557, 1560, 1561, 1564, 1566, 1567, 1568, 1569] ) = {1568, 1569, 1574, 1578, 1550, 1557, 1560, 1561, 1564, 1566, 1567} ={ primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; } = I153
Goto(I120,constant_expression) = Closure( [3235] ) = {3235} ={ expression->constant_expression,) } = I43
Goto(I120,primary_expression) = Closure( [3379] ) = {1799, 3595, 2059, 2063, 1943, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 2275, 2279, 1771, 2159, 1775, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier operator->+,number relop-><,( relop->>=,number } = I44

Goto(I121,() = Closure( [3835] ) = {1413, 1416, 1417, 1420, 1422, 3343, 1424, 1425, 4243, 1430, 1434, 1435, 3747, 4135, 1407, 3243, 1334, 1335, 1341, 3775, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 3271, 1479, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 3171, 1507, 3315, 3835, 1406, 3199} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- constant_expression->primary_expressionarithmetic_expression,) primary_expression->number,== primary_expression->number,< expression_list->,) primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),, expression_list->expressionexpression_list_suffix,) primary_expression->number,, expression->function_expression,, primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< expression->function_expression,) primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= expression->constant_expression,, primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,, function_expression->identifier(expression_list),; primary_expression->number,!= expression->constant_expression,) } = I154

Goto(I122,;) = Closure( [6245, 6247, 6250, 6252, 6256, 6257, 6228, 6229, 6260, 6261, 6262, 6233, 6234, 6239, 6242] ) = {6242, 6245, 6247, 6250, 6252, 6256, 6257, 6228, 6229, 6260, 6261, 6262, 6233, 6234, 6239} ={ jump_statement->returnexpression;,void jump_statement->returnexpression;,while jump_statement->returnexpression;,; jump_statement->returnexpression;,break jump_statement->returnexpression;,} jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue jump_statement->returnexpression;,return jump_statement->returnexpression;,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char jump_statement->returnexpression;,int jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier } = I155



Goto(I125,>) = Closure( [2023, 2027, 2051] ) = {2051, 2027, 2023} ={ relop->>,number relop->>,identifier relop->>,( } = I46
Goto(I125,/) = Closure( [1879, 1883, 1907] ) = {1907, 1883, 1879} ={ operator->/,number operator->/,identifier operator->/,( } = I47
Goto(I125,-) = Closure( [1735, 1739, 1763] ) = {1739, 1763, 1735} ={ operator->-,identifier operator->-,number operator->-,( } = I48
Goto(I125,<) = Closure( [1979, 1955, 1951] ) = {1979, 1955, 1951} ={ relop-><,number relop-><,identifier relop-><,( } = I49
Goto(I125,+) = Closure( [1663, 1667, 1691] ) = {1667, 1691, 1663} ={ operator->+,identifier operator->+,number operator->+,( } = I50
Goto(I125,>=) = Closure( [2311, 2315, 2339] ) = {2339, 2315, 2311} ={ relop->>=,number relop->>=,identifier relop->>=,( } = I51
Goto(I125,!=) = Closure( [2095, 2099, 2123] ) = {2123, 2099, 2095} ={ relop->!=,number relop->!=,identifier relop->!=,( } = I52
Goto(I125,*) = Closure( [1835, 1807, 1811] ) = {1811, 1835, 1807} ={ operator->*,identifier operator->*,number operator->*,( } = I53
Goto(I125,<=) = Closure( [2239, 2243, 2267] ) = {2243, 2267, 2239} ={ relop-><=,identifier relop-><=,number relop-><=,( } = I54
Goto(I125,==) = Closure( [2167, 2171, 2195] ) = {2171, 2195, 2167} ={ relop->==,identifier relop->==,number relop->==,( } = I55
Goto(I125,arithmetic_expression) = Closure( [3403] ) = {3403} ={ constant_expression->primary_expressionarithmetic_expression,; } = I156
Goto(I125,relop) = Closure( [3619] ) = {1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 3619, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 1406} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= arithmetic_expression->relopprimary_expressionarithmetic_expression,; primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->number,!= } = I157
Goto(I125,operator) = Closure( [3475] ) = {1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 3475, 1430, 1434, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 1406} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< arithmetic_expression->operatorprimary_expressionarithmetic_expression,; primary_expression->number,+ primary_expression->number,>= primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->number,!= } = I158

Goto(I126,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I126,type_specifier) = Closure( [763, 767, 791] ) = {903, 919, 763, 791, 767} ={ declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I159
Goto(I126,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I126,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I126,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I126,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I126,declaration) = Closure( [7012, 7013, 7016, 7017, 7018, 6984, 6985, 6989, 6990, 6995, 6998, 7001, 7003, 7006, 7008] ) = {3331, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 6984, 6985, 6989, 1358, 6990, 1362, 6995, 6998, 7001, 7003, 7006, 7008, 7012, 7013, 7016, 7017, 7018, 3187, 1406, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 3763, 3259, 1478, 1485, 1488, 1489, 1492, 1494, 1495, 1496, 1497, 1502, 1506} ={ constant_expression->primary_expressionarithmetic_expression,; primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,int primary_expression->identifier,+ iteration_statement->for(declarationexpression;assignment_expression)statement,if primary_expression->identifier,>= iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char expression->constant_expression,; primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= function_expression->identifier(expression_list),; expression->function_expression,; primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= } = I160


Goto(I128,function_expression) = Closure( [3307] ) = {3307} ={ expression->function_expression,) } = I38
Goto(I128,number) = Closure( [1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I39
Goto(I128,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I40
Goto(I128,identifier) = Closure( [1370, 1377, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 3811] ) = {1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= } = I41
Goto(I128,expression) = Closure( [6480, 6481, 6485, 6486, 6491, 6494, 6497, 6499, 6502, 6504, 6508, 6509, 6512, 6513, 6514] ) = {6497, 6499, 6502, 6504, 6508, 6509, 6480, 6481, 6512, 6513, 6514, 6485, 6486, 6491, 6494} ={ selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void } = I161
Goto(I128,constant_expression) = Closure( [3235] ) = {3235} ={ expression->constant_expression,) } = I43
Goto(I128,primary_expression) = Closure( [3379] ) = {1799, 3595, 2059, 2063, 1943, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 2275, 2279, 1771, 2159, 1775, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier operator->+,number relop-><,( relop->>=,number } = I44


Goto(I130,function_expression) = Closure( [3279, 3295] ) = {3295, 3279} ={ expression->function_expression,; expression->function_expression,, } = I23
Goto(I130,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470, 1442, 1443] ) = {1442, 1443, 1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470} ={ primary_expression->number,!= primary_expression->number,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= } = I24
Goto(I130,() = Closure( [1514, 1515, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533, 1538, 1542] ) = {1538, 1542, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1515, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< } = I25
Goto(I130,identifier) = Closure( [3783, 3799, 1370, 1371, 1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398] ) = {1377, 1380, 1381, 3783, 1384, 1386, 1387, 1388, 1389, 1394, 1398, 3799, 1370, 1371} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> function_expression->identifier(expression_list),, primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= function_expression->identifier(expression_list),; primary_expression->identifier,!= primary_expression->identifier,, } = I26
Goto(I130,expression) = Closure( [2811, 2827] ) = {2827, 2811} ={ assignment_expression->identifierassignment_operatorexpression,; assignment_expression->identifierassignment_operatorexpression,, } = I162
Goto(I130,constant_expression) = Closure( [3207, 3223] ) = {3223, 3207} ={ expression->constant_expression,; expression->constant_expression,, } = I28
Goto(I130,primary_expression) = Closure( [3367, 3351] ) = {1799, 2059, 3727, 2063, 1943, 3351, 2203, 2207, 1699, 3367, 1703, 2087, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 2135, 1627, 1631, 2015, 3423, 2275, 2279, 1771, 3583, 3439, 1775, 2159, 3567, 3711, 1655, 1915, 2303} ={ operator->*,number relop->!=,( arithmetic_expression->,; relop->!=,identifier relop-><,number constant_expression->primary_expressionarithmetic_expression,, relop-><=,( relop-><=,identifier operator->-,( constant_expression->primary_expressionarithmetic_expression,; operator->-,identifier relop->!=,number operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( relop->==,identifier operator->+,( operator->+,identifier relop->>,number arithmetic_expression->operatorprimary_expressionarithmetic_expression,, relop->>=,( relop->>=,identifier operator->*,( arithmetic_expression->relopprimary_expressionarithmetic_expression,; arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->*,identifier relop->==,number arithmetic_expression->relopprimary_expressionarithmetic_expression,, arithmetic_expression->,, operator->+,number relop-><,( relop->>=,number } = I29








Goto(I138,identifier) = Closure( [2755, 2739] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2419, 2739, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_operator->+=,( assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I138,assignment_expression) = Closure( [2935] ) = {3007, 2863, 2935} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I163







Goto(I145,)) = Closure( [3919, 3891] ) = {3891, 3919} ={ function_expression->identifier(expression_list),, function_expression->identifier(expression_list),) } = I164

Goto(I146,expression_list_suffix) = Closure( [4063] ) = {4063} ={ expression_list_suffix->,expressionexpression_list_suffix,) } = I165
Goto(I146,,) = Closure( [3991] ) = {1413, 1416, 1417, 1420, 1422, 3343, 1424, 1425, 1430, 3991, 1434, 1435, 3747, 3243, 1334, 1335, 1341, 3775, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 3271, 1479, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 3199, 1506, 3171, 1507, 3315, 1406, 1407} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- constant_expression->primary_expressionarithmetic_expression,) primary_expression->number,== primary_expression->number,< primary_expression->number,+ expression_list_suffix->,expressionexpression_list_suffix,) primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),, expression->function_expression,, primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< expression->function_expression,) primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ expression->constant_expression,) primary_expression->(expression),>= expression->constant_expression,, primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,, primary_expression->number,!= primary_expression->number,, } = I109


Goto(I148,>) = Closure( [2023, 2027, 2051] ) = {2051, 2027, 2023} ={ relop->>,number relop->>,identifier relop->>,( } = I46
Goto(I148,/) = Closure( [1879, 1883, 1907] ) = {1907, 1883, 1879} ={ operator->/,number operator->/,identifier operator->/,( } = I47
Goto(I148,-) = Closure( [1735, 1739, 1763] ) = {1739, 1763, 1735} ={ operator->-,identifier operator->-,number operator->-,( } = I48
Goto(I148,<) = Closure( [1979, 1955, 1951] ) = {1979, 1955, 1951} ={ relop-><,number relop-><,identifier relop-><,( } = I49
Goto(I148,+) = Closure( [1663, 1667, 1691] ) = {1667, 1691, 1663} ={ operator->+,identifier operator->+,number operator->+,( } = I50
Goto(I148,>=) = Closure( [2311, 2315, 2339] ) = {2339, 2315, 2311} ={ relop->>=,number relop->>=,identifier relop->>=,( } = I51
Goto(I148,!=) = Closure( [2095, 2099, 2123] ) = {2123, 2099, 2095} ={ relop->!=,number relop->!=,identifier relop->!=,( } = I52
Goto(I148,*) = Closure( [1835, 1807, 1811] ) = {1811, 1835, 1807} ={ operator->*,identifier operator->*,number operator->*,( } = I53
Goto(I148,<=) = Closure( [2239, 2243, 2267] ) = {2243, 2267, 2239} ={ relop-><=,identifier relop-><=,number relop-><=,( } = I54
Goto(I148,==) = Closure( [2167, 2171, 2195] ) = {2171, 2195, 2167} ={ relop->==,identifier relop->==,number relop->==,( } = I55
Goto(I148,arithmetic_expression) = Closure( [3675, 3703] ) = {3675, 3703} ={ arithmetic_expression->relopprimary_expressionarithmetic_expression,, arithmetic_expression->relopprimary_expressionarithmetic_expression,) } = I166
Goto(I148,relop) = Closure( [3631, 3603] ) = {1413, 1416, 1417, 1420, 1422, 1424, 1425, 3603, 1430, 1434, 1435, 3631, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1479, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406, 1407} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< arithmetic_expression->relopprimary_expressionarithmetic_expression,, primary_expression->number,+ primary_expression->number,>= primary_expression->number,) arithmetic_expression->relopprimary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= primary_expression->number,, } = I111
Goto(I148,operator) = Closure( [3487, 3459] ) = {3459, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3487, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1479, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406, 1407} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) arithmetic_expression->operatorprimary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= primary_expression->number,, } = I112

Goto(I149,>) = Closure( [2023, 2027, 2051] ) = {2051, 2027, 2023} ={ relop->>,number relop->>,identifier relop->>,( } = I46
Goto(I149,/) = Closure( [1879, 1883, 1907] ) = {1907, 1883, 1879} ={ operator->/,number operator->/,identifier operator->/,( } = I47
Goto(I149,-) = Closure( [1735, 1739, 1763] ) = {1739, 1763, 1735} ={ operator->-,identifier operator->-,number operator->-,( } = I48
Goto(I149,<) = Closure( [1979, 1955, 1951] ) = {1979, 1955, 1951} ={ relop-><,number relop-><,identifier relop-><,( } = I49
Goto(I149,+) = Closure( [1663, 1667, 1691] ) = {1667, 1691, 1663} ={ operator->+,identifier operator->+,number operator->+,( } = I50
Goto(I149,>=) = Closure( [2311, 2315, 2339] ) = {2339, 2315, 2311} ={ relop->>=,number relop->>=,identifier relop->>=,( } = I51
Goto(I149,!=) = Closure( [2095, 2099, 2123] ) = {2123, 2099, 2095} ={ relop->!=,number relop->!=,identifier relop->!=,( } = I52
Goto(I149,*) = Closure( [1835, 1807, 1811] ) = {1811, 1835, 1807} ={ operator->*,identifier operator->*,number operator->*,( } = I53
Goto(I149,<=) = Closure( [2239, 2243, 2267] ) = {2243, 2267, 2239} ={ relop-><=,identifier relop-><=,number relop-><=,( } = I54
Goto(I149,==) = Closure( [2167, 2171, 2195] ) = {2171, 2195, 2167} ={ relop->==,identifier relop->==,number relop->==,( } = I55
Goto(I149,arithmetic_expression) = Closure( [3531, 3559] ) = {3531, 3559} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,, arithmetic_expression->operatorprimary_expressionarithmetic_expression,) } = I167
Goto(I149,relop) = Closure( [3631, 3603] ) = {1413, 1416, 1417, 1420, 1422, 1424, 1425, 3603, 1430, 1434, 1435, 3631, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1479, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406, 1407} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< arithmetic_expression->relopprimary_expressionarithmetic_expression,, primary_expression->number,+ primary_expression->number,>= primary_expression->number,) arithmetic_expression->relopprimary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= primary_expression->number,, } = I111
Goto(I149,operator) = Closure( [3487, 3459] ) = {3459, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3487, 1334, 1335, 1341, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 1479, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406, 1407} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) arithmetic_expression->operatorprimary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,, primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),, primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= primary_expression->number,, } = I112

Goto(I150,;) = Closure( [869, 870, 875, 896, 878, 897, 881, 883, 886, 888, 892, 893, 864, 865, 898] ) = {896, 897, 864, 865, 898, 869, 870, 875, 878, 881, 883, 886, 888, 892, 893} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue } = I168

Goto(I151,)) = Closure( [6821, 6823, 6826, 6828, 6832, 6833, 6804, 6805, 6836, 6837, 6838, 6809, 6810, 6815, 6818] ) = {6144, 515, 6148, 6149, 6660, 6661, 6152, 6153, 6154, 6665, 6666, 6671, 6674, 5652, 6677, 5653, 6679, 5657, 6682, 5658, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 3151, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 5752, 5753, 6264, 6265, 5756, 5757, 5758, 6269, 6270, 6275, 6278, 6281, 6283, 6286, 2703, 6288, 659, 6292, 6293, 6804, 6805, 6296, 6297, 6298, 6809, 6810, 2719, 6815, 6818, 5796, 6821, 5797, 6823, 5801, 6826, 5802, 6828, 5807, 6832, 6833, 5810, 6836, 5813, 6837, 5815, 6838, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 720, 721, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6372, 6373, 742, 6882, 744, 6377, 6378, 6887, 748, 6893, 749, 6895, 752, 753, 6898, 754, 6900, 6389, 5364, 6391, 6904, 6905, 6394, 5365, 6396, 6908, 6909, 6910, 6400, 6401, 5369, 5370, 6404, 5381, 6405, 5383, 6406, 5378, 5386, 5388, 5392, 5393, 5904, 5905, 5396, 5397, 5398, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 6890, 371, 6383, 6012, 6013, 6017, 6018, 6386, 5508, 5509, 6023, 5513, 5514, 6026, 6029, 6031, 5519, 6034, 5522, 6036, 5525, 5527, 6040, 6041, 5530, 5532, 6044, 6045, 6046, 5536, 5537, 5375, 5540, 5541, 5542, 443, 5580, 5581, 5585, 5586, 5076, 5077, 5591, 5081, 5082, 5594, 5597, 5599, 5087, 5602, 3043, 5604, 5093, 5090, 5095, 6120, 5608, 5098, 5609, 5100, 6121, 5612, 5613, 5104, 5105, 5614, 6125, 5108, 5109, 5110, 6126, 6131, 6137, 6134, 6139, 6142} ={ jump_statement->returnexpression;,} type_specifier->double,identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return iteration_statement->while(expression)statement,while statement->compound_statement,for iteration_statement->while(expression)statement,; statement->compound_statement,int iteration_statement->while(expression)statement,break statement->compound_statement,if iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier assignment_expression_list->,; statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue jump_statement->return;,return jump_statement->return;,for statement->declaration,float statement->declaration,double statement->declaration,char jump_statement->return;,int jump_statement->return;,if jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} type_specifier->void,identifier jump_statement->return;,{ jump_statement->return;,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if assignment_expression->identifierassignment_operatorexpression,; iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void expression_statement->assignment_expression_list;,return iteration_statement->while(expression)statement,while expression_statement->assignment_expression_list;,for iteration_statement->while(expression)statement,; expression_statement->assignment_expression_list;,int iteration_statement->while(expression)statement,break expression_statement->assignment_expression_list;,if iteration_statement->while(expression)statement,} expression_statement->assignment_expression_list;,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue expression_statement->assignment_expression_list;,void iteration_statement->while(expression)statement,float expression_statement->assignment_expression_list;,while iteration_statement->while(expression)statement,double expression_statement->assignment_expression_list;,; iteration_statement->while(expression)statement,char expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ iteration_statement->for(declarationexpression;assignment_expression)statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double iteration_statement->for(declarationexpression;assignment_expression)statement,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char iteration_statement->for(declarationexpression;assignment_expression)statement,} selection_statement->if(expression)statementelsestatement,while statement->expression_statement,return selection_statement->if(expression)statementelsestatement,; iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue selection_statement->if(expression)statementelsestatement,break statement->expression_statement,for selection_statement->if(expression)statementelsestatement,} iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,void statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue jump_statement->continue;,return jump_statement->continue;,for statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,void type_specifier->char,identifier selection_statement->if(expression)statementelsestatement,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if selection_statement->if(expression)statementelsestatement,void statement->selection_statement,return statement->selection_statement,for jump_statement->break;,identifier statement->selection_statement,int statement->selection_statement,if jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; statement->selection_statement,identifier jump_statement->break;,break statement->selection_statement,void jump_statement->break;,} statement->selection_statement,while statement->selection_statement,; jump_statement->break;,{ jump_statement->break;,continue statement->selection_statement,break statement->selection_statement,} jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char statement->selection_statement,{ statement->selection_statement,continue statement->expression_statement,identifier statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char type_specifier->int,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,int statement->iteration_statement,if compound_statement->{statement_list},return compound_statement->{statement_list},for statement->iteration_statement,identifier compound_statement->{statement_list},int compound_statement->{statement_list},if statement->iteration_statement,void statement->iteration_statement,while statement->iteration_statement,; compound_statement->{statement_list},identifier statement->iteration_statement,break assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement->iteration_statement,} compound_statement->{statement_list},while compound_statement->{statement_list},void compound_statement->{statement_list},; jump_statement->returnexpression;,return statement->iteration_statement,{ compound_statement->{statement_list},break statement->iteration_statement,continue compound_statement->{statement_list},} jump_statement->returnexpression;,for statement->iteration_statement,float statement->iteration_statement,double compound_statement->{statement_list},{ compound_statement->{statement_list},continue statement->iteration_statement,char jump_statement->returnexpression;,int compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,while jump_statement->returnexpression;,void jump_statement->returnexpression;,; jump_statement->returnexpression;,break } = I169


Goto(I153,)) = Closure( [1604, 1605, 1610, 1614, 1586, 1593, 1596, 1597, 1600, 1602, 1603] ) = {1600, 1602, 1603, 1604, 1605, 1610, 1614, 1586, 1593, 1596, 1597} ={ primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> } = I170

Goto(I154,function_expression) = Closure( [3279, 3307] ) = {3307, 3279} ={ expression->function_expression,) expression->function_expression,, } = I69
Goto(I154,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471, 1443, 1442] ) = {1442, 1443, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,, primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I70
Goto(I154,() = Closure( [1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1515, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),, primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I71
Goto(I154,expression_list) = Closure( [3871] ) = {3871} ={ function_expression->identifier(expression_list),; } = I171
Goto(I154,identifier) = Closure( [3783, 1370, 1371, 1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399] ) = {1377, 3811, 1380, 1381, 3783, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370, 1371} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> function_expression->identifier(expression_list),, primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= primary_expression->identifier,, } = I73
Goto(I154,expression) = Closure( [4171] ) = {4099, 3955, 4171} ={ expression_list_suffix->,) expression_list_suffix->,expressionexpression_list_suffix,) expression_list->expressionexpression_list_suffix,) } = I74
Goto(I154,constant_expression) = Closure( [3207, 3235] ) = {3235, 3207} ={ expression->constant_expression,) expression->constant_expression,, } = I75
Goto(I154,primary_expression) = Closure( [3379, 3351] ) = {1799, 3595, 2059, 2063, 1943, 3351, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 3423, 2275, 2279, 1771, 2159, 1775, 3567, 3711, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number constant_expression->primary_expressionarithmetic_expression,, relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier arithmetic_expression->operatorprimary_expressionarithmetic_expression,, relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier arithmetic_expression->relopprimary_expressionarithmetic_expression,, arithmetic_expression->,, operator->+,number relop-><,( relop->>=,number } = I76



Goto(I157,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470, 1442] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= } = I119
Goto(I157,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533, 1538, 1542] ) = {1538, 1542, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< } = I120
Goto(I157,identifier) = Closure( [1370, 1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398] ) = {1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398, 1370} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,!= } = I172
Goto(I157,primary_expression) = Closure( [3655] ) = {1799, 2059, 3727, 2063, 1943, 2203, 2207, 1699, 1703, 2087, 1843, 1919, 2231, 1847, 1727, 1987, 3655, 1991, 1871, 2131, 2135, 1627, 1631, 2015, 2275, 2279, 1771, 3583, 3439, 1775, 2159, 1655, 1915, 2303} ={ operator->*,number relop->!=,( arithmetic_expression->,; relop->!=,identifier relop-><,number relop-><=,( relop-><=,identifier operator->-,( operator->-,identifier relop->!=,number operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( arithmetic_expression->relopprimary_expressionarithmetic_expression,; relop->>,identifier operator->/,number relop->==,( relop->==,identifier operator->+,( operator->+,identifier relop->>,number relop->>=,( relop->>=,identifier operator->*,( arithmetic_expression->relopprimary_expressionarithmetic_expression,; arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->*,identifier relop->==,number operator->+,number relop-><,( relop->>=,number } = I173

Goto(I158,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470, 1442] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= } = I119
Goto(I158,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533, 1538, 1542] ) = {1538, 1542, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< } = I120
Goto(I158,identifier) = Closure( [1370, 1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398] ) = {1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398, 1370} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,!= } = I172
Goto(I158,primary_expression) = Closure( [3511] ) = {1799, 2059, 3727, 2063, 1943, 2203, 2207, 1699, 1703, 2087, 1843, 3511, 1847, 1919, 2231, 1727, 1987, 1991, 1871, 2131, 2135, 1627, 1631, 2015, 2275, 2279, 1771, 3583, 3439, 1775, 2159, 1655, 1915, 2303} ={ operator->*,number relop->!=,( arithmetic_expression->,; relop->!=,identifier relop-><,number relop-><=,( relop-><=,identifier operator->-,( operator->-,identifier relop->!=,number operator->/,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->/,identifier relop-><,identifier relop-><=,number operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( relop->==,identifier operator->+,( operator->+,identifier relop->>,number relop->>=,( relop->>=,identifier operator->*,( arithmetic_expression->relopprimary_expressionarithmetic_expression,; arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->*,identifier relop->==,number operator->+,number relop-><,( relop->>=,number } = I174

Goto(I159,identifier) = Closure( [939, 955] ) = {1011, 1027, 955, 939, 1135, 1119} ={ declaration_parameter_assign->=expression,, declaration_parameter_assign->=expression,; declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter_assign->,; declaration_parameter_assign->,, } = I30
Goto(I159,declaration_parameter) = Closure( [799, 827, 803] ) = {1315, 1171, 803, 827, 799} ={ declaration_parameter_suffix->,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( } = I175

Goto(I160,function_expression) = Closure( [3295] ) = {3295} ={ expression->function_expression,; } = I118
Goto(I160,number) = Closure( [1442, 1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= } = I119
Goto(I160,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533, 1538, 1542] ) = {1538, 1542, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< } = I120
Goto(I160,identifier) = Closure( [1370, 1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398, 3799] ) = {1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398, 3799, 1370} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= function_expression->identifier(expression_list),; primary_expression->identifier,!= } = I121
Goto(I160,expression) = Closure( [7020, 7021, 7025, 7026, 7031, 7034, 7037, 7039, 7042, 7044, 7048, 7049, 7052, 7053, 7054] ) = {7042, 7044, 7048, 7049, 7020, 7021, 7052, 7053, 7054, 7025, 7026, 7031, 7034, 7037, 7039} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; } = I176
Goto(I160,constant_expression) = Closure( [3223] ) = {3223} ={ expression->constant_expression,; } = I124
Goto(I160,primary_expression) = Closure( [3367] ) = {1799, 2059, 3727, 2063, 1943, 2203, 2207, 1699, 3367, 1703, 2087, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 2135, 1627, 1631, 2015, 2275, 2279, 1771, 3583, 3439, 1775, 2159, 1655, 1915, 2303} ={ operator->*,number relop->!=,( arithmetic_expression->,; relop->!=,identifier relop-><,number relop-><=,( relop-><=,identifier operator->-,( constant_expression->primary_expressionarithmetic_expression,; operator->-,identifier relop->!=,number operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( relop->==,identifier operator->+,( operator->+,identifier relop->>,number relop->>=,( relop->>=,identifier operator->*,( arithmetic_expression->relopprimary_expressionarithmetic_expression,; arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->*,identifier relop->==,number operator->+,number relop-><,( relop->>=,number } = I125

Goto(I161,)) = Closure( [6533, 6535, 6538, 6540, 6544, 6545, 6516, 6517, 6548, 6549, 6550, 6521, 6522, 6527, 6530] ) = {6272, 6530, 515, 6020, 6533, 6535, 6538, 5516, 6668, 6540, 2703, 6544, 6545, 659, 6548, 6549, 6550, 5912, 5660, 2719, 5804, 443, 5444, 587, 3151, 5588, 728, 5084, 3043, 5732, 6884, 6380, 6128, 371, 6516, 6517, 6521, 6522, 5372, 6527} ={ jump_statement->return;,else selection_statement->if(expression)statementelsestatement,void type_specifier->double,identifier jump_statement->break;,else selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,break statement->selection_statement,else iteration_statement->while(expression)statement,else selection_statement->if(expression)statementelsestatement,} assignment_expression->identifierassignment_operatorexpression,, selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue type_specifier->void,identifier selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,char jump_statement->continue;,else statement->compound_statement,else assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,else type_specifier->int,identifier statement->jump_statement,else type_specifier->float,identifier assignment_expression_list->,; statement->iteration_statement,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else compound_statement->{statement_list},else assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement->declaration,else iteration_statement->for(declarationexpression;assignment_expression)statement,else selection_statement->if(expression)statementelsestatement,else jump_statement->returnexpression;,else type_specifier->char,identifier selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if statement->expression_statement,else selection_statement->if(expression)statementelsestatement,identifier } = I177


Goto(I163,assignment_expression_list_suffix) = Closure( [2971] ) = {2971} ={ assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; } = I178
Goto(I163,,) = Closure( [2899] ) = {2719, 2899, 2703} ={ assignment_expression->identifierassignment_operatorexpression,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression->identifierassignment_operatorexpression,, } = I138






Goto(I169,selection_statement) = Closure( [5544, 5545, 5549, 5550, 5555, 5558, 5561, 5563, 5566, 5568, 5572, 5573, 5576, 5577, 5578] ) = {5568, 5572, 5573, 5544, 5545, 5576, 5577, 5578, 5549, 5550, 5555, 5558, 5561, 5563, 5566} ={ statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,return statement->selection_statement,for statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break } = I81
Goto(I169,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I169,type_specifier) = Closure( [756, 757, 761, 762, 767, 770, 773, 775, 778, 780, 784, 785, 788, 789, 790] ) = {770, 773, 903, 775, 778, 780, 784, 785, 788, 789, 790, 919, 756, 757, 761, 762, 767} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I82
Goto(I169,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I169,expression_statement) = Closure( [5400, 5401, 5405, 5406, 5417, 5419, 5414, 5422, 5424, 5428, 5429, 5432, 5433, 5434, 5411] ) = {5432, 5411, 5414, 5433, 5417, 5419, 5422, 5424, 5428, 5429, 5400, 5401, 5434, 5405, 5406} ={ statement->expression_statement,float statement->expression_statement,identifier statement->expression_statement,void statement->expression_statement,double statement->expression_statement,while statement->expression_statement,; statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,return statement->expression_statement,for statement->expression_statement,char statement->expression_statement,int statement->expression_statement,if } = I83
Goto(I169,while) = Closure( [6696, 6697, 6701, 6702, 6707, 6710, 6713, 6715, 6718, 6720, 6724, 6725, 6728, 6729, 6730] ) = {6720, 6724, 6725, 6696, 6697, 6728, 6729, 6730, 6701, 6702, 6707, 6710, 6713, 6715, 6718} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,break } = I84
Goto(I169,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I169,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I169,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I169,{) = Closure( [5112, 5113, 5117, 5118, 5123, 5129, 5126, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146] ) = {6144, 5123, 6148, 6149, 5126, 6152, 6153, 6154, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146, 3151, 6264, 6265, 5244, 6269, 6270, 5113, 6275, 6278, 6281, 6283, 6286, 6288, 6292, 6293, 5118, 6296, 6297, 6298, 6372, 6373, 5352, 6377, 6378, 6383, 6386, 5364, 5365, 6389, 6391, 5369, 5370, 6394, 6396, 5375, 6400, 6401, 5378, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5396, 5397, 5398, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 5508, 5509, 5513, 5514, 5519, 5522, 5525, 5527, 5530, 5532, 5536, 5537, 5540, 5541, 5542, 443, 5580, 5581, 5585, 5586, 5591, 5594, 5597, 5599, 5602, 5604, 5608, 5609, 5612, 5613, 5614, 515, 6660, 6661, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 5752, 5753, 5756, 5757, 5758, 2703, 659, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 720, 721, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6882, 742, 6887, 744, 6890, 748, 749, 6893, 6895, 752, 753, 754, 6898, 6900, 6904, 6905, 6908, 6909, 6910, 5904, 5905, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 6012, 6013, 6017, 6018, 6023, 6026, 6029, 6031, 6034, 6036, 6040, 6041, 6044, 6045, 6046, 5076, 5077, 5081, 5082, 5087, 5090, 3043, 5093, 5095, 6120, 6121, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 5112, 6137, 6139, 5117, 6142} ={ jump_statement->returnexpression;,} compound_statement->{statement_list},identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue compound_statement->{statement_list},void jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char compound_statement->{statement_list},while compound_statement->{statement_list},; compound_statement->{statement_list},break compound_statement->{statement_list},} compound_statement->{statement_list},{ compound_statement->{statement_list},continue compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char assignment_expression_list->,; jump_statement->return;,return jump_statement->return;,for statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if compound_statement->{statement_list},for jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue compound_statement->{statement_list},if jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char type_specifier->int,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char type_specifier->double,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue statement->declaration,float statement->declaration,double statement->declaration,char assignment_expression->identifierassignment_operatorexpression,, type_specifier->void,identifier assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char compound_statement->{statement_list},return compound_statement->{statement_list},for compound_statement->{statement_list},int compound_statement->{statement_list},if compound_statement->{statement_list},identifier compound_statement->{statement_list},void assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; jump_statement->returnexpression;,return jump_statement->returnexpression;,for compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void compound_statement->{statement_list},return jump_statement->returnexpression;,while jump_statement->returnexpression;,; compound_statement->{statement_list},int jump_statement->returnexpression;,break } = I85
Goto(I169,return) = Closure( [6180, 6184, 6185, 6188, 6189, 6190, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 6324, 6328, 6329, 6332, 6333, 6334, 6156, 6157, 6161, 6162, 6167, 6173, 6170, 6175, 6178] ) = {3331, 6156, 6157, 6161, 6162, 6167, 6170, 6173, 6175, 6178, 6180, 6184, 6185, 6188, 6189, 6190, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1358, 1362, 3187, 1406, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 3763, 6324, 6328, 6329, 3259, 6332, 6333, 6334, 1478, 1485, 1488, 1489, 1492, 1494, 1495, 1496, 1497, 1502, 1506} ={ constant_expression->primary_expressionarithmetic_expression,; jump_statement->returnexpression;,return jump_statement->returnexpression;,for jump_statement->returnexpression;,int jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,void jump_statement->returnexpression;,while jump_statement->returnexpression;,; jump_statement->returnexpression;,break jump_statement->returnexpression;,} jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= expression->constant_expression,; primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= jump_statement->return;,return jump_statement->return;,for jump_statement->return;,int jump_statement->return;,if jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break function_expression->identifier(expression_list),; jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue expression->function_expression,; jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= } = I86
Goto(I169,jump_statement) = Closure( [5472, 5473, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501, 5504, 5505, 5506] ) = {5472, 5473, 5504, 5505, 5506, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501} ={ statement->jump_statement,return statement->jump_statement,for statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue } = I87
Goto(I169,for) = Closure( [6912, 6913, 6917, 6918, 6923, 6929, 6931, 6934, 6936, 6940, 6941, 6944, 6945, 6946, 6926] ) = {6912, 6913, 6944, 6945, 6946, 6917, 6918, 6923, 6926, 6929, 6931, 6934, 6936, 6940, 6941} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue } = I88
Goto(I169,declaration) = Closure( [5760, 5761, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789, 5792, 5793, 5794] ) = {5760, 5761, 5792, 5793, 5794, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789} ={ statement->declaration,return statement->declaration,for statement->declaration,float statement->declaration,double statement->declaration,char statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue } = I89
Goto(I169,statement) = Closure( [6840, 6841, 6845, 6846, 6851, 6854, 6857, 6859, 6862, 6864, 6868, 6869, 6872, 6873, 6874] ) = {6851, 6854, 6857, 6859, 6862, 6872, 6864, 6868, 6869, 6873, 6840, 6841, 6874, 6845, 6846} ={ iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if } = I179
Goto(I169,if) = Closure( [6408, 6409, 6413, 6414, 6425, 6427, 6430, 6432, 6436, 6437, 6440, 6441, 6442, 6419, 6422] ) = {6432, 6436, 6437, 6408, 6409, 6440, 6441, 6442, 6413, 6414, 6419, 6422, 6425, 6427, 6430} ={ selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,break } = I91
Goto(I169,identifier) = Closure( [2739, 2755] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2739, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I169,assignment_expression_list) = Closure( [5832, 5833, 5837, 5838, 5843, 5846, 5849, 5851, 5854, 5856, 5860, 5861, 5864, 5865, 5866] ) = {5856, 5860, 5861, 5832, 5833, 5864, 5865, 5866, 5837, 5838, 5843, 5846, 5849, 5851, 5854} ={ expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break } = I93
Goto(I169,iteration_statement) = Closure( [5616, 5617, 5621, 5622, 5627, 5630, 5633, 5635, 5638, 5640, 5644, 5645, 5648, 5649, 5650] ) = {5633, 5635, 5638, 5640, 5644, 5645, 5616, 5617, 5648, 5649, 5650, 5621, 5622, 5627, 5630} ={ statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void } = I94
Goto(I169,compound_statement) = Closure( [5688, 5689, 5693, 5694, 5699, 5702, 5705, 5707, 5710, 5712, 5716, 5717, 5720, 5721, 5722] ) = {5699, 5702, 5705, 5707, 5720, 5710, 5712, 5721, 5716, 5717, 5688, 5689, 5722, 5693, 5694} ={ statement->compound_statement,identifier statement->compound_statement,void statement->compound_statement,while statement->compound_statement,; statement->compound_statement,float statement->compound_statement,break statement->compound_statement,} statement->compound_statement,double statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,return statement->compound_statement,for statement->compound_statement,char statement->compound_statement,int statement->compound_statement,if } = I95
Goto(I169,break) = Closure( [6048, 6049, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077, 6080, 6081, 6082] ) = {6048, 6049, 6080, 6081, 6082, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077} ={ jump_statement->break;,return jump_statement->break;,for jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue } = I96
Goto(I169,assignment_expression) = Closure( [3079] ) = {3007, 2863, 3079} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I97
Goto(I169,continue) = Closure( [5940, 5941, 5945, 5946, 5951, 5954, 5957, 5959, 5962, 5964, 5968, 5969, 5972, 5973, 5974] ) = {5954, 5957, 5959, 5962, 5964, 5968, 5969, 5940, 5941, 5972, 5973, 5974, 5945, 5946, 5951} ={ jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier } = I98


Goto(I171,)) = Closure( [3907] ) = {3907} ={ function_expression->identifier(expression_list),; } = I180


Goto(I173,>) = Closure( [2023, 2027, 2051] ) = {2051, 2027, 2023} ={ relop->>,number relop->>,identifier relop->>,( } = I46
Goto(I173,/) = Closure( [1879, 1883, 1907] ) = {1907, 1883, 1879} ={ operator->/,number operator->/,identifier operator->/,( } = I47
Goto(I173,-) = Closure( [1735, 1739, 1763] ) = {1739, 1763, 1735} ={ operator->-,identifier operator->-,number operator->-,( } = I48
Goto(I173,<) = Closure( [1979, 1955, 1951] ) = {1979, 1955, 1951} ={ relop-><,number relop-><,identifier relop-><,( } = I49
Goto(I173,+) = Closure( [1663, 1667, 1691] ) = {1667, 1691, 1663} ={ operator->+,identifier operator->+,number operator->+,( } = I50
Goto(I173,>=) = Closure( [2311, 2315, 2339] ) = {2339, 2315, 2311} ={ relop->>=,number relop->>=,identifier relop->>=,( } = I51
Goto(I173,!=) = Closure( [2095, 2099, 2123] ) = {2123, 2099, 2095} ={ relop->!=,number relop->!=,identifier relop->!=,( } = I52
Goto(I173,*) = Closure( [1835, 1807, 1811] ) = {1811, 1835, 1807} ={ operator->*,identifier operator->*,number operator->*,( } = I53
Goto(I173,<=) = Closure( [2239, 2243, 2267] ) = {2243, 2267, 2239} ={ relop-><=,identifier relop-><=,number relop-><=,( } = I54
Goto(I173,==) = Closure( [2167, 2171, 2195] ) = {2171, 2195, 2167} ={ relop->==,identifier relop->==,number relop->==,( } = I55
Goto(I173,arithmetic_expression) = Closure( [3691] ) = {3691} ={ arithmetic_expression->relopprimary_expressionarithmetic_expression,; } = I181
Goto(I173,relop) = Closure( [3619] ) = {1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 3619, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 1406} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= arithmetic_expression->relopprimary_expressionarithmetic_expression,; primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->number,!= } = I157
Goto(I173,operator) = Closure( [3475] ) = {1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 3475, 1430, 1434, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 1406} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< arithmetic_expression->operatorprimary_expressionarithmetic_expression,; primary_expression->number,+ primary_expression->number,>= primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->number,!= } = I158

Goto(I174,>) = Closure( [2023, 2027, 2051] ) = {2051, 2027, 2023} ={ relop->>,number relop->>,identifier relop->>,( } = I46
Goto(I174,/) = Closure( [1879, 1883, 1907] ) = {1907, 1883, 1879} ={ operator->/,number operator->/,identifier operator->/,( } = I47
Goto(I174,-) = Closure( [1735, 1739, 1763] ) = {1739, 1763, 1735} ={ operator->-,identifier operator->-,number operator->-,( } = I48
Goto(I174,<) = Closure( [1979, 1955, 1951] ) = {1979, 1955, 1951} ={ relop-><,number relop-><,identifier relop-><,( } = I49
Goto(I174,+) = Closure( [1663, 1667, 1691] ) = {1667, 1691, 1663} ={ operator->+,identifier operator->+,number operator->+,( } = I50
Goto(I174,>=) = Closure( [2311, 2315, 2339] ) = {2339, 2315, 2311} ={ relop->>=,number relop->>=,identifier relop->>=,( } = I51
Goto(I174,!=) = Closure( [2095, 2099, 2123] ) = {2123, 2099, 2095} ={ relop->!=,number relop->!=,identifier relop->!=,( } = I52
Goto(I174,*) = Closure( [1835, 1807, 1811] ) = {1811, 1835, 1807} ={ operator->*,identifier operator->*,number operator->*,( } = I53
Goto(I174,<=) = Closure( [2239, 2243, 2267] ) = {2243, 2267, 2239} ={ relop-><=,identifier relop-><=,number relop-><=,( } = I54
Goto(I174,==) = Closure( [2167, 2171, 2195] ) = {2171, 2195, 2167} ={ relop->==,identifier relop->==,number relop->==,( } = I55
Goto(I174,arithmetic_expression) = Closure( [3547] ) = {3547} ={ arithmetic_expression->operatorprimary_expressionarithmetic_expression,; } = I182
Goto(I174,relop) = Closure( [3619] ) = {1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 3619, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 1406} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= arithmetic_expression->relopprimary_expressionarithmetic_expression,; primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->number,!= } = I157
Goto(I174,operator) = Closure( [3475] ) = {1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 3475, 1430, 1434, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 1406} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< arithmetic_expression->operatorprimary_expressionarithmetic_expression,; primary_expression->number,+ primary_expression->number,>= primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->number,!= } = I158

Goto(I175,,) = Closure( [1207] ) = {903, 919, 1207} ={ declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; } = I17
Goto(I175,declaration_parameter_suffix) = Closure( [839, 863, 835] ) = {835, 863, 839} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I183

Goto(I176,;) = Closure( [7078, 7080, 7084, 7085, 7056, 7057, 7088, 7089, 7090, 7061, 7062, 7067, 7070, 7073, 7075] ) = {7073, 7075, 7078, 7080, 2731, 7084, 7085, 7056, 7057, 7088, 7089, 7090, 7061, 7062, 7067, 7070} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} assignment_expression->identifierassignment_operatorexpression,) iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,void } = I184

Goto(I177,selection_statement) = Closure( [5552] ) = {5552} ={ statement->selection_statement,else } = I185
Goto(I177,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I177,type_specifier) = Closure( [764] ) = {919, 764, 903} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration_parameter->identifierdeclaration_parameter_assign,, } = I186
Goto(I177,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I177,expression_statement) = Closure( [5408] ) = {5408} ={ statement->expression_statement,else } = I187
Goto(I177,while) = Closure( [6704] ) = {6704} ={ iteration_statement->while(expression)statement,else } = I188
Goto(I177,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I177,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I177,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I177,{) = Closure( [5120] ) = {5120, 6144, 515, 6148, 6149, 6660, 6661, 6152, 6153, 6154, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 3151, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 6264, 6265, 5752, 5753, 5244, 6269, 6270, 5756, 5757, 5758, 6275, 6278, 6281, 6283, 6286, 2703, 6288, 659, 6292, 6293, 6296, 6297, 6298, 6137, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 753, 720, 721, 754, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6372, 6373, 6882, 742, 5352, 6377, 6378, 6887, 744, 6890, 748, 6383, 749, 6893, 6386, 6895, 5364, 5365, 6389, 6391, 752, 5369, 5370, 6394, 6396, 6900, 6904, 5375, 6400, 6401, 5378, 6908, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5904, 5905, 5396, 5397, 5398, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 6012, 6013, 6017, 6018, 5508, 5509, 6023, 5513, 5514, 6026, 6029, 5519, 6031, 5522, 6898, 6034, 5525, 6036, 5527, 6040, 6041, 5530, 5532, 6044, 6045, 6046, 5536, 5537, 5540, 5541, 5542, 6905, 443, 6909, 5580, 5581, 6910, 5585, 5586, 5076, 5077, 5591, 5081, 5594, 5082, 5597, 5599, 5087, 5602, 5090, 5604, 3043, 5093, 5095, 5608, 5609, 6120, 6121, 5612, 5613, 5614, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 6139, 6142} ={ compound_statement->{statement_list},else jump_statement->returnexpression;,} type_specifier->double,identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier assignment_expression_list->,; statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} jump_statement->return;,return jump_statement->return;,for statement->declaration,{ statement->declaration,continue statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if statement->declaration,float statement->declaration,double statement->declaration,char jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} type_specifier->void,identifier jump_statement->return;,{ jump_statement->return;,continue jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char jump_statement->returnexpression;,while assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ selection_statement->if(expression)statementelsestatement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while selection_statement->if(expression)statementelsestatement,void iteration_statement->for(declarationexpression;assignment_expression)statement,; statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,float selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue jump_statement->continue;,return jump_statement->continue;,for statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if statement->selection_statement,return statement->selection_statement,for jump_statement->break;,identifier statement->selection_statement,int statement->selection_statement,if jump_statement->break;,void jump_statement->break;,while statement->selection_statement,identifier jump_statement->break;,; statement->selection_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,break statement->selection_statement,while jump_statement->break;,} statement->selection_statement,; jump_statement->break;,{ jump_statement->break;,continue statement->selection_statement,break statement->selection_statement,} jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,continue type_specifier->int,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,double statement->iteration_statement,return statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->iteration_statement,int statement->iteration_statement,if compound_statement->{statement_list},return compound_statement->{statement_list},for statement->iteration_statement,identifier compound_statement->{statement_list},int statement->iteration_statement,void compound_statement->{statement_list},if statement->iteration_statement,while statement->iteration_statement,; compound_statement->{statement_list},identifier statement->iteration_statement,break compound_statement->{statement_list},void statement->iteration_statement,} assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; statement->iteration_statement,{ statement->iteration_statement,continue jump_statement->returnexpression;,return jump_statement->returnexpression;,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void jump_statement->returnexpression;,; jump_statement->returnexpression;,break } = I189
Goto(I177,return) = Closure( [6308, 6164] ) = {3331, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 6164, 1430, 1434, 6308, 3763, 1334, 3259, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 3187, 1406} ={ constant_expression->primary_expressionarithmetic_expression,; primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< jump_statement->returnexpression;,else primary_expression->number,+ primary_expression->number,>= jump_statement->return;,else function_expression->identifier(expression_list),; primary_expression->identifier,!= expression->function_expression,; primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= expression->constant_expression,; primary_expression->number,!= } = I190
Goto(I177,jump_statement) = Closure( [5480] ) = {5480} ={ statement->jump_statement,else } = I191
Goto(I177,for) = Closure( [6920] ) = {6920} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I192
Goto(I177,declaration) = Closure( [5768] ) = {5768} ={ statement->declaration,else } = I193
Goto(I177,statement) = Closure( [6566, 6569, 6571, 6574, 6576, 6580, 6581, 6584, 6585, 6586, 6552, 6553, 6557, 6558, 6563] ) = {6563, 6552, 6566, 6569, 6553, 6571, 6574, 6576, 6580, 6581, 6584, 6585, 6586, 6557, 6558} ={ selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if } = I194
Goto(I177,if) = Closure( [6416] ) = {6416} ={ selection_statement->if(expression)statementelsestatement,else } = I195
Goto(I177,identifier) = Closure( [2739, 2755] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2739, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I177,assignment_expression_list) = Closure( [5840] ) = {5840} ={ expression_statement->assignment_expression_list;,else } = I196
Goto(I177,iteration_statement) = Closure( [5624] ) = {5624} ={ statement->iteration_statement,else } = I197
Goto(I177,compound_statement) = Closure( [5696] ) = {5696} ={ statement->compound_statement,else } = I198
Goto(I177,break) = Closure( [6056] ) = {6056} ={ jump_statement->break;,else } = I199
Goto(I177,assignment_expression) = Closure( [3079] ) = {3007, 2863, 3079} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I97
Goto(I177,continue) = Closure( [5948] ) = {5948} ={ jump_statement->continue;,else } = I200






Goto(I183,;) = Closure( [871, 899, 875] ) = {875, 899, 871} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( } = I201

Goto(I184,identifier) = Closure( [2767] ) = {2563, 2567, 2375, 2635, 2767, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_expression->identifierassignment_operatorexpression,) assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I202
Goto(I184,assignment_expression) = Closure( [7109, 7111, 7114, 7116, 7120, 7121, 7092, 7093, 7124, 7125, 7126, 7097, 7098, 7103, 7106] ) = {7106, 7109, 7111, 7114, 7116, 7120, 7121, 7092, 7093, 7124, 7125, 7126, 7097, 7098, 7103} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier } = I203


Goto(I186,identifier) = Closure( [955, 939] ) = {1027, 1011, 939, 955, 1119, 1135} ={ declaration_parameter_assign->=expression,; declaration_parameter_assign->=expression,, declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter_assign->,, declaration_parameter_assign->,; } = I30
Goto(I186,declaration_parameter) = Closure( [800] ) = {800, 1315, 1171} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration_parameter_suffix->,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; } = I204


Goto(I188,() = Closure( [6740] ) = {1413, 1416, 1417, 1420, 1422, 3343, 1424, 1425, 1430, 1434, 1435, 1334, 1341, 3775, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 3271, 1485, 1358, 1488, 1489, 1362, 1363, 6740, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406, 3199} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- constant_expression->primary_expressionarithmetic_expression,) primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) primary_expression->identifier,!= primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< expression->function_expression,) primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) iteration_statement->while(expression)statement,else primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= expression->constant_expression,) } = I205

Goto(I189,selection_statement) = Closure( [5544, 5545, 5549, 5550, 5555, 5558, 5561, 5563, 5566, 5568, 5572, 5573, 5576, 5577, 5578] ) = {5568, 5572, 5573, 5544, 5545, 5576, 5577, 5578, 5549, 5550, 5555, 5558, 5561, 5563, 5566} ={ statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,return statement->selection_statement,for statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break } = I81
Goto(I189,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I189,type_specifier) = Closure( [789, 756, 757, 790, 761, 762, 767, 770, 773, 775, 778, 780, 784, 785, 788] ) = {770, 773, 903, 775, 778, 780, 784, 785, 788, 789, 790, 919, 756, 757, 761, 762, 767} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I82
Goto(I189,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I189,expression_statement) = Closure( [5400, 5401, 5405, 5406, 5411, 5414, 5417, 5419, 5422, 5424, 5428, 5429, 5432, 5433, 5434] ) = {5432, 5411, 5414, 5433, 5417, 5419, 5422, 5424, 5428, 5429, 5400, 5401, 5434, 5405, 5406} ={ statement->expression_statement,float statement->expression_statement,identifier statement->expression_statement,void statement->expression_statement,double statement->expression_statement,while statement->expression_statement,; statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,return statement->expression_statement,for statement->expression_statement,char statement->expression_statement,int statement->expression_statement,if } = I83
Goto(I189,while) = Closure( [6696, 6697, 6701, 6702, 6707, 6710, 6713, 6715, 6718, 6720, 6724, 6725, 6728, 6729, 6730] ) = {6720, 6724, 6725, 6696, 6697, 6728, 6729, 6730, 6701, 6702, 6707, 6710, 6713, 6715, 6718} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,break } = I84
Goto(I189,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I189,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I189,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I189,{) = Closure( [5112, 5113, 5117, 5118, 5123, 5126, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146] ) = {6144, 5123, 6148, 6149, 5126, 6152, 6153, 6154, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146, 3151, 6264, 6265, 5244, 6269, 6270, 5113, 6275, 6278, 6281, 6283, 6286, 6288, 6292, 6293, 5118, 6296, 6297, 6298, 6372, 6373, 5352, 6377, 6378, 6383, 6386, 5364, 5365, 6389, 6391, 5369, 5370, 6394, 6396, 5375, 6400, 6401, 5378, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5396, 5397, 5398, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 5508, 5509, 5513, 5514, 5519, 5522, 5525, 5527, 5530, 5532, 5536, 5537, 5540, 5541, 5542, 443, 5580, 5581, 5585, 5586, 5591, 5594, 5597, 5599, 5602, 5604, 5608, 5609, 5612, 5613, 5614, 515, 6660, 6661, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 5752, 5753, 5756, 5757, 5758, 2703, 659, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 720, 721, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6882, 742, 6887, 744, 6890, 748, 749, 6893, 6895, 752, 753, 754, 6898, 6900, 6904, 6905, 6908, 6909, 6910, 5904, 5905, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 6012, 6013, 6017, 6018, 6023, 6026, 6029, 6031, 6034, 6036, 6040, 6041, 6044, 6045, 6046, 5076, 5077, 5081, 5082, 5087, 5090, 3043, 5093, 5095, 6120, 6121, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 5112, 6137, 6139, 5117, 6142} ={ jump_statement->returnexpression;,} compound_statement->{statement_list},identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue compound_statement->{statement_list},void jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char compound_statement->{statement_list},while compound_statement->{statement_list},; compound_statement->{statement_list},break compound_statement->{statement_list},} compound_statement->{statement_list},{ compound_statement->{statement_list},continue compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char assignment_expression_list->,; jump_statement->return;,return jump_statement->return;,for statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if compound_statement->{statement_list},for jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue compound_statement->{statement_list},if jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char type_specifier->int,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char type_specifier->double,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue statement->declaration,float statement->declaration,double statement->declaration,char assignment_expression->identifierassignment_operatorexpression,, type_specifier->void,identifier assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char compound_statement->{statement_list},return compound_statement->{statement_list},for compound_statement->{statement_list},int compound_statement->{statement_list},if compound_statement->{statement_list},identifier compound_statement->{statement_list},void assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; jump_statement->returnexpression;,return jump_statement->returnexpression;,for compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void compound_statement->{statement_list},return jump_statement->returnexpression;,while jump_statement->returnexpression;,; compound_statement->{statement_list},int jump_statement->returnexpression;,break } = I85
Goto(I189,return) = Closure( [6180, 6184, 6185, 6188, 6189, 6190, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 6324, 6328, 6329, 6332, 6333, 6334, 6173, 6156, 6157, 6161, 6162, 6167, 6170, 6175, 6178] ) = {3331, 6156, 6157, 6161, 6162, 6167, 6170, 6173, 6175, 6178, 6180, 6184, 6185, 6188, 6189, 6190, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1358, 1362, 3187, 1406, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 3763, 6324, 6328, 6329, 3259, 6332, 6333, 6334, 1478, 1485, 1488, 1489, 1492, 1494, 1495, 1496, 1497, 1502, 1506} ={ constant_expression->primary_expressionarithmetic_expression,; jump_statement->returnexpression;,return jump_statement->returnexpression;,for jump_statement->returnexpression;,int jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,void jump_statement->returnexpression;,while jump_statement->returnexpression;,; jump_statement->returnexpression;,break jump_statement->returnexpression;,} jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= expression->constant_expression,; primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= jump_statement->return;,return jump_statement->return;,for jump_statement->return;,int jump_statement->return;,if jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break function_expression->identifier(expression_list),; jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue expression->function_expression,; jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= } = I86
Goto(I189,jump_statement) = Closure( [5472, 5473, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501, 5504, 5505, 5506] ) = {5472, 5473, 5504, 5505, 5506, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501} ={ statement->jump_statement,return statement->jump_statement,for statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue } = I87
Goto(I189,for) = Closure( [6912, 6913, 6917, 6918, 6923, 6926, 6929, 6931, 6936, 6940, 6944, 6934, 6941, 6945, 6946] ) = {6912, 6913, 6944, 6945, 6946, 6917, 6918, 6923, 6926, 6929, 6931, 6934, 6936, 6940, 6941} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue } = I88
Goto(I189,declaration) = Closure( [5760, 5761, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789, 5792, 5793, 5794] ) = {5760, 5761, 5792, 5793, 5794, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789} ={ statement->declaration,return statement->declaration,for statement->declaration,float statement->declaration,double statement->declaration,char statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue } = I89
Goto(I189,statement) = Closure( [5280] ) = {6144, 515, 6148, 6149, 6660, 6661, 6152, 6153, 6154, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 3151, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 6264, 6265, 5752, 5753, 5244, 6269, 6270, 5756, 5757, 5758, 6275, 6278, 6281, 6283, 6286, 2703, 6288, 659, 6292, 6293, 6296, 6297, 6298, 6137, 2719, 5280, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 753, 720, 721, 754, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6372, 6373, 6882, 742, 5352, 6377, 6378, 6887, 744, 6890, 748, 6383, 749, 6893, 6386, 6895, 5364, 5365, 6389, 6391, 752, 5369, 5370, 6394, 6396, 6900, 6904, 5375, 6400, 6401, 5378, 6908, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5904, 5905, 5396, 5397, 5398, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 6012, 6013, 6017, 6018, 5508, 5509, 6023, 5513, 5514, 6026, 6029, 5519, 6031, 5522, 6898, 6034, 5525, 6036, 5527, 6040, 6041, 5530, 5532, 6044, 6045, 6046, 5536, 5537, 5540, 5541, 5542, 6905, 443, 6909, 5580, 5581, 6910, 5585, 5586, 5076, 5077, 5591, 5081, 5594, 5082, 5597, 5599, 5087, 5602, 5090, 5604, 3043, 5093, 5095, 5608, 5609, 6120, 6121, 5612, 5613, 5614, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 6139, 6142} ={ jump_statement->returnexpression;,} type_specifier->double,identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier assignment_expression_list->,; statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} jump_statement->return;,return jump_statement->return;,for statement->declaration,{ statement->declaration,continue statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if statement->declaration,float statement->declaration,double statement->declaration,char jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} type_specifier->void,identifier jump_statement->return;,{ jump_statement->return;,continue jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char jump_statement->returnexpression;,while assignment_expression->identifierassignment_operatorexpression,; statement_list->statementstatement_list,} expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ selection_statement->if(expression)statementelsestatement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while selection_statement->if(expression)statementelsestatement,void iteration_statement->for(declarationexpression;assignment_expression)statement,; statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,float selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue jump_statement->continue;,return jump_statement->continue;,for statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if statement->selection_statement,return statement->selection_statement,for jump_statement->break;,identifier statement->selection_statement,int statement->selection_statement,if jump_statement->break;,void jump_statement->break;,while statement->selection_statement,identifier jump_statement->break;,; statement->selection_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,break statement->selection_statement,while jump_statement->break;,} statement->selection_statement,; jump_statement->break;,{ jump_statement->break;,continue statement->selection_statement,break statement->selection_statement,} jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,continue type_specifier->int,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,double statement->iteration_statement,return statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->iteration_statement,int statement->iteration_statement,if compound_statement->{statement_list},return compound_statement->{statement_list},for statement->iteration_statement,identifier compound_statement->{statement_list},int statement->iteration_statement,void compound_statement->{statement_list},if statement->iteration_statement,while statement->iteration_statement,; compound_statement->{statement_list},identifier statement->iteration_statement,break compound_statement->{statement_list},void statement->iteration_statement,} assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; statement->iteration_statement,{ statement->iteration_statement,continue jump_statement->returnexpression;,return jump_statement->returnexpression;,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void jump_statement->returnexpression;,; jump_statement->returnexpression;,break } = I90
Goto(I189,if) = Closure( [6408, 6409, 6413, 6414, 6419, 6422, 6425, 6427, 6430, 6432, 6436, 6437, 6440, 6441, 6442] ) = {6432, 6436, 6437, 6408, 6409, 6440, 6441, 6442, 6413, 6414, 6419, 6422, 6425, 6427, 6430} ={ selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,break } = I91
Goto(I189,identifier) = Closure( [2739, 2755] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2739, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I189,assignment_expression_list) = Closure( [5832, 5833, 5837, 5838, 5843, 5846, 5849, 5851, 5854, 5856, 5860, 5861, 5864, 5865, 5866] ) = {5856, 5860, 5861, 5832, 5833, 5864, 5865, 5866, 5837, 5838, 5843, 5846, 5849, 5851, 5854} ={ expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break } = I93
Goto(I189,iteration_statement) = Closure( [5616, 5617, 5621, 5622, 5627, 5630, 5633, 5635, 5638, 5640, 5644, 5645, 5648, 5649, 5650] ) = {5633, 5635, 5638, 5640, 5644, 5645, 5616, 5617, 5648, 5649, 5650, 5621, 5622, 5627, 5630} ={ statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void } = I94
Goto(I189,compound_statement) = Closure( [5688, 5689, 5693, 5694, 5699, 5702, 5705, 5707, 5710, 5712, 5716, 5717, 5720, 5721, 5722] ) = {5699, 5702, 5705, 5707, 5720, 5710, 5712, 5721, 5716, 5717, 5688, 5689, 5722, 5693, 5694} ={ statement->compound_statement,identifier statement->compound_statement,void statement->compound_statement,while statement->compound_statement,; statement->compound_statement,float statement->compound_statement,break statement->compound_statement,} statement->compound_statement,double statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,return statement->compound_statement,for statement->compound_statement,char statement->compound_statement,int statement->compound_statement,if } = I95
Goto(I189,break) = Closure( [6048, 6049, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077, 6080, 6081, 6082] ) = {6048, 6049, 6080, 6081, 6082, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077} ={ jump_statement->break;,return jump_statement->break;,for jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue } = I96
Goto(I189,assignment_expression) = Closure( [3079] ) = {3007, 2863, 3079} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I97
Goto(I189,continue) = Closure( [5940, 5941, 5945, 5946, 5951, 5954, 5957, 5959, 5962, 5964, 5968, 5969, 5972, 5973, 5974] ) = {5954, 5957, 5959, 5962, 5964, 5968, 5969, 5940, 5941, 5972, 5973, 5974, 5945, 5946, 5951} ={ jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier } = I98
Goto(I189,statement_list) = Closure( [5156] ) = {5156} ={ compound_statement->{statement_list},else } = I206

Goto(I190,function_expression) = Closure( [3295] ) = {3295} ={ expression->function_expression,; } = I118
Goto(I190,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470, 1442] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= } = I119
Goto(I190,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533, 1538, 1542] ) = {1538, 1542, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< } = I120
Goto(I190,identifier) = Closure( [3799, 1370, 1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398] ) = {1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398, 3799, 1370} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= function_expression->identifier(expression_list),; primary_expression->identifier,!= } = I121
Goto(I190,expression) = Closure( [6200] ) = {6200} ={ jump_statement->returnexpression;,else } = I207
Goto(I190,;) = Closure( [6344] ) = {6344} ={ jump_statement->return;,else } = I208
Goto(I190,constant_expression) = Closure( [3223] ) = {3223} ={ expression->constant_expression,; } = I124
Goto(I190,primary_expression) = Closure( [3367] ) = {1799, 2059, 3727, 2063, 1943, 2203, 2207, 1699, 3367, 1703, 2087, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 2135, 1627, 1631, 2015, 2275, 2279, 1771, 3583, 3439, 1775, 2159, 1655, 1915, 2303} ={ operator->*,number relop->!=,( arithmetic_expression->,; relop->!=,identifier relop-><,number relop-><=,( relop-><=,identifier operator->-,( constant_expression->primary_expressionarithmetic_expression,; operator->-,identifier relop->!=,number operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( relop->==,identifier operator->+,( operator->+,identifier relop->>,number relop->>=,( relop->>=,identifier operator->*,( arithmetic_expression->relopprimary_expressionarithmetic_expression,; arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->*,identifier relop->==,number operator->+,number relop-><,( relop->>=,number } = I125


Goto(I192,() = Closure( [6956] ) = {515, 587, 6956, 659, 371, 755, 727, 443, 731} ={ type_specifier->double,identifier type_specifier->float,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,else type_specifier->void,identifier type_specifier->char,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( type_specifier->int,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I209


Goto(I194,else) = Closure( [6599, 6588, 6602, 6605, 6589, 6607, 6610, 6612, 6616, 6617, 6620, 6621, 6622, 6593, 6594] ) = {6144, 515, 6660, 6661, 6148, 6149, 6152, 6153, 6154, 6665, 6666, 6671, 6674, 5652, 6677, 5653, 6679, 5657, 6682, 5658, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 3151, 5724, 5725, 5729, 6125, 5730, 6126, 5735, 5738, 5741, 5743, 5746, 5748, 6264, 6265, 5752, 5753, 5756, 5757, 5758, 6269, 6270, 6275, 6278, 6281, 6283, 6286, 2703, 6288, 659, 6292, 6293, 6296, 6297, 6298, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 753, 720, 721, 754, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6372, 6373, 742, 6887, 744, 6377, 6890, 6882, 748, 6893, 749, 6383, 6895, 752, 6386, 6898, 5364, 6389, 5365, 6391, 6900, 6904, 6394, 6905, 6396, 6908, 6909, 5375, 6400, 6401, 5378, 6910, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5904, 5905, 5392, 5393, 5396, 5397, 5398, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 6378, 5468, 5469, 5470, 5082, 371, 6012, 6013, 6017, 6018, 5508, 5509, 5369, 6023, 5513, 6026, 5514, 5370, 6029, 5519, 6031, 5522, 6034, 6036, 5525, 5527, 6040, 6041, 5530, 5532, 6044, 6045, 6046, 5536, 5537, 5540, 5541, 5542, 443, 6588, 6589, 6593, 6594, 6599, 6602, 5580, 6605, 5581, 6607, 5585, 6610, 5586, 5076, 5077, 6612, 5591, 6616, 6617, 5594, 5081, 6620, 5597, 6621, 5599, 5087, 6622, 5602, 5090, 3043, 5093, 5604, 5095, 6120, 6121, 5098, 5608, 5100, 5609, 5612, 5613, 5104, 5105, 5614, 6131, 5108, 5109, 6134, 5110, 6137, 6139, 6142} ={ jump_statement->returnexpression;,} type_specifier->double,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return iteration_statement->while(expression)statement,while statement->compound_statement,for iteration_statement->while(expression)statement,; statement->compound_statement,int iteration_statement->while(expression)statement,break statement->compound_statement,if iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier assignment_expression_list->,; statement->declaration,return statement->declaration,for statement->declaration,int jump_statement->returnexpression;,int statement->declaration,if jump_statement->returnexpression;,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} jump_statement->return;,return jump_statement->return;,for statement->declaration,{ statement->declaration,continue statement->declaration,float statement->declaration,double statement->declaration,char jump_statement->return;,int jump_statement->return;,if jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} type_specifier->void,identifier jump_statement->return;,{ jump_statement->return;,continue jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(expression)statementelsestatement,int iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ iteration_statement->for(declarationexpression;assignment_expression)statement,while declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue selection_statement->if(expression)statementelsestatement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float selection_statement->if(expression)statementelsestatement,void iteration_statement->for(declarationexpression;assignment_expression)statement,break statement->expression_statement,return selection_statement->if(expression)statementelsestatement,while statement->expression_statement,for selection_statement->if(expression)statementelsestatement,; iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ selection_statement->if(expression)statementelsestatement,break iteration_statement->for(declarationexpression;assignment_expression)statement,continue selection_statement->if(expression)statementelsestatement,} iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,char selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} jump_statement->continue;,return jump_statement->continue;,for statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue selection_statement->if(expression)statementelsestatement,if statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char compound_statement->{statement_list},if type_specifier->char,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if statement->selection_statement,return statement->selection_statement,for statement->expression_statement,int jump_statement->break;,identifier statement->selection_statement,int jump_statement->break;,void statement->selection_statement,if statement->expression_statement,if jump_statement->break;,while statement->selection_statement,identifier jump_statement->break;,; statement->selection_statement,void jump_statement->break;,break jump_statement->break;,} statement->selection_statement,while statement->selection_statement,; jump_statement->break;,{ jump_statement->break;,continue statement->selection_statement,break statement->selection_statement,} jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char type_specifier->int,identifier selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void statement->iteration_statement,return selection_statement->if(expression)statementelsestatement,while statement->iteration_statement,for selection_statement->if(expression)statementelsestatement,; statement->iteration_statement,int selection_statement->if(expression)statementelsestatement,break statement->iteration_statement,if compound_statement->{statement_list},return compound_statement->{statement_list},for selection_statement->if(expression)statementelsestatement,} statement->iteration_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->iteration_statement,void compound_statement->{statement_list},int selection_statement->if(expression)statementelsestatement,float statement->iteration_statement,while selection_statement->if(expression)statementelsestatement,double statement->iteration_statement,; compound_statement->{statement_list},identifier selection_statement->if(expression)statementelsestatement,char statement->iteration_statement,break compound_statement->{statement_list},void assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while statement->iteration_statement,} compound_statement->{statement_list},; jump_statement->returnexpression;,return jump_statement->returnexpression;,for compound_statement->{statement_list},break statement->iteration_statement,{ compound_statement->{statement_list},} statement->iteration_statement,continue statement->iteration_statement,float statement->iteration_statement,double compound_statement->{statement_list},{ compound_statement->{statement_list},continue statement->iteration_statement,char jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double jump_statement->returnexpression;,void compound_statement->{statement_list},char jump_statement->returnexpression;,while jump_statement->returnexpression;,; jump_statement->returnexpression;,break } = I210

Goto(I195,() = Closure( [6452] ) = {1413, 1416, 1417, 1420, 1422, 3343, 1424, 1425, 1430, 1434, 1435, 6452, 1334, 1341, 3775, 1344, 1345, 1348, 1350, 1478, 1352, 1353, 3271, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1406, 3199} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- constant_expression->primary_expressionarithmetic_expression,) primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) selection_statement->if(expression)statementelsestatement,else primary_expression->identifier,!= primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->(expression),!= primary_expression->identifier,== primary_expression->identifier,< expression->function_expression,) primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->number,!= expression->constant_expression,) } = I211

Goto(I196,;) = Closure( [5876] ) = {5876} ={ expression_statement->assignment_expression_list;,else } = I212



Goto(I199,;) = Closure( [6092] ) = {6092} ={ jump_statement->break;,else } = I213

Goto(I200,;) = Closure( [5984] ) = {5984} ={ jump_statement->continue;,else } = I214


Goto(I202,*=) = Closure( [2599, 2603, 2627] ) = {2627, 2603, 2599} ={ assignment_operator->*=,number assignment_operator->*=,identifier assignment_operator->*=,( } = I129
Goto(I202,assignment_operator) = Closure( [2803] ) = {1413, 1416, 1417, 1420, 1422, 3343, 1424, 1425, 1430, 1434, 1435, 1334, 1341, 3775, 1344, 1345, 1348, 1350, 3271, 1352, 1353, 1478, 1485, 1358, 1488, 1489, 1362, 1363, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 2803, 1406, 3199} ={ primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- constant_expression->primary_expressionarithmetic_expression,) primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) primary_expression->identifier,!= primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- expression->function_expression,) primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->identifier,) primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) assignment_expression->identifierassignment_operatorexpression,) primary_expression->number,!= expression->constant_expression,) } = I215
Goto(I202,-=) = Closure( [2555, 2527, 2531] ) = {2555, 2531, 2527} ={ assignment_operator->-=,number assignment_operator->-=,identifier assignment_operator->-=,( } = I131
Goto(I202,/=) = Closure( [2671, 2675, 2699] ) = {2675, 2699, 2671} ={ assignment_operator->/=,identifier assignment_operator->/=,number assignment_operator->/=,( } = I132
Goto(I202,=) = Closure( [2411, 2383, 2387] ) = {2387, 2411, 2383} ={ assignment_operator->=,identifier assignment_operator->=,number assignment_operator->=,( } = I133
Goto(I202,+=) = Closure( [2483, 2455, 2459] ) = {2483, 2459, 2455} ={ assignment_operator->+=,number assignment_operator->+=,identifier assignment_operator->+=,( } = I134

Goto(I203,)) = Closure( [7142, 7145, 7147, 7150, 7152, 7156, 7157, 7128, 7129, 7160, 7161, 7162, 7133, 7134, 7139] ) = {6144, 515, 6148, 6149, 6660, 6661, 6152, 6153, 6154, 6665, 6666, 6671, 6674, 5652, 6677, 5653, 6679, 5657, 6682, 5658, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 6120, 587, 6121, 3151, 7139, 5613, 5614, 5724, 5725, 5729, 6125, 5730, 6126, 5735, 5738, 5741, 5743, 5746, 5748, 5752, 5753, 6264, 6265, 5756, 5757, 5758, 6269, 6270, 6131, 6275, 6278, 6281, 6283, 6286, 2703, 6288, 659, 6292, 6293, 6296, 6297, 6298, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 7161, 5824, 5825, 7162, 5828, 5829, 5830, 720, 721, 754, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6372, 6373, 742, 6882, 744, 6377, 6890, 6378, 748, 749, 6893, 6895, 752, 753, 6386, 6898, 6900, 6389, 5364, 6391, 6904, 6905, 6394, 5365, 6396, 6908, 6909, 6910, 6400, 6401, 5378, 5370, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5904, 5905, 5396, 5397, 5398, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 6887, 5468, 5469, 5470, 371, 6383, 6012, 6013, 6017, 6018, 5508, 5509, 5369, 6023, 5513, 6026, 5514, 6029, 6031, 5519, 5522, 6034, 6036, 5525, 5527, 6040, 6041, 5530, 5532, 6044, 6045, 6046, 5536, 5537, 5375, 5540, 5541, 5542, 443, 5580, 5581, 5585, 5586, 5076, 5077, 5591, 7128, 7129, 5594, 5081, 5082, 5597, 7133, 5599, 7134, 5087, 5090, 3043, 5604, 5093, 7142, 5095, 5608, 5609, 5602, 7145, 7147, 5098, 7150, 5100, 5104, 5105, 7152, 5612, 7156, 7157, 6134, 5108, 7160, 6137, 5109, 6139, 5110, 6142} ={ jump_statement->returnexpression;,} type_specifier->double,identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return iteration_statement->while(expression)statement,while statement->compound_statement,for iteration_statement->while(expression)statement,; statement->compound_statement,int iteration_statement->while(expression)statement,break statement->compound_statement,if iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char jump_statement->returnexpression;,return type_specifier->float,identifier jump_statement->returnexpression;,for assignment_expression_list->,; iteration_statement->for(declarationexpression;assignment_expression)statement,identifier statement->iteration_statement,double statement->iteration_statement,char statement->declaration,return statement->declaration,for statement->declaration,int jump_statement->returnexpression;,int statement->declaration,if jump_statement->returnexpression;,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue jump_statement->return;,return jump_statement->return;,for statement->declaration,float statement->declaration,double statement->declaration,char jump_statement->return;,int jump_statement->return;,if jump_statement->returnexpression;,identifier jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} type_specifier->void,identifier jump_statement->return;,{ jump_statement->return;,continue jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} iteration_statement->for(declarationexpression;assignment_expression)statement,double expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,char expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} selection_statement->if(expression)statementelsestatement,int iteration_statement->for(declarationexpression;assignment_expression)statement,void selection_statement->if(expression)statementelsestatement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double selection_statement->if(expression)statementelsestatement,void iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} selection_statement->if(expression)statementelsestatement,while statement->expression_statement,return selection_statement->if(expression)statementelsestatement,; iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue selection_statement->if(expression)statementelsestatement,break statement->expression_statement,for selection_statement->if(expression)statementelsestatement,} iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void statement->expression_statement,if selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue jump_statement->continue;,return jump_statement->continue;,for statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,identifier statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier selection_statement->if(expression)statementelsestatement,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if statement->selection_statement,return statement->selection_statement,for statement->expression_statement,int jump_statement->break;,identifier statement->selection_statement,int jump_statement->break;,void statement->selection_statement,if jump_statement->break;,while jump_statement->break;,; statement->selection_statement,identifier statement->selection_statement,void jump_statement->break;,break jump_statement->break;,} statement->selection_statement,while statement->selection_statement,; jump_statement->break;,{ jump_statement->break;,continue statement->selection_statement,break statement->selection_statement,} jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char statement->selection_statement,{ statement->selection_statement,continue statement->expression_statement,identifier statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char type_specifier->int,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,int statement->iteration_statement,if compound_statement->{statement_list},return compound_statement->{statement_list},for statement->iteration_statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for statement->iteration_statement,void compound_statement->{statement_list},int compound_statement->{statement_list},if statement->iteration_statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,int statement->iteration_statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,if compound_statement->{statement_list},identifier compound_statement->{statement_list},void assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement->iteration_statement,} compound_statement->{statement_list},while iteration_statement->for(declarationexpression;assignment_expression)statement,void compound_statement->{statement_list},; statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; compound_statement->{statement_list},break iteration_statement->for(declarationexpression;assignment_expression)statement,break compound_statement->{statement_list},} compound_statement->{statement_list},{ compound_statement->{statement_list},continue iteration_statement->for(declarationexpression;assignment_expression)statement,} statement->iteration_statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue jump_statement->returnexpression;,void compound_statement->{statement_list},float iteration_statement->for(declarationexpression;assignment_expression)statement,float jump_statement->returnexpression;,while compound_statement->{statement_list},double jump_statement->returnexpression;,; compound_statement->{statement_list},char jump_statement->returnexpression;,break } = I216

Goto(I204,,) = Closure( [1207] ) = {903, 919, 1207} ={ declaration_parameter->identifierdeclaration_parameter_assign,, declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter_suffix->,declaration_parameterdeclaration_parameter_suffix,; } = I17
Goto(I204,declaration_parameter_suffix) = Closure( [836] ) = {836} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else } = I217

Goto(I205,function_expression) = Closure( [3307] ) = {3307} ={ expression->function_expression,) } = I38
Goto(I205,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471, 1442] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I39
Goto(I205,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I40
Goto(I205,identifier) = Closure( [1370, 1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399] ) = {1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= } = I41
Goto(I205,expression) = Closure( [6776] ) = {6776} ={ iteration_statement->while(expression)statement,else } = I218
Goto(I205,constant_expression) = Closure( [3235] ) = {3235} ={ expression->constant_expression,) } = I43
Goto(I205,primary_expression) = Closure( [3379] ) = {1799, 3595, 2059, 2063, 1943, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 2275, 2279, 1771, 2159, 1775, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier operator->+,number relop-><,( relop->>=,number } = I44

Goto(I206,}) = Closure( [5192] ) = {5192} ={ compound_statement->{statement_list},else } = I219

Goto(I207,;) = Closure( [6236] ) = {6236} ={ jump_statement->returnexpression;,else } = I220


Goto(I209,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I209,type_specifier) = Closure( [791, 763, 767] ) = {919, 903, 763, 791, 767} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,( declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,number declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I159
Goto(I209,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I209,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I209,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I209,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I209,declaration) = Closure( [6992] ) = {3331, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 3763, 1334, 3259, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1485, 1358, 6992, 1488, 1362, 1489, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 3187, 1406} ={ constant_expression->primary_expressionarithmetic_expression,; primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= function_expression->identifier(expression_list),; primary_expression->identifier,!= expression->function_expression,; primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ iteration_statement->for(declarationexpression;assignment_expression)statement,else primary_expression->(expression),<= primary_expression->identifier,>= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= expression->constant_expression,; primary_expression->number,!= } = I221

Goto(I210,selection_statement) = Closure( [5544, 5545, 5549, 5550, 5555, 5558, 5561, 5563, 5566, 5568, 5572, 5573, 5576, 5577, 5578] ) = {5568, 5572, 5573, 5544, 5545, 5576, 5577, 5578, 5549, 5550, 5555, 5558, 5561, 5563, 5566} ={ statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,return statement->selection_statement,for statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break } = I81
Goto(I210,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I210,type_specifier) = Closure( [789, 756, 757, 790, 761, 762, 767, 770, 773, 775, 778, 780, 784, 785, 788] ) = {770, 773, 903, 775, 778, 780, 784, 785, 788, 789, 790, 919, 756, 757, 761, 762, 767} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I82
Goto(I210,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I210,expression_statement) = Closure( [5400, 5401, 5411, 5414, 5417, 5419, 5422, 5424, 5428, 5429, 5432, 5433, 5434, 5405, 5406] ) = {5432, 5411, 5414, 5433, 5417, 5419, 5422, 5424, 5428, 5429, 5400, 5401, 5434, 5405, 5406} ={ statement->expression_statement,float statement->expression_statement,identifier statement->expression_statement,void statement->expression_statement,double statement->expression_statement,while statement->expression_statement,; statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,return statement->expression_statement,for statement->expression_statement,char statement->expression_statement,int statement->expression_statement,if } = I83
Goto(I210,while) = Closure( [6696, 6697, 6701, 6702, 6707, 6710, 6713, 6715, 6718, 6720, 6724, 6725, 6728, 6729, 6730] ) = {6720, 6724, 6725, 6696, 6697, 6728, 6729, 6730, 6701, 6702, 6707, 6710, 6713, 6715, 6718} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,break } = I84
Goto(I210,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I210,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I210,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I210,{) = Closure( [5118, 5112, 5113, 5117, 5123, 5126, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146] ) = {6144, 5123, 6148, 6149, 5126, 6152, 6153, 6154, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146, 3151, 6264, 6265, 5244, 6269, 6270, 5113, 6275, 6278, 6281, 6283, 6286, 6288, 6292, 6293, 5118, 6296, 6297, 6298, 6372, 6373, 5352, 6377, 6378, 6383, 6386, 5364, 5365, 6389, 6391, 5369, 5370, 6394, 6396, 5375, 6400, 6401, 5378, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5396, 5397, 5398, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 5508, 5509, 5513, 5514, 5519, 5522, 5525, 5527, 5530, 5532, 5536, 5537, 5540, 5541, 5542, 443, 5580, 5581, 5585, 5586, 5591, 5594, 5597, 5599, 5602, 5604, 5608, 5609, 5612, 5613, 5614, 515, 6660, 6661, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 5752, 5753, 5756, 5757, 5758, 2703, 659, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 720, 721, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6882, 742, 6887, 744, 6890, 748, 749, 6893, 6895, 752, 753, 754, 6898, 6900, 6904, 6905, 6908, 6909, 6910, 5904, 5905, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 6012, 6013, 6017, 6018, 6023, 6026, 6029, 6031, 6034, 6036, 6040, 6041, 6044, 6045, 6046, 5076, 5077, 5081, 5082, 5087, 5090, 3043, 5093, 5095, 6120, 6121, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 5112, 6137, 6139, 5117, 6142} ={ jump_statement->returnexpression;,} compound_statement->{statement_list},identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue compound_statement->{statement_list},void jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char compound_statement->{statement_list},while compound_statement->{statement_list},; compound_statement->{statement_list},break compound_statement->{statement_list},} compound_statement->{statement_list},{ compound_statement->{statement_list},continue compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char assignment_expression_list->,; jump_statement->return;,return jump_statement->return;,for statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if compound_statement->{statement_list},for jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue compound_statement->{statement_list},if jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char type_specifier->int,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char type_specifier->double,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue statement->declaration,float statement->declaration,double statement->declaration,char assignment_expression->identifierassignment_operatorexpression,, type_specifier->void,identifier assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char compound_statement->{statement_list},return compound_statement->{statement_list},for compound_statement->{statement_list},int compound_statement->{statement_list},if compound_statement->{statement_list},identifier compound_statement->{statement_list},void assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; jump_statement->returnexpression;,return jump_statement->returnexpression;,for compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void compound_statement->{statement_list},return jump_statement->returnexpression;,while jump_statement->returnexpression;,; compound_statement->{statement_list},int jump_statement->returnexpression;,break } = I85
Goto(I210,return) = Closure( [6180, 6184, 6185, 6188, 6189, 6190, 6161, 6162, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 6324, 6328, 6329, 6332, 6333, 6334, 6156, 6157, 6167, 6170, 6173, 6175, 6178] ) = {3331, 6156, 6157, 6161, 6162, 6167, 6170, 6173, 6175, 6178, 6180, 6184, 6185, 6188, 6189, 6190, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1358, 1362, 3187, 1406, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 3763, 6324, 6328, 6329, 3259, 6332, 6333, 6334, 1478, 1485, 1488, 1489, 1492, 1494, 1495, 1496, 1497, 1502, 1506} ={ constant_expression->primary_expressionarithmetic_expression,; jump_statement->returnexpression;,return jump_statement->returnexpression;,for jump_statement->returnexpression;,int jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,void jump_statement->returnexpression;,while jump_statement->returnexpression;,; jump_statement->returnexpression;,break jump_statement->returnexpression;,} jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= expression->constant_expression,; primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= jump_statement->return;,return jump_statement->return;,for jump_statement->return;,int jump_statement->return;,if jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break function_expression->identifier(expression_list),; jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue expression->function_expression,; jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= } = I86
Goto(I210,jump_statement) = Closure( [5472, 5473, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501, 5504, 5505, 5506] ) = {5472, 5473, 5504, 5505, 5506, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501} ={ statement->jump_statement,return statement->jump_statement,for statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue } = I87
Goto(I210,for) = Closure( [6912, 6913, 6917, 6923, 6926, 6918, 6929, 6931, 6934, 6936, 6940, 6941, 6944, 6945, 6946] ) = {6912, 6913, 6944, 6945, 6946, 6917, 6918, 6923, 6926, 6929, 6931, 6934, 6936, 6940, 6941} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue } = I88
Goto(I210,declaration) = Closure( [5760, 5761, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789, 5792, 5793, 5794] ) = {5760, 5761, 5792, 5793, 5794, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789} ={ statement->declaration,return statement->declaration,for statement->declaration,float statement->declaration,double statement->declaration,char statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue } = I89
Goto(I210,statement) = Closure( [6624, 6625, 6629, 6630, 6635, 6638, 6641, 6643, 6646, 6648, 6652, 6653, 6656, 6657, 6658] ) = {6624, 6625, 6656, 6657, 6658, 6629, 6630, 6635, 6638, 6641, 6643, 6646, 6648, 6652, 6653} ={ selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue } = I222
Goto(I210,if) = Closure( [6408, 6409, 6413, 6419, 6422, 6425, 6427, 6430, 6432, 6436, 6437, 6440, 6441, 6442, 6414] ) = {6432, 6436, 6437, 6408, 6409, 6440, 6441, 6442, 6413, 6414, 6419, 6422, 6425, 6427, 6430} ={ selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,break } = I91
Goto(I210,identifier) = Closure( [2739, 2755] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2739, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I210,assignment_expression_list) = Closure( [5832, 5833, 5837, 5838, 5843, 5846, 5849, 5851, 5854, 5856, 5860, 5861, 5864, 5865, 5866] ) = {5856, 5860, 5861, 5832, 5833, 5864, 5865, 5866, 5837, 5838, 5843, 5846, 5849, 5851, 5854} ={ expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break } = I93
Goto(I210,iteration_statement) = Closure( [5616, 5617, 5621, 5622, 5627, 5630, 5633, 5635, 5638, 5640, 5644, 5645, 5648, 5649, 5650] ) = {5633, 5635, 5638, 5640, 5644, 5645, 5616, 5617, 5648, 5649, 5650, 5621, 5622, 5627, 5630} ={ statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void } = I94
Goto(I210,compound_statement) = Closure( [5688, 5689, 5693, 5694, 5699, 5702, 5705, 5707, 5710, 5712, 5716, 5717, 5720, 5721, 5722] ) = {5699, 5702, 5705, 5707, 5720, 5710, 5712, 5721, 5716, 5717, 5688, 5689, 5722, 5693, 5694} ={ statement->compound_statement,identifier statement->compound_statement,void statement->compound_statement,while statement->compound_statement,; statement->compound_statement,float statement->compound_statement,break statement->compound_statement,} statement->compound_statement,double statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,return statement->compound_statement,for statement->compound_statement,char statement->compound_statement,int statement->compound_statement,if } = I95
Goto(I210,break) = Closure( [6048, 6049, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077, 6080, 6081, 6082] ) = {6048, 6049, 6080, 6081, 6082, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077} ={ jump_statement->break;,return jump_statement->break;,for jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue } = I96
Goto(I210,assignment_expression) = Closure( [3079] ) = {3007, 2863, 3079} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I97
Goto(I210,continue) = Closure( [5940, 5941, 5945, 5946, 5951, 5954, 5957, 5959, 5962, 5964, 5968, 5969, 5972, 5973, 5974] ) = {5954, 5957, 5959, 5962, 5964, 5968, 5969, 5940, 5941, 5972, 5973, 5974, 5945, 5946, 5951} ={ jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier } = I98

Goto(I211,function_expression) = Closure( [3307] ) = {3307} ={ expression->function_expression,) } = I38
Goto(I211,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471, 1442] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I39
Goto(I211,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I40
Goto(I211,identifier) = Closure( [1370, 1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399] ) = {1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= } = I41
Goto(I211,expression) = Closure( [6488] ) = {6488} ={ selection_statement->if(expression)statementelsestatement,else } = I223
Goto(I211,constant_expression) = Closure( [3235] ) = {3235} ={ expression->constant_expression,) } = I43
Goto(I211,primary_expression) = Closure( [3379] ) = {1799, 3595, 2059, 2063, 1943, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 2275, 2279, 1771, 2159, 1775, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier operator->+,number relop-><,( relop->>=,number } = I44




Goto(I215,function_expression) = Closure( [3307] ) = {3307} ={ expression->function_expression,) } = I38
Goto(I215,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471, 1442] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1460, 1461, 1466, 1470, 1471} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) } = I39
Goto(I215,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533, 1538, 1542, 1543] ) = {1538, 1542, 1543, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< } = I40
Goto(I215,identifier) = Closure( [1370, 1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399] ) = {1377, 3811, 1380, 1381, 1384, 1386, 1388, 1389, 1394, 1398, 1399, 1370} ={ primary_expression->identifier,* function_expression->identifier(expression_list),) primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->identifier,!= } = I41
Goto(I215,expression) = Closure( [2839] ) = {2839} ={ assignment_expression->identifierassignment_operatorexpression,) } = I224
Goto(I215,constant_expression) = Closure( [3235] ) = {3235} ={ expression->constant_expression,) } = I43
Goto(I215,primary_expression) = Closure( [3379] ) = {1799, 3595, 2059, 2063, 1943, 2203, 3739, 2207, 1699, 2087, 1703, 3379, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 3451, 2135, 1627, 2015, 1631, 2275, 2279, 1771, 2159, 1775, 1655, 1915, 2303} ={ operator->*,number arithmetic_expression->relopprimary_expressionarithmetic_expression,) relop->!=,( relop->!=,identifier relop-><,number relop-><=,( arithmetic_expression->,) relop-><=,identifier operator->-,( relop->!=,number operator->-,identifier constant_expression->primary_expressionarithmetic_expression,) operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( arithmetic_expression->operatorprimary_expressionarithmetic_expression,) relop->==,identifier operator->+,( relop->>,number operator->+,identifier relop->>=,( relop->>=,identifier operator->*,( relop->==,number operator->*,identifier operator->+,number relop-><,( relop->>=,number } = I44

Goto(I216,selection_statement) = Closure( [5544, 5545, 5549, 5550, 5555, 5558, 5561, 5563, 5566, 5568, 5572, 5573, 5576, 5577, 5578] ) = {5568, 5572, 5573, 5544, 5545, 5576, 5577, 5578, 5549, 5550, 5555, 5558, 5561, 5563, 5566} ={ statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,return statement->selection_statement,for statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break } = I81
Goto(I216,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I216,type_specifier) = Closure( [756, 757, 790, 761, 762, 767, 770, 773, 775, 778, 780, 784, 785, 788, 789] ) = {770, 773, 903, 775, 778, 780, 784, 785, 788, 789, 790, 919, 756, 757, 761, 762, 767} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while declaration_parameter->identifierdeclaration_parameter_assign,, declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier } = I82
Goto(I216,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I216,expression_statement) = Closure( [5400, 5401, 5414, 5406, 5417, 5419, 5422, 5424, 5428, 5429, 5432, 5433, 5434, 5405, 5411] ) = {5432, 5411, 5414, 5433, 5417, 5419, 5422, 5424, 5428, 5429, 5400, 5401, 5434, 5405, 5406} ={ statement->expression_statement,float statement->expression_statement,identifier statement->expression_statement,void statement->expression_statement,double statement->expression_statement,while statement->expression_statement,; statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,return statement->expression_statement,for statement->expression_statement,char statement->expression_statement,int statement->expression_statement,if } = I83
Goto(I216,while) = Closure( [6696, 6697, 6701, 6702, 6707, 6710, 6713, 6715, 6718, 6720, 6724, 6725, 6728, 6729, 6730] ) = {6720, 6724, 6725, 6696, 6697, 6728, 6729, 6730, 6701, 6702, 6707, 6710, 6713, 6715, 6718} ={ iteration_statement->while(expression)statement,} iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,float iteration_statement->while(expression)statement,double iteration_statement->while(expression)statement,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; iteration_statement->while(expression)statement,break } = I84
Goto(I216,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I216,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I216,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I216,{) = Closure( [5112, 5113, 5117, 5118, 5123, 5126, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146] ) = {6144, 5123, 6148, 6149, 5126, 6152, 6153, 6154, 5129, 5131, 5134, 5136, 5140, 5141, 5144, 5145, 5146, 3151, 6264, 6265, 5244, 6269, 6270, 5113, 6275, 6278, 6281, 6283, 6286, 6288, 6292, 6293, 5118, 6296, 6297, 6298, 6372, 6373, 5352, 6377, 6378, 6383, 6386, 5364, 5365, 6389, 6391, 5369, 5370, 6394, 6396, 5375, 6400, 6401, 5378, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5396, 5397, 5398, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 5508, 5509, 5513, 5514, 5519, 5522, 5525, 5527, 5530, 5532, 5536, 5537, 5540, 5541, 5542, 443, 5580, 5581, 5585, 5586, 5591, 5594, 5597, 5599, 5602, 5604, 5608, 5609, 5612, 5613, 5614, 515, 6660, 6661, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 5752, 5753, 5756, 5757, 5758, 2703, 659, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 720, 721, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6882, 742, 6887, 744, 6890, 748, 749, 6893, 6895, 752, 753, 754, 6898, 6900, 6904, 6905, 6908, 6909, 6910, 5904, 5905, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 6012, 6013, 6017, 6018, 6023, 6026, 6029, 6031, 6034, 6036, 6040, 6041, 6044, 6045, 6046, 5076, 5077, 5081, 5082, 5087, 5090, 3043, 5093, 5095, 6120, 6121, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 5112, 6137, 6139, 5117, 6142} ={ jump_statement->returnexpression;,} compound_statement->{statement_list},identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue compound_statement->{statement_list},void jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char compound_statement->{statement_list},while compound_statement->{statement_list},; compound_statement->{statement_list},break compound_statement->{statement_list},} compound_statement->{statement_list},{ compound_statement->{statement_list},continue compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char assignment_expression_list->,; jump_statement->return;,return jump_statement->return;,for statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if compound_statement->{statement_list},for jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue compound_statement->{statement_list},if jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier statement->selection_statement,return statement->selection_statement,for statement->selection_statement,int statement->selection_statement,if statement->selection_statement,identifier statement->selection_statement,void statement->selection_statement,while statement->selection_statement,; statement->selection_statement,break statement->selection_statement,} statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char type_specifier->int,identifier statement->iteration_statement,return statement->iteration_statement,for statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char type_specifier->double,identifier iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue statement->declaration,float statement->declaration,double statement->declaration,char assignment_expression->identifierassignment_operatorexpression,, type_specifier->void,identifier assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char compound_statement->{statement_list},return compound_statement->{statement_list},for compound_statement->{statement_list},int compound_statement->{statement_list},if compound_statement->{statement_list},identifier compound_statement->{statement_list},void assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; jump_statement->returnexpression;,return jump_statement->returnexpression;,for compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void compound_statement->{statement_list},return jump_statement->returnexpression;,while jump_statement->returnexpression;,; compound_statement->{statement_list},int jump_statement->returnexpression;,break } = I85
Goto(I216,return) = Closure( [6180, 6184, 6185, 6188, 6189, 6190, 6156, 6157, 6161, 6162, 6300, 6301, 6305, 6306, 6167, 6311, 6314, 6317, 6319, 6322, 6324, 6328, 6329, 6332, 6333, 6334, 6170, 6173, 6175, 6178] ) = {3331, 6156, 6157, 6161, 6162, 6167, 6170, 6173, 6175, 6178, 6180, 6184, 6185, 6188, 6189, 6190, 1334, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1358, 1362, 3187, 1406, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 1430, 1434, 6300, 6301, 6305, 6306, 6311, 6314, 6317, 6319, 6322, 3763, 6324, 6328, 6329, 3259, 6332, 6333, 6334, 1478, 1485, 1488, 1489, 1492, 1494, 1495, 1496, 1497, 1502, 1506} ={ constant_expression->primary_expressionarithmetic_expression,; jump_statement->returnexpression;,return jump_statement->returnexpression;,for jump_statement->returnexpression;,int jump_statement->returnexpression;,if jump_statement->returnexpression;,identifier jump_statement->returnexpression;,void jump_statement->returnexpression;,while jump_statement->returnexpression;,; jump_statement->returnexpression;,break jump_statement->returnexpression;,} jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= expression->constant_expression,; primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= jump_statement->return;,return jump_statement->return;,for jump_statement->return;,int jump_statement->return;,if jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break function_expression->identifier(expression_list),; jump_statement->return;,} jump_statement->return;,{ jump_statement->return;,continue expression->function_expression,; jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= } = I86
Goto(I216,jump_statement) = Closure( [5472, 5473, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501, 5504, 5505, 5506] ) = {5472, 5473, 5504, 5505, 5506, 5477, 5478, 5483, 5486, 5489, 5491, 5494, 5496, 5500, 5501} ={ statement->jump_statement,return statement->jump_statement,for statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue } = I87
Goto(I216,for) = Closure( [6912, 6913, 6917, 6918, 6926, 6929, 6931, 6934, 6936, 6940, 6941, 6944, 6945, 6946, 6923] ) = {6912, 6913, 6944, 6945, 6946, 6917, 6918, 6923, 6926, 6929, 6931, 6934, 6936, 6940, 6941} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue } = I88
Goto(I216,declaration) = Closure( [5760, 5761, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789, 5792, 5793, 5794] ) = {5760, 5761, 5792, 5793, 5794, 5765, 5766, 5771, 5774, 5777, 5779, 5782, 5784, 5788, 5789} ={ statement->declaration,return statement->declaration,for statement->declaration,float statement->declaration,double statement->declaration,char statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} statement->declaration,{ statement->declaration,continue } = I89
Goto(I216,statement) = Closure( [7175, 7197, 7198, 7164, 7165, 7169, 7170, 7178, 7181, 7183, 7186, 7188, 7192, 7193, 7196] ) = {7169, 7170, 7175, 7178, 7181, 7196, 7183, 7197, 7186, 7188, 7192, 7193, 7164, 7165, 7198} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,int iteration_statement->for(declarationexpression;assignment_expression)statement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,while iteration_statement->for(declarationexpression;assignment_expression)statement,float iteration_statement->for(declarationexpression;assignment_expression)statement,; iteration_statement->for(declarationexpression;assignment_expression)statement,double iteration_statement->for(declarationexpression;assignment_expression)statement,break iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ iteration_statement->for(declarationexpression;assignment_expression)statement,continue iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,char } = I225
Goto(I216,if) = Closure( [6408, 6409, 6413, 6414, 6422, 6425, 6427, 6430, 6432, 6436, 6437, 6440, 6441, 6442, 6419] ) = {6432, 6436, 6437, 6408, 6409, 6440, 6441, 6442, 6413, 6414, 6419, 6422, 6425, 6427, 6430} ={ selection_statement->if(expression)statementelsestatement,} selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for selection_statement->if(expression)statementelsestatement,float selection_statement->if(expression)statementelsestatement,double selection_statement->if(expression)statementelsestatement,char selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if selection_statement->if(expression)statementelsestatement,identifier selection_statement->if(expression)statementelsestatement,void selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; selection_statement->if(expression)statementelsestatement,break } = I91
Goto(I216,identifier) = Closure( [2739, 2755] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2739, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I216,assignment_expression_list) = Closure( [5832, 5833, 5837, 5838, 5843, 5846, 5849, 5851, 5854, 5856, 5860, 5861, 5864, 5865, 5866] ) = {5856, 5860, 5861, 5832, 5833, 5864, 5865, 5866, 5837, 5838, 5843, 5846, 5849, 5851, 5854} ={ expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break } = I93
Goto(I216,iteration_statement) = Closure( [5649, 5650, 5616, 5617, 5621, 5622, 5627, 5630, 5633, 5635, 5640, 5644, 5645, 5638, 5648] ) = {5633, 5635, 5638, 5640, 5644, 5645, 5616, 5649, 5650, 5617, 5648, 5621, 5622, 5627, 5630} ={ statement->iteration_statement,while statement->iteration_statement,; statement->iteration_statement,break statement->iteration_statement,} statement->iteration_statement,{ statement->iteration_statement,continue statement->iteration_statement,return statement->iteration_statement,double statement->iteration_statement,char statement->iteration_statement,for statement->iteration_statement,float statement->iteration_statement,int statement->iteration_statement,if statement->iteration_statement,identifier statement->iteration_statement,void } = I94
Goto(I216,compound_statement) = Closure( [5688, 5689, 5693, 5694, 5699, 5702, 5705, 5707, 5710, 5712, 5716, 5717, 5720, 5721, 5722] ) = {5699, 5702, 5705, 5707, 5720, 5710, 5712, 5721, 5716, 5717, 5688, 5689, 5722, 5693, 5694} ={ statement->compound_statement,identifier statement->compound_statement,void statement->compound_statement,while statement->compound_statement,; statement->compound_statement,float statement->compound_statement,break statement->compound_statement,} statement->compound_statement,double statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,return statement->compound_statement,for statement->compound_statement,char statement->compound_statement,int statement->compound_statement,if } = I95
Goto(I216,break) = Closure( [6048, 6049, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077, 6080, 6081, 6082] ) = {6048, 6049, 6080, 6081, 6082, 6053, 6054, 6059, 6062, 6065, 6067, 6070, 6072, 6076, 6077} ={ jump_statement->break;,return jump_statement->break;,for jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char jump_statement->break;,int jump_statement->break;,if jump_statement->break;,identifier jump_statement->break;,void jump_statement->break;,while jump_statement->break;,; jump_statement->break;,break jump_statement->break;,} jump_statement->break;,{ jump_statement->break;,continue } = I96
Goto(I216,assignment_expression) = Closure( [3079] ) = {3007, 2863, 3079} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I97
Goto(I216,continue) = Closure( [5940, 5941, 5945, 5946, 5951, 5954, 5957, 5959, 5962, 5964, 5968, 5969, 5972, 5973, 5974] ) = {5954, 5957, 5959, 5962, 5964, 5968, 5969, 5940, 5941, 5972, 5973, 5974, 5945, 5946, 5951} ={ jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,return jump_statement->continue;,for jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier } = I98

Goto(I217,;) = Closure( [872] ) = {872} ={ declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else } = I226

Goto(I218,)) = Closure( [6812] ) = {6272, 515, 5444, 6020, 587, 5516, 6668, 3151, 2703, 659, 5588, 728, 5912, 6812, 5084, 5660, 2719, 3043, 5732, 6884, 5804, 6380, 6128, 371, 443, 5372} ={ jump_statement->return;,else type_specifier->double,identifier statement->jump_statement,else jump_statement->break;,else type_specifier->float,identifier statement->selection_statement,else iteration_statement->while(expression)statement,else assignment_expression_list->,; assignment_expression->identifierassignment_operatorexpression,, type_specifier->void,identifier statement->iteration_statement,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else jump_statement->continue;,else iteration_statement->while(expression)statement,else compound_statement->{statement_list},else statement->compound_statement,else assignment_expression->identifierassignment_operatorexpression,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement->declaration,else iteration_statement->for(declarationexpression;assignment_expression)statement,else expression_statement->assignment_expression_list;,else selection_statement->if(expression)statementelsestatement,else jump_statement->returnexpression;,else type_specifier->char,identifier type_specifier->int,identifier statement->expression_statement,else } = I227



Goto(I221,function_expression) = Closure( [3295] ) = {3295} ={ expression->function_expression,; } = I118
Goto(I221,number) = Closure( [1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470, 1442] ) = {1442, 1449, 1452, 1453, 1456, 1458, 1459, 1460, 1461, 1466, 1470} ={ primary_expression->number,!= primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= } = I119
Goto(I221,() = Closure( [1514, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533, 1538, 1542] ) = {1538, 1542, 3343, 1334, 1341, 1344, 1345, 1348, 1350, 1352, 1353, 1358, 1362, 1363, 1406, 3199, 1413, 1416, 1417, 1420, 1422, 1424, 1425, 1430, 1434, 1435, 3775, 1478, 3271, 1485, 1488, 1489, 1492, 1494, 1496, 1497, 1502, 1506, 1507, 1514, 1521, 1524, 1525, 1528, 1530, 1531, 1532, 1533} ={ primary_expression->(expression),+ primary_expression->(expression),>= constant_expression->primary_expressionarithmetic_expression,) primary_expression->identifier,!= primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= primary_expression->identifier,) primary_expression->number,!= expression->constant_expression,) primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,== primary_expression->number,< primary_expression->number,+ primary_expression->number,>= primary_expression->number,) function_expression->identifier(expression_list),) primary_expression->(expression),!= expression->function_expression,) primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= primary_expression->(expression),) primary_expression->(expression),!= primary_expression->(expression),* primary_expression->(expression),<= primary_expression->(expression),> primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< } = I120
Goto(I221,identifier) = Closure( [3799, 1370, 1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398] ) = {1377, 1380, 1381, 1384, 1386, 1387, 1388, 1389, 1394, 1398, 3799, 1370} ={ primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->identifier,+ primary_expression->identifier,>= function_expression->identifier(expression_list),; primary_expression->identifier,!= } = I121
Goto(I221,expression) = Closure( [7028] ) = {7028} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I228
Goto(I221,constant_expression) = Closure( [3223] ) = {3223} ={ expression->constant_expression,; } = I124
Goto(I221,primary_expression) = Closure( [3367] ) = {1799, 2059, 3727, 2063, 1943, 2203, 2207, 1699, 3367, 1703, 2087, 1843, 1919, 2231, 1847, 1727, 1987, 1991, 1871, 2131, 2135, 1627, 1631, 2015, 2275, 2279, 1771, 3583, 3439, 1775, 2159, 1655, 1915, 2303} ={ operator->*,number relop->!=,( arithmetic_expression->,; relop->!=,identifier relop-><,number relop-><=,( relop-><=,identifier operator->-,( constant_expression->primary_expressionarithmetic_expression,; operator->-,identifier relop->!=,number operator->/,( relop-><,identifier relop-><=,number operator->/,identifier operator->-,number relop->>,( relop->>,identifier operator->/,number relop->==,( relop->==,identifier operator->+,( operator->+,identifier relop->>,number relop->>=,( relop->>=,identifier operator->*,( arithmetic_expression->relopprimary_expressionarithmetic_expression,; arithmetic_expression->operatorprimary_expressionarithmetic_expression,; operator->*,identifier relop->==,number operator->+,number relop-><,( relop->>=,number } = I125


Goto(I223,)) = Closure( [6524] ) = {6272, 515, 5444, 6020, 587, 5516, 6668, 3151, 2703, 659, 5372, 5588, 728, 5912, 5084, 5660, 2719, 3043, 5732, 6884, 5804, 6380, 6128, 371, 443, 6524} ={ jump_statement->return;,else type_specifier->double,identifier statement->jump_statement,else jump_statement->break;,else type_specifier->float,identifier statement->selection_statement,else iteration_statement->while(expression)statement,else assignment_expression_list->,; assignment_expression->identifierassignment_operatorexpression,, type_specifier->void,identifier statement->expression_statement,else statement->iteration_statement,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else jump_statement->continue;,else compound_statement->{statement_list},else statement->compound_statement,else assignment_expression->identifierassignment_operatorexpression,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement->declaration,else iteration_statement->for(declarationexpression;assignment_expression)statement,else expression_statement->assignment_expression_list;,else selection_statement->if(expression)statementelsestatement,else jump_statement->returnexpression;,else type_specifier->char,identifier type_specifier->int,identifier selection_statement->if(expression)statementelsestatement,else } = I229




Goto(I227,selection_statement) = Closure( [5552] ) = {5552} ={ statement->selection_statement,else } = I185
Goto(I227,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I227,type_specifier) = Closure( [764] ) = {919, 764, 903} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration_parameter->identifierdeclaration_parameter_assign,, } = I186
Goto(I227,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I227,expression_statement) = Closure( [5408] ) = {5408} ={ statement->expression_statement,else } = I187
Goto(I227,while) = Closure( [6704] ) = {6704} ={ iteration_statement->while(expression)statement,else } = I188
Goto(I227,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I227,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I227,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I227,{) = Closure( [5120] ) = {5120, 6144, 515, 6148, 6149, 6660, 6661, 6152, 6153, 6154, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 3151, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 6264, 6265, 5752, 5753, 5244, 6269, 6270, 5756, 5757, 5758, 6275, 6278, 6281, 6283, 6286, 2703, 6288, 659, 6292, 6293, 6296, 6297, 6298, 6137, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 753, 720, 721, 754, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6372, 6373, 6882, 742, 5352, 6377, 6378, 6887, 744, 6890, 748, 6383, 749, 6893, 6386, 6895, 5364, 5365, 6389, 6391, 752, 5369, 5370, 6394, 6396, 6900, 6904, 5375, 6400, 6401, 5378, 6908, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5904, 5905, 5396, 5397, 5398, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 6012, 6013, 6017, 6018, 5508, 5509, 6023, 5513, 5514, 6026, 6029, 5519, 6031, 5522, 6898, 6034, 5525, 6036, 5527, 6040, 6041, 5530, 5532, 6044, 6045, 6046, 5536, 5537, 5540, 5541, 5542, 6905, 443, 6909, 5580, 5581, 6910, 5585, 5586, 5076, 5077, 5591, 5081, 5594, 5082, 5597, 5599, 5087, 5602, 5090, 5604, 3043, 5093, 5095, 5608, 5609, 6120, 6121, 5612, 5613, 5614, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 6139, 6142} ={ compound_statement->{statement_list},else jump_statement->returnexpression;,} type_specifier->double,identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier assignment_expression_list->,; statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} jump_statement->return;,return jump_statement->return;,for statement->declaration,{ statement->declaration,continue statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if statement->declaration,float statement->declaration,double statement->declaration,char jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} type_specifier->void,identifier jump_statement->return;,{ jump_statement->return;,continue jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char jump_statement->returnexpression;,while assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ selection_statement->if(expression)statementelsestatement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while selection_statement->if(expression)statementelsestatement,void iteration_statement->for(declarationexpression;assignment_expression)statement,; statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,float selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue jump_statement->continue;,return jump_statement->continue;,for statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if statement->selection_statement,return statement->selection_statement,for jump_statement->break;,identifier statement->selection_statement,int statement->selection_statement,if jump_statement->break;,void jump_statement->break;,while statement->selection_statement,identifier jump_statement->break;,; statement->selection_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,break statement->selection_statement,while jump_statement->break;,} statement->selection_statement,; jump_statement->break;,{ jump_statement->break;,continue statement->selection_statement,break statement->selection_statement,} jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,continue type_specifier->int,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,double statement->iteration_statement,return statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->iteration_statement,int statement->iteration_statement,if compound_statement->{statement_list},return compound_statement->{statement_list},for statement->iteration_statement,identifier compound_statement->{statement_list},int statement->iteration_statement,void compound_statement->{statement_list},if statement->iteration_statement,while statement->iteration_statement,; compound_statement->{statement_list},identifier statement->iteration_statement,break compound_statement->{statement_list},void statement->iteration_statement,} assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; statement->iteration_statement,{ statement->iteration_statement,continue jump_statement->returnexpression;,return jump_statement->returnexpression;,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void jump_statement->returnexpression;,; jump_statement->returnexpression;,break } = I189
Goto(I227,return) = Closure( [6308, 6164] ) = {3331, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 6164, 1430, 1434, 6308, 3763, 1334, 3259, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 3187, 1406} ={ constant_expression->primary_expressionarithmetic_expression,; primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< jump_statement->returnexpression;,else primary_expression->number,+ primary_expression->number,>= jump_statement->return;,else function_expression->identifier(expression_list),; primary_expression->identifier,!= expression->function_expression,; primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= expression->constant_expression,; primary_expression->number,!= } = I190
Goto(I227,jump_statement) = Closure( [5480] ) = {5480} ={ statement->jump_statement,else } = I191
Goto(I227,for) = Closure( [6920] ) = {6920} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I192
Goto(I227,declaration) = Closure( [5768] ) = {5768} ={ statement->declaration,else } = I193
Goto(I227,statement) = Closure( [6848] ) = {6848} ={ iteration_statement->while(expression)statement,else } = I230
Goto(I227,if) = Closure( [6416] ) = {6416} ={ selection_statement->if(expression)statementelsestatement,else } = I195
Goto(I227,identifier) = Closure( [2739, 2755] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2739, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I227,assignment_expression_list) = Closure( [5840] ) = {5840} ={ expression_statement->assignment_expression_list;,else } = I196
Goto(I227,iteration_statement) = Closure( [5624] ) = {5624} ={ statement->iteration_statement,else } = I197
Goto(I227,compound_statement) = Closure( [5696] ) = {5696} ={ statement->compound_statement,else } = I198
Goto(I227,break) = Closure( [6056] ) = {6056} ={ jump_statement->break;,else } = I199
Goto(I227,assignment_expression) = Closure( [3079] ) = {3007, 2863, 3079} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I97
Goto(I227,continue) = Closure( [5948] ) = {5948} ={ jump_statement->continue;,else } = I200

Goto(I228,;) = Closure( [7064] ) = {7064, 2731} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else assignment_expression->identifierassignment_operatorexpression,) } = I231

Goto(I229,selection_statement) = Closure( [5552] ) = {5552} ={ statement->selection_statement,else } = I185
Goto(I229,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I229,type_specifier) = Closure( [764] ) = {919, 764, 903} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration_parameter->identifierdeclaration_parameter_assign,, } = I186
Goto(I229,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I229,expression_statement) = Closure( [5408] ) = {5408} ={ statement->expression_statement,else } = I187
Goto(I229,while) = Closure( [6704] ) = {6704} ={ iteration_statement->while(expression)statement,else } = I188
Goto(I229,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I229,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I229,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I229,{) = Closure( [5120] ) = {5120, 6144, 515, 6148, 6149, 6660, 6661, 6152, 6153, 6154, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 3151, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 6264, 6265, 5752, 5753, 5244, 6269, 6270, 5756, 5757, 5758, 6275, 6278, 6281, 6283, 6286, 2703, 6288, 659, 6292, 6293, 6296, 6297, 6298, 6137, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 753, 720, 721, 754, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6372, 6373, 6882, 742, 5352, 6377, 6378, 6887, 744, 6890, 748, 6383, 749, 6893, 6386, 6895, 5364, 5365, 6389, 6391, 752, 5369, 5370, 6394, 6396, 6900, 6904, 5375, 6400, 6401, 5378, 6908, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5904, 5905, 5396, 5397, 5398, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 6012, 6013, 6017, 6018, 5508, 5509, 6023, 5513, 5514, 6026, 6029, 5519, 6031, 5522, 6898, 6034, 5525, 6036, 5527, 6040, 6041, 5530, 5532, 6044, 6045, 6046, 5536, 5537, 5540, 5541, 5542, 6905, 443, 6909, 5580, 5581, 6910, 5585, 5586, 5076, 5077, 5591, 5081, 5594, 5082, 5597, 5599, 5087, 5602, 5090, 5604, 3043, 5093, 5095, 5608, 5609, 6120, 6121, 5612, 5613, 5614, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 6139, 6142} ={ compound_statement->{statement_list},else jump_statement->returnexpression;,} type_specifier->double,identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier assignment_expression_list->,; statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} jump_statement->return;,return jump_statement->return;,for statement->declaration,{ statement->declaration,continue statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if statement->declaration,float statement->declaration,double statement->declaration,char jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} type_specifier->void,identifier jump_statement->return;,{ jump_statement->return;,continue jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char jump_statement->returnexpression;,while assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ selection_statement->if(expression)statementelsestatement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while selection_statement->if(expression)statementelsestatement,void iteration_statement->for(declarationexpression;assignment_expression)statement,; statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,float selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue jump_statement->continue;,return jump_statement->continue;,for statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if statement->selection_statement,return statement->selection_statement,for jump_statement->break;,identifier statement->selection_statement,int statement->selection_statement,if jump_statement->break;,void jump_statement->break;,while statement->selection_statement,identifier jump_statement->break;,; statement->selection_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,break statement->selection_statement,while jump_statement->break;,} statement->selection_statement,; jump_statement->break;,{ jump_statement->break;,continue statement->selection_statement,break statement->selection_statement,} jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,continue type_specifier->int,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,double statement->iteration_statement,return statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->iteration_statement,int statement->iteration_statement,if compound_statement->{statement_list},return compound_statement->{statement_list},for statement->iteration_statement,identifier compound_statement->{statement_list},int statement->iteration_statement,void compound_statement->{statement_list},if statement->iteration_statement,while statement->iteration_statement,; compound_statement->{statement_list},identifier statement->iteration_statement,break compound_statement->{statement_list},void statement->iteration_statement,} assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; statement->iteration_statement,{ statement->iteration_statement,continue jump_statement->returnexpression;,return jump_statement->returnexpression;,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void jump_statement->returnexpression;,; jump_statement->returnexpression;,break } = I189
Goto(I229,return) = Closure( [6308, 6164] ) = {3331, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 6164, 1430, 1434, 6308, 3763, 1334, 3259, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 3187, 1406} ={ constant_expression->primary_expressionarithmetic_expression,; primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< jump_statement->returnexpression;,else primary_expression->number,+ primary_expression->number,>= jump_statement->return;,else function_expression->identifier(expression_list),; primary_expression->identifier,!= expression->function_expression,; primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= expression->constant_expression,; primary_expression->number,!= } = I190
Goto(I229,jump_statement) = Closure( [5480] ) = {5480} ={ statement->jump_statement,else } = I191
Goto(I229,for) = Closure( [6920] ) = {6920} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I192
Goto(I229,declaration) = Closure( [5768] ) = {5768} ={ statement->declaration,else } = I193
Goto(I229,statement) = Closure( [6560] ) = {6560} ={ selection_statement->if(expression)statementelsestatement,else } = I232
Goto(I229,if) = Closure( [6416] ) = {6416} ={ selection_statement->if(expression)statementelsestatement,else } = I195
Goto(I229,identifier) = Closure( [2739, 2755] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2739, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I229,assignment_expression_list) = Closure( [5840] ) = {5840} ={ expression_statement->assignment_expression_list;,else } = I196
Goto(I229,iteration_statement) = Closure( [5624] ) = {5624} ={ statement->iteration_statement,else } = I197
Goto(I229,compound_statement) = Closure( [5696] ) = {5696} ={ statement->compound_statement,else } = I198
Goto(I229,break) = Closure( [6056] ) = {6056} ={ jump_statement->break;,else } = I199
Goto(I229,assignment_expression) = Closure( [3079] ) = {3007, 2863, 3079} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I97
Goto(I229,continue) = Closure( [5948] ) = {5948} ={ jump_statement->continue;,else } = I200


Goto(I231,identifier) = Closure( [2767] ) = {2563, 2567, 2375, 2635, 2767, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_expression->identifierassignment_operatorexpression,) assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I202
Goto(I231,assignment_expression) = Closure( [7100] ) = {7100} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I233

Goto(I232,else) = Closure( [6596] ) = {6272, 515, 6596, 5444, 6020, 587, 5516, 6668, 3151, 2703, 659, 5588, 728, 5912, 5084, 5660, 2719, 3043, 5732, 6884, 5804, 6380, 6128, 371, 443, 5372} ={ jump_statement->return;,else type_specifier->double,identifier selection_statement->if(expression)statementelsestatement,else statement->jump_statement,else jump_statement->break;,else type_specifier->float,identifier statement->selection_statement,else iteration_statement->while(expression)statement,else assignment_expression_list->,; assignment_expression->identifierassignment_operatorexpression,, type_specifier->void,identifier statement->iteration_statement,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else jump_statement->continue;,else compound_statement->{statement_list},else statement->compound_statement,else assignment_expression->identifierassignment_operatorexpression,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement->declaration,else iteration_statement->for(declarationexpression;assignment_expression)statement,else expression_statement->assignment_expression_list;,else selection_statement->if(expression)statementelsestatement,else jump_statement->returnexpression;,else type_specifier->char,identifier type_specifier->int,identifier statement->expression_statement,else } = I234

Goto(I233,)) = Closure( [7136] ) = {6272, 515, 5444, 6020, 587, 5516, 6668, 3151, 2703, 659, 5588, 728, 5912, 5084, 5660, 2719, 7136, 3043, 5732, 6884, 5804, 6380, 6128, 371, 443, 5372} ={ jump_statement->return;,else type_specifier->double,identifier statement->jump_statement,else jump_statement->break;,else type_specifier->float,identifier statement->selection_statement,else iteration_statement->while(expression)statement,else assignment_expression_list->,; assignment_expression->identifierassignment_operatorexpression,, type_specifier->void,identifier statement->iteration_statement,else declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else jump_statement->continue;,else compound_statement->{statement_list},else statement->compound_statement,else assignment_expression->identifierassignment_operatorexpression,; iteration_statement->for(declarationexpression;assignment_expression)statement,else assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; statement->declaration,else iteration_statement->for(declarationexpression;assignment_expression)statement,else expression_statement->assignment_expression_list;,else selection_statement->if(expression)statementelsestatement,else jump_statement->returnexpression;,else type_specifier->char,identifier type_specifier->int,identifier statement->expression_statement,else } = I235

Goto(I234,selection_statement) = Closure( [5552] ) = {5552} ={ statement->selection_statement,else } = I185
Goto(I234,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I234,type_specifier) = Closure( [764] ) = {919, 764, 903} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration_parameter->identifierdeclaration_parameter_assign,, } = I186
Goto(I234,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I234,expression_statement) = Closure( [5408] ) = {5408} ={ statement->expression_statement,else } = I187
Goto(I234,while) = Closure( [6704] ) = {6704} ={ iteration_statement->while(expression)statement,else } = I188
Goto(I234,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I234,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I234,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I234,{) = Closure( [5120] ) = {5120, 6144, 515, 6148, 6149, 6660, 6661, 6152, 6153, 6154, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 3151, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 6264, 6265, 5752, 5753, 5244, 6269, 6270, 5756, 5757, 5758, 6275, 6278, 6281, 6283, 6286, 2703, 6288, 659, 6292, 6293, 6296, 6297, 6298, 6137, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 753, 720, 721, 754, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6372, 6373, 6882, 742, 5352, 6377, 6378, 6887, 744, 6890, 748, 6383, 749, 6893, 6386, 6895, 5364, 5365, 6389, 6391, 752, 5369, 5370, 6394, 6396, 6900, 6904, 5375, 6400, 6401, 5378, 6908, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5904, 5905, 5396, 5397, 5398, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 6012, 6013, 6017, 6018, 5508, 5509, 6023, 5513, 5514, 6026, 6029, 5519, 6031, 5522, 6898, 6034, 5525, 6036, 5527, 6040, 6041, 5530, 5532, 6044, 6045, 6046, 5536, 5537, 5540, 5541, 5542, 6905, 443, 6909, 5580, 5581, 6910, 5585, 5586, 5076, 5077, 5591, 5081, 5594, 5082, 5597, 5599, 5087, 5602, 5090, 5604, 3043, 5093, 5095, 5608, 5609, 6120, 6121, 5612, 5613, 5614, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 6139, 6142} ={ compound_statement->{statement_list},else jump_statement->returnexpression;,} type_specifier->double,identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier assignment_expression_list->,; statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} jump_statement->return;,return jump_statement->return;,for statement->declaration,{ statement->declaration,continue statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if statement->declaration,float statement->declaration,double statement->declaration,char jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} type_specifier->void,identifier jump_statement->return;,{ jump_statement->return;,continue jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char jump_statement->returnexpression;,while assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ selection_statement->if(expression)statementelsestatement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while selection_statement->if(expression)statementelsestatement,void iteration_statement->for(declarationexpression;assignment_expression)statement,; statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,float selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue jump_statement->continue;,return jump_statement->continue;,for statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if statement->selection_statement,return statement->selection_statement,for jump_statement->break;,identifier statement->selection_statement,int statement->selection_statement,if jump_statement->break;,void jump_statement->break;,while statement->selection_statement,identifier jump_statement->break;,; statement->selection_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,break statement->selection_statement,while jump_statement->break;,} statement->selection_statement,; jump_statement->break;,{ jump_statement->break;,continue statement->selection_statement,break statement->selection_statement,} jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,continue type_specifier->int,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,double statement->iteration_statement,return statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->iteration_statement,int statement->iteration_statement,if compound_statement->{statement_list},return compound_statement->{statement_list},for statement->iteration_statement,identifier compound_statement->{statement_list},int statement->iteration_statement,void compound_statement->{statement_list},if statement->iteration_statement,while statement->iteration_statement,; compound_statement->{statement_list},identifier statement->iteration_statement,break compound_statement->{statement_list},void statement->iteration_statement,} assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; statement->iteration_statement,{ statement->iteration_statement,continue jump_statement->returnexpression;,return jump_statement->returnexpression;,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void jump_statement->returnexpression;,; jump_statement->returnexpression;,break } = I189
Goto(I234,return) = Closure( [6308, 6164] ) = {3331, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 6164, 1430, 1434, 6308, 3763, 1334, 3259, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 3187, 1406} ={ constant_expression->primary_expressionarithmetic_expression,; primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< jump_statement->returnexpression;,else primary_expression->number,+ primary_expression->number,>= jump_statement->return;,else function_expression->identifier(expression_list),; primary_expression->identifier,!= expression->function_expression,; primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= expression->constant_expression,; primary_expression->number,!= } = I190
Goto(I234,jump_statement) = Closure( [5480] ) = {5480} ={ statement->jump_statement,else } = I191
Goto(I234,for) = Closure( [6920] ) = {6920} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I192
Goto(I234,declaration) = Closure( [5768] ) = {5768} ={ statement->declaration,else } = I193
Goto(I234,statement) = Closure( [6632] ) = {6632} ={ selection_statement->if(expression)statementelsestatement,else } = I236
Goto(I234,if) = Closure( [6416] ) = {6416} ={ selection_statement->if(expression)statementelsestatement,else } = I195
Goto(I234,identifier) = Closure( [2739, 2755] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2739, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I234,assignment_expression_list) = Closure( [5840] ) = {5840} ={ expression_statement->assignment_expression_list;,else } = I196
Goto(I234,iteration_statement) = Closure( [5624] ) = {5624} ={ statement->iteration_statement,else } = I197
Goto(I234,compound_statement) = Closure( [5696] ) = {5696} ={ statement->compound_statement,else } = I198
Goto(I234,break) = Closure( [6056] ) = {6056} ={ jump_statement->break;,else } = I199
Goto(I234,assignment_expression) = Closure( [3079] ) = {3007, 2863, 3079} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I97
Goto(I234,continue) = Closure( [5948] ) = {5948} ={ jump_statement->continue;,else } = I200

Goto(I235,selection_statement) = Closure( [5552] ) = {5552} ={ statement->selection_statement,else } = I185
Goto(I235,int) = Closure( [479] ) = {479} ={ type_specifier->int,identifier } = I1
Goto(I235,type_specifier) = Closure( [764] ) = {919, 764, 903} ={ declaration_parameter->identifierdeclaration_parameter_assign,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,else declaration_parameter->identifierdeclaration_parameter_assign,, } = I186
Goto(I235,void) = Closure( [695] ) = {695} ={ type_specifier->void,identifier } = I3
Goto(I235,expression_statement) = Closure( [5408] ) = {5408} ={ statement->expression_statement,else } = I187
Goto(I235,while) = Closure( [6704] ) = {6704} ={ iteration_statement->while(expression)statement,else } = I188
Goto(I235,float) = Closure( [623] ) = {623} ={ type_specifier->float,identifier } = I5
Goto(I235,double) = Closure( [551] ) = {551} ={ type_specifier->double,identifier } = I6
Goto(I235,char) = Closure( [407] ) = {407} ={ type_specifier->char,identifier } = I7
Goto(I235,{) = Closure( [5120] ) = {5120, 6144, 515, 6148, 6149, 6660, 6661, 6152, 6153, 6154, 6665, 6666, 6671, 6674, 5652, 5653, 6677, 6679, 5657, 5658, 6682, 6684, 5663, 6688, 6689, 5666, 6692, 5669, 6693, 5671, 6694, 5674, 5676, 5680, 5681, 5684, 5685, 5686, 587, 3151, 5724, 5725, 5729, 5730, 5735, 5738, 5741, 5743, 5746, 5748, 6264, 6265, 5752, 5753, 5244, 6269, 6270, 5756, 5757, 5758, 6275, 6278, 6281, 6283, 6286, 2703, 6288, 659, 6292, 6293, 6296, 6297, 6298, 6137, 2719, 5796, 5797, 5801, 5802, 5807, 5810, 5813, 5815, 5818, 5820, 5824, 5825, 5828, 5829, 5830, 753, 720, 721, 754, 725, 726, 731, 6876, 6877, 734, 737, 6881, 739, 6372, 6373, 6882, 742, 5352, 6377, 6378, 6887, 744, 6890, 748, 6383, 749, 6893, 6386, 6895, 5364, 5365, 6389, 6391, 752, 5369, 5370, 6394, 6396, 6900, 6904, 5375, 6400, 6401, 5378, 6908, 6404, 5381, 6405, 5383, 6406, 5386, 5388, 5392, 5393, 5904, 5905, 5396, 5397, 5398, 5909, 5910, 5915, 5918, 5921, 5923, 5926, 5928, 5932, 5933, 5936, 5937, 5938, 5436, 5437, 5441, 5442, 5447, 5450, 5453, 5455, 5458, 5460, 5464, 5465, 5468, 5469, 5470, 371, 6012, 6013, 6017, 6018, 5508, 5509, 6023, 5513, 5514, 6026, 6029, 5519, 6031, 5522, 6898, 6034, 5525, 6036, 5527, 6040, 6041, 5530, 5532, 6044, 6045, 6046, 5536, 5537, 5540, 5541, 5542, 6905, 443, 6909, 5580, 5581, 6910, 5585, 5586, 5076, 5077, 5591, 5081, 5594, 5082, 5597, 5599, 5087, 5602, 5090, 5604, 3043, 5093, 5095, 5608, 5609, 6120, 6121, 5612, 5613, 5614, 5098, 5100, 6125, 6126, 5104, 5105, 6131, 5108, 5109, 5110, 6134, 6139, 6142} ={ compound_statement->{statement_list},else jump_statement->returnexpression;,} type_specifier->double,identifier jump_statement->returnexpression;,{ jump_statement->returnexpression;,continue iteration_statement->while(expression)statement,return iteration_statement->while(expression)statement,for jump_statement->returnexpression;,float jump_statement->returnexpression;,double jump_statement->returnexpression;,char iteration_statement->while(expression)statement,int iteration_statement->while(expression)statement,if iteration_statement->while(expression)statement,identifier iteration_statement->while(expression)statement,void statement->compound_statement,return statement->compound_statement,for iteration_statement->while(expression)statement,while iteration_statement->while(expression)statement,; statement->compound_statement,int statement->compound_statement,if iteration_statement->while(expression)statement,break iteration_statement->while(expression)statement,} statement->compound_statement,identifier iteration_statement->while(expression)statement,{ iteration_statement->while(expression)statement,continue statement->compound_statement,void iteration_statement->while(expression)statement,float statement->compound_statement,while iteration_statement->while(expression)statement,double statement->compound_statement,; iteration_statement->while(expression)statement,char statement->compound_statement,break statement->compound_statement,} statement->compound_statement,{ statement->compound_statement,continue statement->compound_statement,float statement->compound_statement,double statement->compound_statement,char type_specifier->float,identifier assignment_expression_list->,; statement->declaration,return statement->declaration,for statement->declaration,int statement->declaration,if statement->declaration,identifier statement->declaration,void statement->declaration,while statement->declaration,; statement->declaration,break statement->declaration,} jump_statement->return;,return jump_statement->return;,for statement->declaration,{ statement->declaration,continue statement_list->statementstatement_list,} jump_statement->return;,int jump_statement->return;,if statement->declaration,float statement->declaration,double statement->declaration,char jump_statement->return;,identifier jump_statement->return;,void jump_statement->return;,while jump_statement->return;,; jump_statement->return;,break assignment_expression->identifierassignment_operatorexpression,, jump_statement->return;,} type_specifier->void,identifier jump_statement->return;,{ jump_statement->return;,continue jump_statement->return;,float jump_statement->return;,double jump_statement->return;,char jump_statement->returnexpression;,while assignment_expression->identifierassignment_operatorexpression,; expression_statement->assignment_expression_list;,return expression_statement->assignment_expression_list;,for expression_statement->assignment_expression_list;,int expression_statement->assignment_expression_list;,if expression_statement->assignment_expression_list;,identifier expression_statement->assignment_expression_list;,void expression_statement->assignment_expression_list;,while expression_statement->assignment_expression_list;,; expression_statement->assignment_expression_list;,break expression_statement->assignment_expression_list;,} expression_statement->assignment_expression_list;,{ expression_statement->assignment_expression_list;,continue expression_statement->assignment_expression_list;,float expression_statement->assignment_expression_list;,double expression_statement->assignment_expression_list;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,double declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,return declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,char declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,return iteration_statement->for(declarationexpression;assignment_expression)statement,for declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,while iteration_statement->for(declarationexpression;assignment_expression)statement,int declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,; selection_statement->if(expression)statementelsestatement,return selection_statement->if(expression)statementelsestatement,for iteration_statement->for(declarationexpression;assignment_expression)statement,if declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,break statement_list->,} selection_statement->if(expression)statementelsestatement,int selection_statement->if(expression)statementelsestatement,if iteration_statement->for(declarationexpression;assignment_expression)statement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,} iteration_statement->for(declarationexpression;assignment_expression)statement,void declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,{ selection_statement->if(expression)statementelsestatement,identifier declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,continue iteration_statement->for(declarationexpression;assignment_expression)statement,while selection_statement->if(expression)statementelsestatement,void iteration_statement->for(declarationexpression;assignment_expression)statement,; statement->expression_statement,return statement->expression_statement,for selection_statement->if(expression)statementelsestatement,while selection_statement->if(expression)statementelsestatement,; declaration->type_specifierdeclaration_parameterdeclaration_parameter_suffix;,float statement->expression_statement,int statement->expression_statement,if selection_statement->if(expression)statementelsestatement,break selection_statement->if(expression)statementelsestatement,} iteration_statement->for(declarationexpression;assignment_expression)statement,} iteration_statement->for(declarationexpression;assignment_expression)statement,{ statement->expression_statement,identifier selection_statement->if(expression)statementelsestatement,{ selection_statement->if(expression)statementelsestatement,continue statement->expression_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,float selection_statement->if(expression)statementelsestatement,float statement->expression_statement,while selection_statement->if(expression)statementelsestatement,double statement->expression_statement,; selection_statement->if(expression)statementelsestatement,char statement->expression_statement,break statement->expression_statement,} statement->expression_statement,{ statement->expression_statement,continue jump_statement->continue;,return jump_statement->continue;,for statement->expression_statement,float statement->expression_statement,double statement->expression_statement,char jump_statement->continue;,int jump_statement->continue;,if jump_statement->continue;,identifier jump_statement->continue;,void jump_statement->continue;,while jump_statement->continue;,; jump_statement->continue;,break jump_statement->continue;,} jump_statement->continue;,{ jump_statement->continue;,continue jump_statement->continue;,float jump_statement->continue;,double jump_statement->continue;,char statement->jump_statement,return statement->jump_statement,for statement->jump_statement,int statement->jump_statement,if statement->jump_statement,identifier statement->jump_statement,void statement->jump_statement,while statement->jump_statement,; statement->jump_statement,break statement->jump_statement,} statement->jump_statement,{ statement->jump_statement,continue statement->jump_statement,float statement->jump_statement,double statement->jump_statement,char type_specifier->char,identifier jump_statement->break;,return jump_statement->break;,for jump_statement->break;,int jump_statement->break;,if statement->selection_statement,return statement->selection_statement,for jump_statement->break;,identifier statement->selection_statement,int statement->selection_statement,if jump_statement->break;,void jump_statement->break;,while statement->selection_statement,identifier jump_statement->break;,; statement->selection_statement,void iteration_statement->for(declarationexpression;assignment_expression)statement,break jump_statement->break;,break statement->selection_statement,while jump_statement->break;,} statement->selection_statement,; jump_statement->break;,{ jump_statement->break;,continue statement->selection_statement,break statement->selection_statement,} jump_statement->break;,float jump_statement->break;,double jump_statement->break;,char statement->selection_statement,{ statement->selection_statement,continue statement->selection_statement,float statement->selection_statement,double statement->selection_statement,char iteration_statement->for(declarationexpression;assignment_expression)statement,continue type_specifier->int,identifier iteration_statement->for(declarationexpression;assignment_expression)statement,double statement->iteration_statement,return statement->iteration_statement,for iteration_statement->for(declarationexpression;assignment_expression)statement,char statement->iteration_statement,int statement->iteration_statement,if compound_statement->{statement_list},return compound_statement->{statement_list},for statement->iteration_statement,identifier compound_statement->{statement_list},int statement->iteration_statement,void compound_statement->{statement_list},if statement->iteration_statement,while statement->iteration_statement,; compound_statement->{statement_list},identifier statement->iteration_statement,break compound_statement->{statement_list},void statement->iteration_statement,} assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; compound_statement->{statement_list},while compound_statement->{statement_list},; statement->iteration_statement,{ statement->iteration_statement,continue jump_statement->returnexpression;,return jump_statement->returnexpression;,for statement->iteration_statement,float statement->iteration_statement,double statement->iteration_statement,char compound_statement->{statement_list},break compound_statement->{statement_list},} jump_statement->returnexpression;,int jump_statement->returnexpression;,if compound_statement->{statement_list},{ compound_statement->{statement_list},continue jump_statement->returnexpression;,identifier compound_statement->{statement_list},float compound_statement->{statement_list},double compound_statement->{statement_list},char jump_statement->returnexpression;,void jump_statement->returnexpression;,; jump_statement->returnexpression;,break } = I189
Goto(I235,return) = Closure( [6308, 6164] ) = {3331, 1413, 1416, 1417, 1420, 1422, 1423, 1424, 1425, 6164, 1430, 1434, 6308, 3763, 1334, 3259, 1341, 1344, 1345, 1348, 1350, 1351, 1352, 1353, 1478, 1485, 1358, 1488, 1489, 1362, 1492, 1494, 1495, 1496, 1497, 1502, 1506, 3187, 1406} ={ constant_expression->primary_expressionarithmetic_expression,; primary_expression->number,* primary_expression->number,<= primary_expression->number,> primary_expression->number,/ primary_expression->number,- primary_expression->number,; primary_expression->number,== primary_expression->number,< jump_statement->returnexpression;,else primary_expression->number,+ primary_expression->number,>= jump_statement->return;,else function_expression->identifier(expression_list),; primary_expression->identifier,!= expression->function_expression,; primary_expression->identifier,* primary_expression->identifier,<= primary_expression->identifier,> primary_expression->identifier,/ primary_expression->identifier,- primary_expression->identifier,; primary_expression->identifier,== primary_expression->identifier,< primary_expression->(expression),!= primary_expression->(expression),* primary_expression->identifier,+ primary_expression->(expression),<= primary_expression->(expression),> primary_expression->identifier,>= primary_expression->(expression),/ primary_expression->(expression),- primary_expression->(expression),; primary_expression->(expression),== primary_expression->(expression),< primary_expression->(expression),+ primary_expression->(expression),>= expression->constant_expression,; primary_expression->number,!= } = I190
Goto(I235,jump_statement) = Closure( [5480] ) = {5480} ={ statement->jump_statement,else } = I191
Goto(I235,for) = Closure( [6920] ) = {6920} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I192
Goto(I235,declaration) = Closure( [5768] ) = {5768} ={ statement->declaration,else } = I193
Goto(I235,statement) = Closure( [7172] ) = {7172} ={ iteration_statement->for(declarationexpression;assignment_expression)statement,else } = I237
Goto(I235,if) = Closure( [6416] ) = {6416} ={ selection_statement->if(expression)statementelsestatement,else } = I195
Goto(I235,identifier) = Closure( [2739, 2755] ) = {2563, 2755, 2567, 2375, 2635, 2639, 2447, 2519, 2591, 2663, 2347, 2351, 2739, 2419, 2423, 2491, 2495} ={ assignment_operator->*=,( assignment_expression->identifierassignment_operatorexpression,; assignment_operator->*=,identifier assignment_operator->=,number assignment_operator->/=,( assignment_operator->/=,identifier assignment_operator->+=,number assignment_operator->-=,number assignment_operator->*=,number assignment_operator->/=,number assignment_operator->=,( assignment_operator->=,identifier assignment_expression->identifierassignment_operatorexpression,, assignment_operator->+=,( assignment_operator->+=,identifier assignment_operator->-=,( assignment_operator->-=,identifier } = I92
Goto(I235,assignment_expression_list) = Closure( [5840] ) = {5840} ={ expression_statement->assignment_expression_list;,else } = I196
Goto(I235,iteration_statement) = Closure( [5624] ) = {5624} ={ statement->iteration_statement,else } = I197
Goto(I235,compound_statement) = Closure( [5696] ) = {5696} ={ statement->compound_statement,else } = I198
Goto(I235,break) = Closure( [6056] ) = {6056} ={ jump_statement->break;,else } = I199
Goto(I235,assignment_expression) = Closure( [3079] ) = {3007, 2863, 3079} ={ assignment_expression_list_suffix->,; assignment_expression_list_suffix->,assignment_expressionassignment_expression_list_suffix,; assignment_expression_list->assignment_expressionassignment_expression_list_suffix,; } = I97
Goto(I235,continue) = Closure( [5948] ) = {5948} ={ jump_statement->continue;,else } = I200



