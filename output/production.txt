项目：
 [{'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True}] 

新项目：
 [{'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'return'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'for'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '!='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': ','}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '#'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'int'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'if'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '('}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'else'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '*'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '-='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'identifier'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '<='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '>'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'void'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '/='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '/'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'while'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '-'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': ';'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '=='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '<'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'break'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '}'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '+='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '+'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '*='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '{'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'continue'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': '>='}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': ')'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'float'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'double'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'char'}, {'left': 'sstart', 'right': ['start'], 'point': 0, 'origin': 0, 'isTer': False, 'accept': 'number'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'return'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'for'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '!='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': ','}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '#'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'int'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'if'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '('}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'else'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '*'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '-='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'identifier'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '<='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '>'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'void'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '/='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '/'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'while'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '-'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': ';'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '=='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '<'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'break'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '}'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '+='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '+'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '*='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '{'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'continue'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': '>='}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': ')'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'float'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'double'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'char'}, {'left': 'sstart', 'right': ['start'], 'point': 1, 'origin': 0, 'isTer': True, 'accept': 'number'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'return'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'for'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '!='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': ','}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '#'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'int'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'if'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '('}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'else'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '*'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '-='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'identifier'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '<='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '>'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'void'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '/='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '/'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'while'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '-'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': ';'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '=='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '<'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'break'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '}'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '+='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '+'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '*='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '{'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'continue'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': '>='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': ')'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'float'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'double'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'char'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 0, 'origin': 1, 'isTer': False, 'accept': 'number'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'return'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'for'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '!='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': ','}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '#'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'int'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'if'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '('}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'else'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '*'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '-='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'identifier'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '<='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '>'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'void'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '/='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '/'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'while'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '-'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': ';'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '=='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '<'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'break'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '}'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '+='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '+'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '*='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '{'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'continue'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': '>='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': ')'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'float'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'double'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'char'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 1, 'origin': 1, 'isTer': False, 'accept': 'number'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'return'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'for'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '!='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': ','}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '#'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'int'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'if'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '('}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'else'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '*'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '-='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'identifier'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '<='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '>'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'void'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '/='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '/'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'while'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '-'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': ';'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '=='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '<'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'break'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '}'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '+='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '+'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '*='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '{'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'continue'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': '>='}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': ')'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'float'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'double'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'char'}, {'left': 'start', 'right': ['external_declaration', 'start'], 'point': 2, 'origin': 1, 'isTer': True, 'accept': 'number'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'return'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'for'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '!='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': ','}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '#'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'int'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'if'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '('}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'else'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '*'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '-='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'identifier'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '<='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '>'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'void'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '/='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '/'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'while'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '-'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': ';'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '=='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '<'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'break'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '}'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '+='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '+'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '*='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '{'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'continue'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': '>='}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': ')'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'float'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'double'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'char'}, {'left': 'start', 'right': [], 'point': 0, 'origin': 2, 'isTer': True, 'accept': 'number'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'return'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'for'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '!='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': ','}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '#'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'int'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'if'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '('}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'else'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '*'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '-='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'identifier'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '<='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '>'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'void'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '/='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '/'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'while'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '-'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': ';'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '=='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '<'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'break'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '}'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '+='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '+'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '*='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '{'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'continue'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': '>='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': ')'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'float'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'double'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'char'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 0, 'origin': 3, 'isTer': False, 'accept': 'number'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'return'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'for'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '!='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': ','}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '#'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'int'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'if'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '('}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'else'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '*'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '-='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'identifier'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '<='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '>'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'void'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '/='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '/'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'while'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '-'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': ';'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '=='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '<'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'break'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '}'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '+='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '+'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '*='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '{'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'continue'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': '>='}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': ')'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'float'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'double'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'char'}, {'left': 'external_declaration', 'right': ['declaration'], 'point': 1, 'origin': 3, 'isTer': True, 'accept': 'number'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'return'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'for'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '!='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': ','}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '#'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'int'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'if'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '('}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'else'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '*'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '-='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'identifier'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '<='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '>'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'void'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '/='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '/'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'while'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '-'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': ';'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '=='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '<'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'break'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '}'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '+='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '+'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '*='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '{'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'continue'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': '>='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': ')'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'float'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'double'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'char'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 0, 'origin': 4, 'isTer': False, 'accept': 'number'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'return'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'for'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '!='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': ','}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '#'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'int'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'if'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '('}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'else'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '*'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '-='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'identifier'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '<='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '>'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'void'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '/='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '/'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'while'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '-'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': ';'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '=='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '<'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'break'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '}'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '+='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '+'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '*='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '{'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'continue'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': '>='}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': ')'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'float'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'double'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'char'}, {'left': 'external_declaration', 'right': ['function_definition'], 'point': 1, 'origin': 4, 'isTer': True, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '!='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': ','}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '#'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '('}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '*'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '-='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '<='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '>'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '/='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '/'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '-'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': ';'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '=='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '<'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '}'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '+='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '+'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '*='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '{'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': '>='}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': ')'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['char'], 'point': 0, 'origin': 5, 'isTer': False, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '!='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': ','}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '#'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '('}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '*'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '-='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '<='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '>'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '/='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '/'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '-'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': ';'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '=='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '<'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '}'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '+='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '+'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '*='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '{'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': '>='}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': ')'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['char'], 'point': 1, 'origin': 5, 'isTer': True, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '!='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': ','}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '#'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '('}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '*'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '-='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '<='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '>'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '/='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '/'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '-'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': ';'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '=='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '<'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '}'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '+='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '+'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '*='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '{'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': '>='}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': ')'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['int'], 'point': 0, 'origin': 6, 'isTer': False, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '!='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': ','}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '#'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '('}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '*'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '-='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '<='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '>'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '/='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '/'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '-'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': ';'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '=='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '<'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '}'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '+='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '+'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '*='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '{'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': '>='}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': ')'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['int'], 'point': 1, 'origin': 6, 'isTer': True, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '!='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': ','}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '#'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '('}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '*'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '-='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '<='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '>'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '/='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '/'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '-'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': ';'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '=='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '<'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '}'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '+='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '+'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '*='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '{'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': '>='}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': ')'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['double'], 'point': 0, 'origin': 7, 'isTer': False, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '!='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': ','}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '#'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '('}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '*'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '-='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '<='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '>'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '/='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '/'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '-'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': ';'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '=='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '<'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '}'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '+='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '+'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '*='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '{'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': '>='}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': ')'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['double'], 'point': 1, 'origin': 7, 'isTer': True, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '!='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': ','}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '#'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '('}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '*'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '-='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '<='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '>'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '/='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '/'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '-'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': ';'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '=='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '<'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '}'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '+='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '+'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '*='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '{'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': '>='}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': ')'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['float'], 'point': 0, 'origin': 8, 'isTer': False, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '!='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': ','}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '#'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '('}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '*'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '-='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '<='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '>'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '/='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '/'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '-'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': ';'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '=='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '<'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '}'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '+='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '+'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '*='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '{'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': '>='}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': ')'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['float'], 'point': 1, 'origin': 8, 'isTer': True, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '!='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': ','}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '#'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '('}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '*'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '-='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '<='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '>'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '/='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '/'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '-'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': ';'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '=='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '<'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '}'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '+='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '+'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '*='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '{'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': '>='}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': ')'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['void'], 'point': 0, 'origin': 9, 'isTer': False, 'accept': 'number'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'return'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'for'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '!='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': ','}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '#'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'int'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'if'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '('}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'else'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '*'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '-='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'identifier'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '<='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '>'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'void'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '/='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '/'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'while'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '-'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': ';'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '=='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '<'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'break'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '}'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '+='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '+'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '*='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '{'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'continue'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': '>='}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': ')'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'float'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'double'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'char'}, {'left': 'type_specifier', 'right': ['void'], 'point': 1, 'origin': 9, 'isTer': True, 'accept': 'number'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'return'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'for'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '!='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': ','}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '#'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'int'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'if'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '('}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'else'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '*'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '-='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '<='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '>'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'void'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '/='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '/'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'while'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '-'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': ';'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '=='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '<'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'break'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '}'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '+='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '+'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '*='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '{'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': '>='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': ')'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'float'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'double'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'char'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 0, 'origin': 10, 'isTer': False, 'accept': 'number'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'return'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'for'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '!='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': ','}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '#'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'int'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'if'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '('}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'else'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '*'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '-='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '<='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '>'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'void'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '/='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '/'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'while'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '-'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': ';'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '=='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '<'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'break'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '}'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '+='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '+'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '*='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '{'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': '>='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': ')'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'float'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'double'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'char'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 1, 'origin': 10, 'isTer': False, 'accept': 'number'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'return'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'for'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '!='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': ','}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '#'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'int'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'if'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '('}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'else'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '*'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '-='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '<='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '>'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'void'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '/='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '/'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'while'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '-'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': ';'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '=='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '<'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'break'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '}'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '+='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '+'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '*='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '{'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': '>='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': ')'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'float'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'double'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'char'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 2, 'origin': 10, 'isTer': False, 'accept': 'number'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'return'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'for'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '!='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': ','}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '#'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'int'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'if'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '('}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'else'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '*'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '-='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '<='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '>'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'void'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '/='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '/'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'while'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '-'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': ';'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '=='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '<'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'break'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '}'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '+='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '+'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '*='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '{'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': '>='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': ')'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'float'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'double'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'char'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 3, 'origin': 10, 'isTer': False, 'accept': 'number'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'return'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'for'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '!='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': ','}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '#'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'int'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'if'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '('}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'else'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '*'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '-='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'identifier'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '<='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '>'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'void'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '/='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '/'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'while'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '-'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': ';'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '=='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '<'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'break'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '}'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '+='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '+'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '*='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '{'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'continue'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': '>='}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': ')'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'float'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'double'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'char'}, {'left': 'declaration', 'right': ['type_specifier', 'declaration_parameter', 'declaration_parameter_suffix', ';'], 'point': 4, 'origin': 10, 'isTer': True, 'accept': 'number'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 0, 'origin': 11, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 1, 'origin': 11, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'return'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'for'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '!='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': ','}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '#'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'int'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'if'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '('}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'else'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '*'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '-='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'identifier'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '<='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '>'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'void'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '/='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '/'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'while'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '-'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': ';'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '=='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '<'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'break'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '}'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '+='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '+'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '*='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '{'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'continue'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': '>='}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': ')'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'float'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'double'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'char'}, {'left': 'declaration_parameter', 'right': ['identifier', 'declaration_parameter_assign'], 'point': 2, 'origin': 11, 'isTer': True, 'accept': 'number'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 0, 'origin': 12, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 1, 'origin': 12, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'return'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'for'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '!='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': ','}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '#'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'int'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'if'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '('}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'else'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '*'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '-='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'identifier'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '<='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '>'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'void'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '/='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '/'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'while'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '-'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': ';'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '=='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '<'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'break'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '}'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '+='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '+'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '*='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '{'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'continue'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': '>='}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': ')'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'float'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'double'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'char'}, {'left': 'declaration_parameter_assign', 'right': ['=', 'expression'], 'point': 2, 'origin': 12, 'isTer': True, 'accept': 'number'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'return'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'for'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '!='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': ','}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '#'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'int'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'if'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '('}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'else'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '*'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '-='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'identifier'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '<='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '>'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'void'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '/='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '/'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'while'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '-'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': ';'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '=='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '<'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'break'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '}'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '+='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '+'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '*='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '{'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'continue'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': '>='}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': ')'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'float'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'double'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'char'}, {'left': 'declaration_parameter_assign', 'right': [], 'point': 0, 'origin': 13, 'isTer': True, 'accept': 'number'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 0, 'origin': 14, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 1, 'origin': 14, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'return'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'for'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '!='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': ','}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '#'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'int'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'if'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '('}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'else'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '*'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '-='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'identifier'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '<='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '>'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'void'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '/='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '/'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'while'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '-'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': ';'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '=='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '<'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'break'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '}'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '+='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '+'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '*='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '{'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'continue'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': '>='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': ')'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'float'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'double'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'char'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 2, 'origin': 14, 'isTer': False, 'accept': 'number'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'return'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'for'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '!='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': ','}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '#'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'int'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'if'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '('}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'else'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '*'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '-='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'identifier'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '<='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '>'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'void'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '/='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '/'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'while'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '-'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': ';'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '=='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '<'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'break'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '}'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '+='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '+'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '*='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '{'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'continue'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': '>='}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': ')'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'float'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'double'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'char'}, {'left': 'declaration_parameter_suffix', 'right': [',', 'declaration_parameter', 'declaration_parameter_suffix'], 'point': 3, 'origin': 14, 'isTer': True, 'accept': 'number'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'return'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'for'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '!='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': ','}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '#'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'int'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'if'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '('}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'else'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '*'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '-='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'identifier'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '<='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '>'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'void'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '/='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '/'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'while'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '-'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': ';'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '=='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '<'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'break'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '}'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '+='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '+'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '*='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '{'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'continue'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': '>='}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': ')'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'float'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'double'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'char'}, {'left': 'declaration_parameter_suffix', 'right': [], 'point': 0, 'origin': 15, 'isTer': True, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '!='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': ','}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '#'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '('}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '*'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '-='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '<='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '>'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '/='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '/'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '-'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': ';'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '=='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '<'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '}'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '+='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '+'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '*='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '{'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': '>='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': ')'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 0, 'origin': 16, 'isTer': False, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '!='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': ','}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '#'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '('}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '*'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '-='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '<='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '>'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '/='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '/'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '-'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': ';'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '=='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '<'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '}'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '+='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '+'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '*='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '{'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': '>='}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': ')'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['identifier'], 'point': 1, 'origin': 16, 'isTer': True, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '!='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': ','}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '#'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '('}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '*'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '-='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '<='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '>'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '/='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '/'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '-'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': ';'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '=='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '<'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '}'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '+='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '+'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '*='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '{'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': '>='}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': ')'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['number'], 'point': 0, 'origin': 17, 'isTer': False, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '!='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': ','}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '#'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '('}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '*'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '-='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '<='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '>'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '/='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '/'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '-'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': ';'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '=='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '<'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '}'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '+='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '+'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '*='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '{'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': '>='}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': ')'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['number'], 'point': 1, 'origin': 17, 'isTer': True, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '!='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': ','}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '#'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '('}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '*'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '-='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '<='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '>'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '/='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '/'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '-'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': ';'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '=='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '<'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '}'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '+='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '+'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '*='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '{'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': '>='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': ')'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 0, 'origin': 18, 'isTer': False, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '!='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': ','}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '#'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '('}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '*'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '-='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '<='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '>'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '/='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '/'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '-'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': ';'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '=='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '<'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '}'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '+='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '+'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '*='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '{'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': '>='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': ')'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 1, 'origin': 18, 'isTer': False, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '!='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': ','}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '#'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '('}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '*'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '-='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '<='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '>'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '/='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '/'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '-'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': ';'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '=='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '<'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '}'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '+='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '+'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '*='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '{'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': '>='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': ')'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 2, 'origin': 18, 'isTer': False, 'accept': 'number'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'return'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'for'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '!='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': ','}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '#'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'int'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'if'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '('}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'else'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '*'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '-='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'identifier'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '<='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '>'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'void'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '/='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '/'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'while'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '-'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': ';'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '=='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '<'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'break'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '}'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '+='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '+'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '*='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '{'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'continue'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': '>='}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': ')'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'float'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'double'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'char'}, {'left': 'primary_expression', 'right': ['(', 'expression', ')'], 'point': 3, 'origin': 18, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['+'], 'point': 0, 'origin': 19, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['+'], 'point': 1, 'origin': 19, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['-'], 'point': 0, 'origin': 20, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['-'], 'point': 1, 'origin': 20, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['*'], 'point': 0, 'origin': 21, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['*'], 'point': 1, 'origin': 21, 'isTer': True, 'accept': 'number'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'return'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'for'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '!='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': ','}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '#'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'int'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'if'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '('}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'else'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '*'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '-='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'identifier'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '<='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '>'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'void'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '/='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '/'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'while'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '-'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': ';'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '=='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '<'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'break'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '}'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '+='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '+'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '*='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '{'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'continue'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': '>='}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': ')'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'float'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'double'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'char'}, {'left': 'operator', 'right': ['/'], 'point': 0, 'origin': 22, 'isTer': False, 'accept': 'number'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'return'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'for'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '!='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': ','}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '#'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'int'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'if'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '('}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'else'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '*'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '-='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'identifier'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '<='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '>'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'void'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '/='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '/'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'while'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '-'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': ';'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '=='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '<'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'break'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '}'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '+='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '+'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '*='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '{'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'continue'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': '>='}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': ')'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'float'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'double'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'char'}, {'left': 'operator', 'right': ['/'], 'point': 1, 'origin': 22, 'isTer': True, 'accept': 'number'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'return'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'for'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '!='}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': ','}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '#'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'int'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'if'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '('}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'else'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '*'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '-='}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'identifier'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '<='}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '>'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'void'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '/='}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '/'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'while'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '-'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': ';'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '=='}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '<'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'break'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '='}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '}'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '+='}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '+'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '*='}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '{'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'continue'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': '>='}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': ')'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'float'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'double'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'char'}, {'left': 'relop', 'right': ['<'], 'point': 0, 'origin': 23, 'isTer': False, 'accept': 'number'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'return'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'for'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '!='}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': ','}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '#'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'int'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'if'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '('}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'else'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '*'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '-='}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'identifier'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '<='}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '>'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'void'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '/='}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '/'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'while'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '-'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': ';'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '=='}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '<'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'break'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '='}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '}'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '+='}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '+'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '*='}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '{'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'continue'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': '>='}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': ')'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'float'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'double'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'char'}, {'left': 'relop', 'right': ['<'], 'point': 1, 'origin': 23, 'isTer': True, 'accept': 'number'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'return'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'for'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '!='}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': ','}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '#'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'int'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'if'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '('}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'else'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '*'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '-='}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'identifier'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '<='}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '>'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'void'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '/='}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '/'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'while'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '-'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': ';'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '=='}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '<'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'break'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '='}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '}'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '+='}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '+'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '*='}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '{'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'continue'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': '>='}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': ')'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'float'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'double'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'char'}, {'left': 'relop', 'right': ['>'], 'point': 0, 'origin': 24, 'isTer': False, 'accept': 'number'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'return'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'for'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '!='}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': ','}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '#'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'int'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'if'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '('}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'else'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '*'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '-='}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'identifier'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '<='}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '>'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'void'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '/='}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '/'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'while'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '-'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': ';'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '=='}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '<'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'break'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '='}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '}'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '+='}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '+'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '*='}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '{'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'continue'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': '>='}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': ')'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'float'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'double'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'char'}, {'left': 'relop', 'right': ['>'], 'point': 1, 'origin': 24, 'isTer': True, 'accept': 'number'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'return'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'for'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '!='}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': ','}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '#'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'int'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'if'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '('}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'else'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '*'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '-='}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'identifier'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '<='}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '>'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'void'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '/='}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '/'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'while'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '-'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': ';'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '=='}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '<'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'break'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '='}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '}'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '+='}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '+'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '*='}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '{'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'continue'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': '>='}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': ')'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'float'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'double'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'char'}, {'left': 'relop', 'right': ['!='], 'point': 0, 'origin': 25, 'isTer': False, 'accept': 'number'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'return'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'for'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '!='}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': ','}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '#'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'int'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'if'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '('}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'else'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '*'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '-='}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'identifier'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '<='}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '>'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'void'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '/='}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '/'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'while'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '-'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': ';'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '=='}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '<'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'break'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '='}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '}'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '+='}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '+'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '*='}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '{'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'continue'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': '>='}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': ')'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'float'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'double'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'char'}, {'left': 'relop', 'right': ['!='], 'point': 1, 'origin': 25, 'isTer': True, 'accept': 'number'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'return'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'for'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '!='}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': ','}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '#'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'int'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'if'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '('}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'else'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '*'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '-='}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'identifier'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '<='}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '>'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'void'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '/='}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '/'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'while'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '-'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': ';'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '=='}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '<'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'break'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '='}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '}'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '+='}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '+'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '*='}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '{'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'continue'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': '>='}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': ')'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'float'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'double'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'char'}, {'left': 'relop', 'right': ['=='], 'point': 0, 'origin': 26, 'isTer': False, 'accept': 'number'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'return'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'for'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '!='}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': ','}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '#'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'int'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'if'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '('}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'else'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '*'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '-='}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'identifier'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '<='}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '>'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'void'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '/='}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '/'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'while'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '-'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': ';'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '=='}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '<'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'break'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '='}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '}'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '+='}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '+'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '*='}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '{'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'continue'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': '>='}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': ')'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'float'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'double'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'char'}, {'left': 'relop', 'right': ['=='], 'point': 1, 'origin': 26, 'isTer': True, 'accept': 'number'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'return'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'for'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '!='}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': ','}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '#'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'int'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'if'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '('}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'else'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '*'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '-='}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'identifier'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '<='}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '>'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'void'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '/='}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '/'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'while'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '-'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': ';'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '=='}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '<'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'break'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '='}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '}'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '+='}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '+'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '*='}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '{'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'continue'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': '>='}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': ')'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'float'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'double'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'char'}, {'left': 'relop', 'right': ['<='], 'point': 0, 'origin': 27, 'isTer': False, 'accept': 'number'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'return'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'for'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '!='}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': ','}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '#'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'int'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'if'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '('}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'else'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '*'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '-='}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'identifier'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '<='}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '>'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'void'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '/='}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '/'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'while'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '-'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': ';'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '=='}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '<'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'break'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '='}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '}'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '+='}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '+'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '*='}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '{'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'continue'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': '>='}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': ')'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'float'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'double'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'char'}, {'left': 'relop', 'right': ['<='], 'point': 1, 'origin': 27, 'isTer': True, 'accept': 'number'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'return'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'for'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '!='}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': ','}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '#'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'int'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'if'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '('}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'else'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '*'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '-='}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'identifier'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '<='}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '>'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'void'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '/='}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '/'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'while'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '-'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': ';'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '=='}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '<'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'break'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '='}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '}'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '+='}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '+'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '*='}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '{'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'continue'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': '>='}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': ')'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'float'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'double'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'char'}, {'left': 'relop', 'right': ['>='], 'point': 0, 'origin': 28, 'isTer': False, 'accept': 'number'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'return'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'for'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '!='}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': ','}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '#'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'int'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'if'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '('}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'else'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '*'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '-='}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'identifier'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '<='}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '>'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'void'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '/='}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '/'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'while'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '-'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': ';'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '=='}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '<'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'break'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '='}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '}'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '+='}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '+'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '*='}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '{'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'continue'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': '>='}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': ')'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'float'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'double'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'char'}, {'left': 'relop', 'right': ['>='], 'point': 1, 'origin': 28, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['='], 'point': 0, 'origin': 29, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['='], 'point': 1, 'origin': 29, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 0, 'origin': 30, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['+='], 'point': 1, 'origin': 30, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 0, 'origin': 31, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['-='], 'point': 1, 'origin': 31, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 0, 'origin': 32, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['*='], 'point': 1, 'origin': 32, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': ','}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '('}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 0, 'origin': 33, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '!='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': ','}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '#'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '('}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '*'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '-='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '<='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '>'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '/='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '/'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '-'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': ';'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '=='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '<'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '}'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '+='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '+'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '*='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '{'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': '>='}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': ')'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_operator', 'right': ['/='], 'point': 1, 'origin': 33, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 0, 'origin': 34, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 1, 'origin': 34, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 2, 'origin': 34, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '!='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': ','}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '#'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '('}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '*'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '-='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '<='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '>'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '/='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '/'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '-'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': ';'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '=='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '<'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '}'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '+='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '+'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '*='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '{'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': '>='}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': ')'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_expression', 'right': ['identifier', 'assignment_operator', 'expression'], 'point': 3, 'origin': 34, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 35, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 35, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 35, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '!='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': ','}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '#'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '('}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '*'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '-='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '<='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '>'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '/='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '/'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '-'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': ';'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '=='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '<'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '}'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '+='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '+'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '*='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '{'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': '>='}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': ')'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_expression_list_suffix', 'right': [',', 'assignment_expression', 'assignment_expression_list_suffix'], 'point': 3, 'origin': 35, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '!='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': ','}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '#'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '('}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '*'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '-='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '<='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '>'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '/='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '/'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '-'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': ';'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '=='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '<'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '}'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '+='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '+'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '*='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '{'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': '>='}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': ')'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_expression_list_suffix', 'right': [], 'point': 0, 'origin': 36, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 0, 'origin': 37, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'return'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'for'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '!='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': ','}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '#'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'int'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'if'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '('}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'else'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '*'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '-='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'identifier'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '<='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '>'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'void'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '/='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '/'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'while'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '-'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': ';'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '=='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '<'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'break'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '}'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '+='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '+'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '*='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '{'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'continue'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': '>='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': ')'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'float'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'double'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'char'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 1, 'origin': 37, 'isTer': False, 'accept': 'number'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '!='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': ','}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '#'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '('}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '*'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '-='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '<='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '>'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '/='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '/'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '-'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': ';'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '=='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '<'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '}'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '+='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '+'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '*='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '{'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': '>='}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': ')'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_expression_list', 'right': ['assignment_expression', 'assignment_expression_list_suffix'], 'point': 2, 'origin': 37, 'isTer': True, 'accept': 'number'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'return'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'for'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '!='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': ','}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '#'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'int'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'if'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '('}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'else'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '*'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '-='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'identifier'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '<='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '>'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'void'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '/='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '/'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'while'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '-'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': ';'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '=='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '<'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'break'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '}'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '+='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '+'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '*='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '{'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'continue'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': '>='}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': ')'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'float'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'double'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'char'}, {'left': 'assignment_expression_list', 'right': [], 'point': 0, 'origin': 38, 'isTer': True, 'accept': 'number'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'return'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'for'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '!='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': ','}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '#'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'int'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'if'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '('}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'else'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '*'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '-='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '<='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '>'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'void'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '/='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '/'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'while'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '-'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': ';'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '=='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '<'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'break'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '}'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '+='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '+'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '*='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '{'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'continue'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': '>='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': ')'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'float'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'double'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'char'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 0, 'origin': 39, 'isTer': False, 'accept': 'number'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'return'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'for'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '!='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': ','}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '#'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'int'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'if'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '('}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'else'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '*'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '-='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '<='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '>'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'void'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '/='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '/'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'while'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '-'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': ';'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '=='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '<'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'break'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '}'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '+='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '+'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '*='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '{'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'continue'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': '>='}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': ')'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'float'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'double'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'char'}, {'left': 'expression', 'right': ['constant_expression'], 'point': 1, 'origin': 39, 'isTer': True, 'accept': 'number'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'return'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'for'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '!='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': ','}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '#'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'int'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'if'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '('}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'else'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '*'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '-='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '<='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '>'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'void'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '/='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '/'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'while'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '-'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': ';'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '=='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '<'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'break'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '}'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '+='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '+'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '*='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '{'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'continue'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': '>='}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': ')'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'float'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'double'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'char'}, {'left': 'expression', 'right': ['function_expression'], 'point': 0, 'origin': 40, 'isTer': False, 'accept': 'number'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'return'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'for'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '!='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': ','}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '#'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'int'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'if'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '('}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'else'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '*'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '-='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '<='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '>'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'void'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '/='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '/'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'while'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '-'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': ';'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '=='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '<'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'break'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '}'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '+='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '+'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '*='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '{'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'continue'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': '>='}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': ')'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'float'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'double'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'char'}, {'left': 'expression', 'right': ['function_expression'], 'point': 1, 'origin': 40, 'isTer': True, 'accept': 'number'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'return'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'for'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '!='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': ','}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '#'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'int'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'if'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '('}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'else'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '*'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '-='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'identifier'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '<='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '>'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'void'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '/='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '/'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'while'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '-'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': ';'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '=='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '<'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'break'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '}'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '+='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '+'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '*='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '{'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'continue'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': '>='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': ')'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'float'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'double'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'char'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 41, 'isTer': False, 'accept': 'number'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'return'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'for'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '!='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': ','}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '#'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'int'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'if'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '('}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'else'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '*'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '-='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'identifier'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '<='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '>'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'void'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '/='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '/'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'while'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '-'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': ';'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '=='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '<'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'break'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '}'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '+='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '+'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '*='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '{'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'continue'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': '>='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': ')'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'float'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'double'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'char'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 41, 'isTer': False, 'accept': 'number'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'return'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'for'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '!='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': ','}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '#'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'int'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'if'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '('}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'else'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '*'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '-='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'identifier'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '<='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '>'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'void'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '/='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '/'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'while'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '-'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': ';'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '=='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '<'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'break'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '}'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '+='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '+'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '*='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '{'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'continue'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': '>='}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': ')'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'float'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'double'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'char'}, {'left': 'constant_expression', 'right': ['primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 41, 'isTer': True, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': ','}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '('}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 42, 'isTer': False, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': ','}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '('}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 42, 'isTer': False, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': ','}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '('}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 42, 'isTer': False, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': ','}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '('}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': ['operator', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 42, 'isTer': True, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': ','}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '('}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 0, 'origin': 43, 'isTer': False, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': ','}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '('}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 1, 'origin': 43, 'isTer': False, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': ','}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '('}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 2, 'origin': 43, 'isTer': False, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': ','}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '('}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': ['relop', 'primary_expression', 'arithmetic_expression'], 'point': 3, 'origin': 43, 'isTer': True, 'accept': 'number'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'return'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'for'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '!='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': ','}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '#'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'int'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'if'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '('}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'else'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '*'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '-='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'identifier'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '<='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '>'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'void'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '/='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '/'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'while'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '-'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': ';'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '=='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '<'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'break'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '}'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '+='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '+'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '*='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '{'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'continue'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': '>='}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': ')'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'float'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'double'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'char'}, {'left': 'arithmetic_expression', 'right': [], 'point': 0, 'origin': 44, 'isTer': True, 'accept': 'number'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'return'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'for'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '!='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': ','}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '#'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'int'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'if'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '('}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'else'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '*'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '-='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '<='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '>'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'void'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '/='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '/'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'while'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '-'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': ';'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '=='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '<'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'break'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '}'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '+='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '+'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '*='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '{'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'continue'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': '>='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': ')'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'float'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'double'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'char'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 0, 'origin': 45, 'isTer': False, 'accept': 'number'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'return'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'for'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '!='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': ','}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '#'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'int'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'if'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '('}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'else'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '*'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '-='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '<='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '>'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'void'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '/='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '/'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'while'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '-'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': ';'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '=='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '<'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'break'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '}'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '+='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '+'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '*='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '{'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'continue'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': '>='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': ')'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'float'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'double'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'char'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 1, 'origin': 45, 'isTer': False, 'accept': 'number'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'return'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'for'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '!='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': ','}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '#'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'int'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'if'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '('}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'else'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '*'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '-='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '<='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '>'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'void'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '/='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '/'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'while'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '-'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': ';'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '=='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '<'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'break'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '}'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '+='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '+'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '*='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '{'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'continue'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': '>='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': ')'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'float'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'double'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'char'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 2, 'origin': 45, 'isTer': False, 'accept': 'number'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'return'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'for'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '!='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': ','}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '#'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'int'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'if'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '('}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'else'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '*'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '-='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '<='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '>'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'void'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '/='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '/'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'while'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '-'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': ';'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '=='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '<'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'break'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '}'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '+='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '+'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '*='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '{'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'continue'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': '>='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': ')'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'float'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'double'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'char'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 3, 'origin': 45, 'isTer': False, 'accept': 'number'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'return'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'for'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '!='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': ','}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '#'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'int'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'if'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '('}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'else'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '*'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '-='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '<='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '>'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'void'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '/='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '/'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'while'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '-'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': ';'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '=='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '<'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'break'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '}'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '+='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '+'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '*='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '{'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'continue'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': '>='}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': ')'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'float'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'double'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'char'}, {'left': 'function_expression', 'right': ['identifier', '(', 'expression_list', ')'], 'point': 4, 'origin': 45, 'isTer': True, 'accept': 'number'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'return'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'for'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '!='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': ','}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '#'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'int'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'if'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '('}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'else'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '*'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '-='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '<='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '>'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'void'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '/='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '/'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'while'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '-'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': ';'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '=='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '<'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'break'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '}'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '+='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '+'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '*='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '{'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': '>='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': ')'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'float'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'double'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'char'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 0, 'origin': 46, 'isTer': False, 'accept': 'number'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'return'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'for'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '!='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': ','}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '#'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'int'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'if'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '('}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'else'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '*'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '-='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '<='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '>'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'void'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '/='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '/'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'while'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '-'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': ';'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '=='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '<'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'break'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '}'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '+='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '+'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '*='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '{'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': '>='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': ')'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'float'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'double'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'char'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 1, 'origin': 46, 'isTer': False, 'accept': 'number'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'return'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'for'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '!='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': ','}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '#'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'int'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'if'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '('}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'else'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '*'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '-='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '<='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '>'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'void'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '/='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '/'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'while'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '-'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': ';'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '=='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '<'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'break'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '}'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '+='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '+'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '*='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '{'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': '>='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': ')'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'float'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'double'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'char'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 2, 'origin': 46, 'isTer': False, 'accept': 'number'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'return'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'for'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '!='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': ','}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '#'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'int'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'if'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '('}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'else'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '*'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '-='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '<='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '>'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'void'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '/='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '/'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'while'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '-'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': ';'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '=='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '<'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'break'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '}'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '+='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '+'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '*='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '{'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'continue'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': '>='}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': ')'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'float'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'double'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'char'}, {'left': 'expression_list_suffix', 'right': [',', 'expression', 'expression_list_suffix'], 'point': 3, 'origin': 46, 'isTer': True, 'accept': 'number'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'return'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'for'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '!='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': ','}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '#'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'int'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'if'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '('}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'else'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '*'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '-='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '<='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '>'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'void'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '/='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '/'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'while'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '-'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': ';'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '=='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '<'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'break'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '}'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '+='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '+'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '*='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '{'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'continue'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': '>='}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': ')'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'float'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'double'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'char'}, {'left': 'expression_list_suffix', 'right': [], 'point': 0, 'origin': 47, 'isTer': True, 'accept': 'number'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'return'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'for'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '!='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': ','}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '#'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'int'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'if'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '('}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'else'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '*'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '-='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '<='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '>'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'void'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '/='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '/'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'while'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '-'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': ';'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '=='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '<'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'break'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '}'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '+='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '+'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '*='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '{'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': '>='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': ')'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'float'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'double'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'char'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 0, 'origin': 48, 'isTer': False, 'accept': 'number'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'return'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'for'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '!='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': ','}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '#'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'int'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'if'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '('}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'else'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '*'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '-='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '<='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '>'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'void'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '/='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '/'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'while'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '-'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': ';'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '=='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '<'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'break'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '}'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '+='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '+'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '*='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '{'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': '>='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': ')'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'float'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'double'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'char'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 1, 'origin': 48, 'isTer': False, 'accept': 'number'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'return'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'for'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '!='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': ','}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '#'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'int'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'if'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '('}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'else'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '*'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '-='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '<='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '>'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'void'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '/='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '/'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'while'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '-'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': ';'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '=='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '<'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'break'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '}'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '+='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '+'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '*='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '{'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'continue'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': '>='}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': ')'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'float'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'double'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'char'}, {'left': 'expression_list', 'right': ['expression', 'expression_list_suffix'], 'point': 2, 'origin': 48, 'isTer': True, 'accept': 'number'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'return'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'for'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '!='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': ','}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '#'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'int'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'if'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '('}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'else'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '*'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '-='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '<='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '>'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'void'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '/='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '/'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'while'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '-'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': ';'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '=='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '<'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'break'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '}'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '+='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '+'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '*='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '{'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'continue'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': '>='}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': ')'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'float'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'double'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'char'}, {'left': 'expression_list', 'right': [], 'point': 0, 'origin': 49, 'isTer': True, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 0, 'origin': 50, 'isTer': False, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 1, 'origin': 50, 'isTer': False, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 2, 'origin': 50, 'isTer': False, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 3, 'origin': 50, 'isTer': False, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 4, 'origin': 50, 'isTer': False, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 5, 'origin': 50, 'isTer': False, 'accept': 'number'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'return'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'for'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '!='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': ','}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '#'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'int'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'if'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '('}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'else'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '*'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '-='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '<='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '>'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'void'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '/='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '/'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'while'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '-'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': ';'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '=='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '<'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'break'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '}'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '+='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '+'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '*='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '{'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'continue'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': '>='}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': ')'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'float'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'double'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'char'}, {'left': 'function_definition', 'right': ['type_specifier', 'identifier', '(', 'function_parameter_list', ')', 'compound_statement'], 'point': 6, 'origin': 50, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 51, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 51, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': ','}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '('}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter_list', 'right': ['function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 51, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': ','}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '('}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter_list', 'right': [], 'point': 0, 'origin': 52, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 0, 'origin': 53, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': ','}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '('}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter_list', 'right': ['void'], 'point': 1, 'origin': 53, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 0, 'origin': 54, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 1, 'origin': 54, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 2, 'origin': 54, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': [',', 'function_parameter', 'function_parameter_list_suffix'], 'point': 3, 'origin': 54, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': [], 'point': 0, 'origin': 55, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 0, 'origin': 56, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': ','}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '('}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter_list_suffix', 'right': ['void'], 'point': 1, 'origin': 56, 'isTer': True, 'accept': 'number'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': ','}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '('}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 0, 'origin': 57, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'return'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'for'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '!='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': ','}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '#'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'int'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'if'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '('}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'else'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '*'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '-='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'identifier'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '<='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '>'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'void'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '/='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '/'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'while'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '-'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': ';'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '=='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '<'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'break'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '}'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '+='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '+'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '*='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '{'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'continue'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': '>='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': ')'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'float'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'double'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'char'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 1, 'origin': 57, 'isTer': False, 'accept': 'number'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'return'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'for'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '!='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': ','}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '#'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'int'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'if'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '('}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'else'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '*'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '-='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'identifier'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '<='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '>'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'void'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '/='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '/'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'while'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '-'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': ';'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '=='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '<'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'break'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '}'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '+='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '+'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '*='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '{'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'continue'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': '>='}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': ')'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'float'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'double'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'char'}, {'left': 'function_parameter', 'right': ['type_specifier', 'identifier'], 'point': 2, 'origin': 57, 'isTer': True, 'accept': 'number'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'return'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'for'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '!='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': ','}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '#'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'int'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'if'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '('}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'else'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '*'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '-='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'identifier'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '<='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '>'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'void'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '/='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '/'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'while'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '-'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': ';'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '=='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '<'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'break'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '}'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '+='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '+'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '*='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '{'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'continue'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': '>='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': ')'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'float'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'double'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'char'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 0, 'origin': 58, 'isTer': False, 'accept': 'number'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'return'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'for'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '!='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': ','}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '#'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'int'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'if'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '('}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'else'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '*'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '-='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'identifier'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '<='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '>'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'void'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '/='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '/'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'while'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '-'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': ';'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '=='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '<'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'break'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '}'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '+='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '+'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '*='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '{'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'continue'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': '>='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': ')'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'float'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'double'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'char'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 1, 'origin': 58, 'isTer': False, 'accept': 'number'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'return'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'for'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '!='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': ','}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '#'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'int'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'if'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '('}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'else'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '*'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '-='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'identifier'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '<='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '>'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'void'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '/='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '/'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'while'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '-'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': ';'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '=='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '<'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'break'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '}'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '+='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '+'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '*='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '{'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'continue'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': '>='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': ')'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'float'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'double'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'char'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 2, 'origin': 58, 'isTer': False, 'accept': 'number'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'return'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'for'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '!='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': ','}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '#'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'int'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'if'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '('}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'else'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '*'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '-='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'identifier'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '<='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '>'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'void'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '/='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '/'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'while'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '-'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': ';'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '=='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '<'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'break'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '}'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '+='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '+'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '*='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '{'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'continue'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': '>='}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': ')'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'float'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'double'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'char'}, {'left': 'compound_statement', 'right': ['{', 'statement_list', '}'], 'point': 3, 'origin': 58, 'isTer': True, 'accept': 'number'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'return'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'for'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '!='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': ','}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '#'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'int'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'if'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '('}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'else'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '*'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '-='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '<='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '>'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'void'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '/='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '/'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'while'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '-'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': ';'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '=='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '<'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'break'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '}'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '+='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '+'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '*='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '{'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'continue'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': '>='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': ')'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'float'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'double'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'char'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 0, 'origin': 59, 'isTer': False, 'accept': 'number'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'return'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'for'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '!='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': ','}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '#'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'int'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'if'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '('}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'else'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '*'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '-='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '<='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '>'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'void'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '/='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '/'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'while'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '-'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': ';'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '=='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '<'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'break'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '}'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '+='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '+'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '*='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '{'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'continue'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': '>='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': ')'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'float'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'double'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'char'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 1, 'origin': 59, 'isTer': False, 'accept': 'number'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'return'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'for'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '!='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': ','}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '#'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'int'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'if'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '('}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'else'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '*'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '-='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '<='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '>'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'void'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '/='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '/'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'while'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '-'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': ';'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '=='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '<'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'break'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '}'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '+='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '+'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '*='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '{'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'continue'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': '>='}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': ')'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'float'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'double'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'char'}, {'left': 'statement_list', 'right': ['statement', 'statement_list'], 'point': 2, 'origin': 59, 'isTer': True, 'accept': 'number'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'return'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'for'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '!='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': ','}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '#'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'int'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'if'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '('}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'else'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '*'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '-='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '<='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '>'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'void'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '/='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '/'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'while'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '-'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': ';'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '=='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '<'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'break'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '}'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '+='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '+'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '*='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '{'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'continue'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': '>='}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': ')'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'float'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'double'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'char'}, {'left': 'statement_list', 'right': [], 'point': 0, 'origin': 60, 'isTer': True, 'accept': 'number'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'return'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'for'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '!='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': ','}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '#'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'int'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'if'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '('}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'else'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '*'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '-='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '<='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '>'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'void'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '/='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '/'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'while'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '-'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': ';'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '=='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '<'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'break'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '}'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '+='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '+'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '*='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '{'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'continue'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': '>='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': ')'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'float'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'double'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'char'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 0, 'origin': 61, 'isTer': False, 'accept': 'number'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'return'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'for'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '!='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': ','}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '#'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'int'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'if'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '('}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'else'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '*'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '-='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '<='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '>'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'void'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '/='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '/'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'while'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '-'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': ';'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '=='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '<'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'break'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '}'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '+='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '+'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '*='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '{'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'continue'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': '>='}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': ')'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'float'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'double'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'char'}, {'left': 'statement', 'right': ['expression_statement'], 'point': 1, 'origin': 61, 'isTer': True, 'accept': 'number'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'return'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'for'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '!='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': ','}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '#'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'int'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'if'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '('}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'else'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '*'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '-='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '<='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '>'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'void'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '/='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '/'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'while'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '-'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': ';'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '=='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '<'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'break'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '}'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '+='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '+'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '*='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '{'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'continue'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': '>='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': ')'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'float'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'double'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'char'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 0, 'origin': 62, 'isTer': False, 'accept': 'number'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'return'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'for'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '!='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': ','}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '#'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'int'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'if'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '('}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'else'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '*'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '-='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '<='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '>'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'void'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '/='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '/'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'while'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '-'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': ';'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '=='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '<'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'break'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '}'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '+='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '+'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '*='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '{'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'continue'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': '>='}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': ')'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'float'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'double'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'char'}, {'left': 'statement', 'right': ['jump_statement'], 'point': 1, 'origin': 62, 'isTer': True, 'accept': 'number'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'return'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'for'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '!='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': ','}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '#'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'int'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'if'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '('}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'else'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '*'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '-='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '<='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '>'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'void'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '/='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '/'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'while'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '-'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': ';'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '=='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '<'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'break'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '}'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '+='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '+'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '*='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '{'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'continue'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': '>='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': ')'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'float'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'double'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'char'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 0, 'origin': 63, 'isTer': False, 'accept': 'number'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'return'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'for'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '!='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': ','}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '#'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'int'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'if'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '('}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'else'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '*'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '-='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '<='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '>'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'void'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '/='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '/'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'while'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '-'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': ';'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '=='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '<'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'break'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '}'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '+='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '+'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '*='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '{'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'continue'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': '>='}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': ')'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'float'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'double'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'char'}, {'left': 'statement', 'right': ['selection_statement'], 'point': 1, 'origin': 63, 'isTer': True, 'accept': 'number'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'return'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'for'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '!='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': ','}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '#'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'int'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'if'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '('}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'else'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '*'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '-='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '<='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '>'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'void'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '/='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '/'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'while'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '-'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': ';'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '=='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '<'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'break'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '}'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '+='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '+'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '*='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '{'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'continue'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': '>='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': ')'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'float'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'double'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'char'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 0, 'origin': 64, 'isTer': False, 'accept': 'number'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'return'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'for'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '!='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': ','}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '#'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'int'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'if'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '('}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'else'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '*'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '-='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '<='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '>'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'void'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '/='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '/'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'while'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '-'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': ';'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '=='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '<'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'break'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '}'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '+='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '+'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '*='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '{'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'continue'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': '>='}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': ')'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'float'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'double'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'char'}, {'left': 'statement', 'right': ['iteration_statement'], 'point': 1, 'origin': 64, 'isTer': True, 'accept': 'number'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'return'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'for'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '!='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': ','}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '#'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'int'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'if'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '('}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'else'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '*'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '-='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '<='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '>'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'void'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '/='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '/'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'while'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '-'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': ';'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '=='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '<'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'break'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '}'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '+='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '+'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '*='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '{'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'continue'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': '>='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': ')'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'float'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'double'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'char'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 0, 'origin': 65, 'isTer': False, 'accept': 'number'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'return'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'for'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '!='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': ','}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '#'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'int'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'if'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '('}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'else'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '*'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '-='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '<='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '>'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'void'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '/='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '/'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'while'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '-'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': ';'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '=='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '<'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'break'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '}'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '+='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '+'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '*='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '{'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'continue'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': '>='}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': ')'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'float'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'double'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'char'}, {'left': 'statement', 'right': ['compound_statement'], 'point': 1, 'origin': 65, 'isTer': True, 'accept': 'number'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'return'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'for'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '!='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': ','}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '#'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'int'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'if'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '('}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'else'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '*'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '-='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'identifier'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '<='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '>'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'void'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '/='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '/'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'while'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '-'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': ';'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '=='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '<'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'break'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '}'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '+='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '+'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '*='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '{'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'continue'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': '>='}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': ')'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'float'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'double'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'char'}, {'left': 'statement', 'right': ['declaration'], 'point': 0, 'origin': 66, 'isTer': False, 'accept': 'number'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'return'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'for'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '!='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': ','}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '#'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'int'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'if'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '('}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'else'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '*'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '-='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'identifier'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '<='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '>'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'void'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '/='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '/'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'while'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '-'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': ';'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '=='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '<'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'break'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '}'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '+='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '+'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '*='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '{'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'continue'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': '>='}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': ')'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'float'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'double'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'char'}, {'left': 'statement', 'right': ['declaration'], 'point': 1, 'origin': 66, 'isTer': True, 'accept': 'number'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'return'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'for'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '!='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': ','}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '#'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'int'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'if'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '('}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'else'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '*'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '-='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '<='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '>'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'void'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '/='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '/'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'while'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '-'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': ';'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '=='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '<'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'break'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '}'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '+='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '+'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '*='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '{'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': '>='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': ')'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'float'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'double'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'char'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 0, 'origin': 67, 'isTer': False, 'accept': 'number'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'return'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'for'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '!='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': ','}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '#'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'int'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'if'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '('}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'else'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '*'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '-='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'identifier'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '<='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '>'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'void'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '/='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '/'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'while'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '-'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': ';'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '=='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '<'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'break'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '}'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '+='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '+'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '*='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '{'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'continue'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': '>='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': ')'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'float'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'double'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'char'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 1, 'origin': 67, 'isTer': False, 'accept': 'number'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'return'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'for'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '!='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': ','}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '#'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'int'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'if'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '('}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'else'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '*'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '-='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'identifier'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '<='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '>'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'void'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '/='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '/'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'while'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '-'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': ';'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '=='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '<'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'break'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '}'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '+='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '+'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '*='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '{'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'continue'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': '>='}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': ')'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'float'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'double'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'char'}, {'left': 'expression_statement', 'right': ['assignment_expression_list', ';'], 'point': 2, 'origin': 67, 'isTer': True, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 0, 'origin': 68, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 1, 'origin': 68, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '!='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': ','}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '#'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '('}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '*'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '-='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '<='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '>'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '/='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '/'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '-'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': ';'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '=='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '<'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '}'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '+='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '+'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '*='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '{'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': '>='}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': ')'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['continue', ';'], 'point': 2, 'origin': 68, 'isTer': True, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 0, 'origin': 69, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 1, 'origin': 69, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '!='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': ','}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '#'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '('}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '*'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '-='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '<='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '>'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '/='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '/'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '-'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': ';'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '=='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '<'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '}'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '+='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '+'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '*='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '{'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': '>='}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': ')'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['break', ';'], 'point': 2, 'origin': 69, 'isTer': True, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 0, 'origin': 70, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 1, 'origin': 70, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 2, 'origin': 70, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', 'expression', ';'], 'point': 3, 'origin': 70, 'isTer': True, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 0, 'origin': 71, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 1, 'origin': 71, 'isTer': False, 'accept': 'number'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'return'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'for'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '!='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': ','}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '#'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'int'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'if'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '('}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'else'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '*'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '-='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'identifier'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '<='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '>'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'void'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '/='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '/'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'while'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '-'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': ';'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '=='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '<'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'break'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '}'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '+='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '+'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '*='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '{'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'continue'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': '>='}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': ')'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'float'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'double'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'char'}, {'left': 'jump_statement', 'right': ['return', ';'], 'point': 2, 'origin': 71, 'isTer': True, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 0, 'origin': 72, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 1, 'origin': 72, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 2, 'origin': 72, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 3, 'origin': 72, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 4, 'origin': 72, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 5, 'origin': 72, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 6, 'origin': 72, 'isTer': False, 'accept': 'number'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'return'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'for'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '!='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': ','}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '#'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'int'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'if'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '('}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'else'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '*'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '-='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'identifier'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '<='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '>'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'void'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '/='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '/'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'while'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '-'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': ';'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '=='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '<'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'break'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '}'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '+='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '+'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '*='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '{'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'continue'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': '>='}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': ')'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'float'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'double'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'char'}, {'left': 'selection_statement', 'right': ['if', '(', 'expression', ')', 'statement', 'else', 'statement'], 'point': 7, 'origin': 72, 'isTer': True, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 0, 'origin': 73, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 1, 'origin': 73, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 2, 'origin': 73, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 3, 'origin': 73, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 4, 'origin': 73, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': ','}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '('}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['while', '(', 'expression', ')', 'statement'], 'point': 5, 'origin': 73, 'isTer': True, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 0, 'origin': 74, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 1, 'origin': 74, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 2, 'origin': 74, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 3, 'origin': 74, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 4, 'origin': 74, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 5, 'origin': 74, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 6, 'origin': 74, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 7, 'origin': 74, 'isTer': False, 'accept': 'number'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'return'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'for'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '!='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': ','}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '#'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'int'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'if'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '('}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'else'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '*'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '-='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'identifier'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '<='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '>'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'void'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '/='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '/'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'while'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '-'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': ';'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '=='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '<'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'break'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '}'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '+='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '+'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '*='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '{'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'continue'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': '>='}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': ')'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'float'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'double'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'char'}, {'left': 'iteration_statement', 'right': ['for', '(', 'declaration', 'expression', ';', 'assignment_expression', ')', 'statement'], 'point': 8, 'origin': 74, 'isTer': True, 'accept': 'number'}] 

原点在开头的产生式编号：
 {'sstart': {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35}, 'start': {204, 205, 214, 206, 207, 208, 209, 210, 215, 211, 212, 213, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 200, 201, 202, 203}, 'external_declaration': {288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251}, 'type_specifier': {512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 504, 505, 506, 507, 508, 509, 510, 511}, 'declaration': {720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755}, 'declaration_parameter': {900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935}, 'declaration_parameter_assign': {1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1147, 1148, 1149, 1150, 1151, 1146, 1141, 1145, 1144, 1140, 1139, 1142, 1136, 1143, 1138, 1137, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023}, 'declaration_parameter_suffix': {1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1303, 1304, 1305, 1310, 1311, 1312, 1299, 1306, 1315, 1316, 1317, 1318, 1307, 1320, 1321, 1322, 1323, 1308, 1325, 1326, 1327, 1328, 1309, 1330, 1331, 1324, 1300, 1313, 1314, 1298, 1329, 1301, 1319, 1302, 1296, 1297}, 'primary_expression': {1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1404, 1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1439, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488, 1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511}, 'operator': {1620, 1621, 1622, 1623, 1624, 1625, 1626, 1627, 1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869, 1870, 1871}, 'relop': {2052, 2053, 2054, 2055, 2056, 2057, 2058, 2059, 2060, 2061, 2062, 2063, 2064, 2065, 2066, 2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076, 2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086, 2087, 2124, 2125, 2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135, 2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146, 2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156, 2157, 2158, 2159, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226, 2227, 2228, 2229, 2230, 2231, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 1908, 1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1980, 1981, 1982, 1983, 1984, 1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015}, 'assignment_operator': {2560, 2561, 2562, 2563, 2564, 2565, 2566, 2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576, 2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639, 2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2649, 2650, 2651, 2652, 2653, 2654, 2655, 2656, 2657, 2658, 2659, 2660, 2661, 2662, 2663, 2340, 2341, 2342, 2343, 2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2412, 2413, 2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446, 2447, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506, 2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516, 2517, 2518, 2519, 2556, 2557, 2558, 2559}, 'assignment_expression': {2700, 2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722, 2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2731, 2732, 2733, 2734, 2735}, 'assignment_expression_list_suffix': {3003, 3008, 3013, 2844, 2845, 2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876, 2877, 2878, 2879, 2988, 2989, 3001, 3002, 2990, 3004, 3005, 3006, 3007, 2991, 3009, 3010, 3011, 3012, 2992, 3014, 3015, 3016, 3017, 2993, 3018, 3020, 3019, 3022, 2994, 2995, 3021, 2996, 2997, 3023, 2998, 2999, 3000}, 'assignment_expression_list': {3155, 3156, 3157, 3158, 3159, 3160, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3132, 3133, 3134, 3135, 3136, 3137, 3138, 3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3024, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034, 3035, 3036, 3037, 3038, 3039, 3040, 3041, 3042, 3043, 3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3052, 3053, 3054, 3055, 3056, 3057, 3058, 3059, 3152, 3153, 3154}, 'expression': {3200, 3201, 3202, 3203, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247, 3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257, 3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3266, 3267, 3268, 3269, 3270, 3271, 3272, 3273, 3274, 3275, 3168, 3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3195, 3196, 3197, 3198, 3199}, 'constant_expression': {3328, 3329, 3330, 3331, 3332, 3333, 3334, 3335, 3336, 3337, 3338, 3339, 3340, 3341, 3342, 3343, 3344, 3345, 3346, 3347, 3312, 3313, 3314, 3315, 3316, 3317, 3318, 3319, 3320, 3321, 3322, 3323, 3324, 3325, 3326, 3327}, 'arithmetic_expression': {3584, 3585, 3586, 3587, 3588, 3589, 3590, 3591, 3592, 3593, 3594, 3595, 3596, 3597, 3598, 3599, 3708, 3709, 3710, 3711, 3712, 3713, 3714, 3715, 3716, 3717, 3718, 3719, 3720, 3721, 3722, 3723, 3724, 3725, 3726, 3727, 3728, 3729, 3730, 3731, 3732, 3733, 3734, 3735, 3736, 3737, 3738, 3739, 3740, 3741, 3742, 3743, 3420, 3421, 3422, 3423, 3424, 3425, 3426, 3427, 3428, 3429, 3430, 3431, 3432, 3433, 3434, 3435, 3436, 3437, 3438, 3439, 3440, 3441, 3442, 3443, 3444, 3445, 3446, 3447, 3448, 3449, 3450, 3451, 3452, 3453, 3454, 3455, 3564, 3565, 3566, 3567, 3568, 3569, 3570, 3571, 3572, 3573, 3574, 3575, 3576, 3577, 3578, 3579, 3580, 3581, 3582, 3583}, 'function_expression': {3744, 3745, 3746, 3747, 3748, 3749, 3750, 3751, 3752, 3753, 3754, 3755, 3756, 3757, 3758, 3759, 3760, 3761, 3762, 3763, 3764, 3765, 3766, 3767, 3768, 3769, 3770, 3771, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779}, 'expression_list_suffix': {4096, 4097, 4098, 4071, 4099, 4100, 4101, 4091, 4072, 4102, 4103, 4073, 4074, 4075, 4095, 4076, 4092, 4077, 4078, 4090, 4089, 4079, 4080, 4093, 4088, 4085, 4094, 4087, 3924, 3925, 3926, 3927, 3928, 3929, 3930, 3931, 3932, 3933, 3934, 3935, 3936, 3937, 3938, 3939, 3940, 3941, 3942, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 3955, 3956, 3957, 3958, 3959, 4068, 4069, 4081, 4082, 4083, 4084, 4070, 4086}, 'expression_list': {4224, 4225, 4226, 4227, 4228, 4229, 4230, 4231, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119, 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127, 4128, 4129, 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139, 4232, 4233, 4234, 4235, 4236, 4237, 4238, 4239, 4240, 4241, 4247, 4242, 4243, 4244, 4245, 4246, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223}, 'function_definition': {4248, 4249, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283}, 'function_parameter_list': {4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661, 4662, 4663, 4664, 4665, 4666, 4667, 4668, 4669, 4670, 4671, 4672, 4673, 4674, 4675, 4676, 4677, 4678, 4679, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535}, 'function_parameter_list_suffix': {4716, 4717, 4718, 4719, 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739, 4740, 4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4860, 4861, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879, 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, 4898, 4899, 4900, 4901, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931}, 'function_parameter': {4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999, 5000, 5001, 5002, 5003, 4968, 4969, 4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979, 4980, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991}, 'compound_statement': {5076, 5077, 5078, 5079, 5080, 5081, 5082, 5083, 5084, 5085, 5086, 5087, 5088, 5089, 5090, 5091, 5092, 5093, 5094, 5095, 5096, 5097, 5098, 5099, 5100, 5101, 5102, 5103, 5104, 5105, 5106, 5107, 5108, 5109, 5110, 5111}, 'statement_list': {5248, 5249, 5250, 5251, 5252, 5253, 5254, 5255, 5363, 5348, 5349, 5359, 5350, 5351, 5352, 5362, 5361, 5353, 5354, 5360, 5355, 5356, 5357, 5358, 5328, 5329, 5330, 5331, 5332, 5333, 5334, 5335, 5336, 5337, 5338, 5339, 5340, 5341, 5342, 5343, 5344, 5345, 5346, 5347, 5220, 5221, 5222, 5223, 5224, 5225, 5226, 5227, 5228, 5229, 5230, 5231, 5232, 5233, 5234, 5235, 5236, 5237, 5238, 5239, 5240, 5241, 5242, 5243, 5244, 5245, 5246, 5247}, 'statement': {5652, 5653, 5654, 5655, 5656, 5657, 5658, 5659, 5660, 5661, 5662, 5663, 5664, 5665, 5666, 5667, 5668, 5669, 5670, 5671, 5672, 5673, 5674, 5675, 5676, 5677, 5678, 5679, 5680, 5681, 5682, 5683, 5684, 5685, 5686, 5687, 5724, 5725, 5726, 5727, 5728, 5729, 5730, 5731, 5732, 5733, 5734, 5735, 5736, 5737, 5738, 5739, 5740, 5741, 5742, 5743, 5744, 5745, 5746, 5747, 5748, 5749, 5750, 5751, 5752, 5753, 5754, 5755, 5756, 5757, 5758, 5759, 5364, 5365, 5366, 5367, 5368, 5369, 5370, 5371, 5372, 5373, 5374, 5375, 5376, 5377, 5378, 5379, 5380, 5381, 5382, 5383, 5384, 5385, 5386, 5387, 5388, 5389, 5390, 5391, 5392, 5393, 5394, 5395, 5396, 5397, 5398, 5399, 5436, 5437, 5438, 5439, 5440, 5441, 5442, 5443, 5444, 5445, 5446, 5447, 5448, 5449, 5450, 5451, 5452, 5453, 5454, 5455, 5456, 5457, 5458, 5459, 5460, 5461, 5462, 5463, 5464, 5465, 5466, 5467, 5468, 5469, 5470, 5471, 5508, 5509, 5510, 5511, 5512, 5513, 5514, 5515, 5516, 5517, 5518, 5519, 5520, 5521, 5522, 5523, 5524, 5525, 5526, 5527, 5528, 5529, 5530, 5531, 5532, 5533, 5534, 5535, 5536, 5537, 5538, 5539, 5540, 5541, 5542, 5543, 5580, 5581, 5582, 5583, 5584, 5585, 5586, 5587, 5588, 5589, 5590, 5591, 5592, 5593, 5594, 5595, 5596, 5597, 5598, 5599, 5600, 5601, 5602, 5603, 5604, 5605, 5606, 5607, 5608, 5609, 5610, 5611, 5612, 5613, 5614, 5615}, 'expression_statement': {5796, 5797, 5798, 5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 5813, 5814, 5815, 5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5830, 5831}, 'jump_statement': {6144, 6145, 6146, 6147, 6148, 6149, 6150, 6151, 6152, 6153, 6154, 6155, 6264, 6265, 6266, 6267, 6268, 6269, 6270, 6271, 6272, 6273, 6274, 6275, 6276, 6277, 6278, 6279, 6280, 6281, 6282, 6283, 6284, 6285, 6286, 6287, 6288, 6289, 6290, 6291, 6292, 6293, 6294, 6295, 6296, 6297, 6298, 6299, 5904, 5905, 5906, 5907, 5908, 5909, 5910, 5911, 5912, 5913, 5914, 5915, 5916, 5917, 5918, 5919, 5920, 5921, 5922, 5923, 5924, 5925, 5926, 5927, 5928, 5929, 5930, 5931, 5932, 5933, 5934, 5935, 5936, 5937, 5938, 5939, 6012, 6013, 6014, 6015, 6016, 6017, 6018, 6019, 6020, 6021, 6022, 6023, 6024, 6025, 6026, 6027, 6028, 6029, 6030, 6031, 6032, 6033, 6034, 6035, 6036, 6037, 6038, 6039, 6040, 6041, 6042, 6043, 6044, 6045, 6046, 6047, 6120, 6121, 6122, 6123, 6124, 6125, 6126, 6127, 6128, 6129, 6130, 6131, 6132, 6133, 6134, 6135, 6136, 6137, 6138, 6139, 6140, 6141, 6142, 6143}, 'selection_statement': {6400, 6401, 6402, 6403, 6404, 6405, 6406, 6407, 6372, 6373, 6374, 6375, 6376, 6377, 6378, 6379, 6380, 6381, 6382, 6383, 6384, 6385, 6386, 6387, 6388, 6389, 6390, 6391, 6392, 6393, 6394, 6395, 6396, 6397, 6398, 6399}, 'iteration_statement': {6660, 6661, 6662, 6663, 6664, 6665, 6666, 6667, 6668, 6669, 6670, 6671, 6672, 6673, 6674, 6675, 6676, 6677, 6678, 6679, 6680, 6681, 6682, 6683, 6684, 6685, 6686, 6687, 6688, 6689, 6690, 6691, 6692, 6693, 6694, 6695, 6876, 6877, 6878, 6879, 6880, 6881, 6882, 6883, 6884, 6885, 6886, 6887, 6888, 6889, 6890, 6891, 6892, 6893, 6894, 6895, 6896, 6897, 6898, 6899, 6900, 6901, 6902, 6903, 6904, 6905, 6906, 6907, 6908, 6909, 6910, 6911}} 

